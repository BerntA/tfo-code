// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "htmlmessages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgKeyUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKeyUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKeyDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKeyDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKeyChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKeyChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMouseDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMouseDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMouseUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMouseUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMouseDblClick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMouseDblClick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMouseWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMouseWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMouseMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMouseMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMouseLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMouseLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserCreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserErrorStrings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserErrorStrings_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPostURL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPostURL_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAddHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAddHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStopLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStopLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReload_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGoForward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGoForward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGoBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGoBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCopy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaste_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgExecuteJavaScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgExecuteJavaScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHorizontalScrollBarSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHorizontalScrollBarSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHorizontalScrollBarSizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHorizontalScrollBarSizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgVerticalScrollBarSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVerticalScrollBarSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgVerticalScrollBarSizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVerticalScrollBarSizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFind_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStopFind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStopFind_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetHorizontalScroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetHorizontalScroll_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetVerticalScroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetVerticalScroll_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetZoomLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetZoomLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgViewSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgViewSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrowserReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrowserReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgURLChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgURLChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHTMLHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHTMLHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHTMLPageSecurityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHTMLPageSecurityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFinishedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFinishedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStartRequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStartRequestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgShowPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgShowPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHidePopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHidePopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSizePopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSizePopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpenNewTab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpenNewTab_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpenNewTabResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpenNewTabResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPopupHTMLWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPopupHTMLWindow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPopupHTMLWindowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPopupHTMLWindowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetHTMLTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetHTMLTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLoadingResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLoadingResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStatusText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStatusText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetCursor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetCursor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFileLoadDialog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFileLoadDialog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFileLoadDialogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFileLoadDialogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgShowToolTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgShowToolTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateToolTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateToolTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHideToolTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHideToolTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSearchResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSearchResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNeedsPaint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNeedsPaint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNeedsPaintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNeedsPaintResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGetZoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGetZoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGetZoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGetZoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLinkAtPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLinkAtPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLinkAtPositionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLinkAtPositionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgZoomToElementAtPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgZoomToElementAtPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgZoomToElementAtPositionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgZoomToElementAtPositionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgScalePageToValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgScalePageToValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgScalePageToValueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgScalePageToValueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSavePageToJPEG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSavePageToJPEG_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSavePageToJPEGResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSavePageToJPEGResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJSAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJSAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJSConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJSConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJSDialogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJSDialogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCanGoBackAndForward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCanGoBackAndForward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpenSteamURL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpenSteamURL_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetCookie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetCookie_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetTargetFrameRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetTargetFrameRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFullRepaint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFullRepaint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestFullScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestFullScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestFullScreenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestFullScreenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgExitFullScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgExitFullScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGetCookiesForURL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGetCookiesForURL_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCookie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCookie_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGetCookiesForURLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGetCookiesForURLResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgNodeHasFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgNodeHasFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgZoomToFocusedElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgZoomToFocusedElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCloseFullScreenFlashIfOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCloseFullScreenFlashIfOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPauseFullScreenFlashMovieIfOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPauseFullScreenFlashMovieIfOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFocusedNodeText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFocusedNodeText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFocusedNodeTextResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFocusedNodeTextResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_htmlmessages_2eproto() {
  protobuf_AddDesc_htmlmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "htmlmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgKeyUp_descriptor_ = file->message_type(0);
  static const int CMsgKeyUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, keycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, modifiers_),
  };
  CMsgKeyUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKeyUp_descriptor_,
      CMsgKeyUp::default_instance_,
      CMsgKeyUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKeyUp));
  CMsgKeyDown_descriptor_ = file->message_type(1);
  static const int CMsgKeyDown_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, keycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, modifiers_),
  };
  CMsgKeyDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKeyDown_descriptor_,
      CMsgKeyDown::default_instance_,
      CMsgKeyDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKeyDown));
  CMsgKeyChar_descriptor_ = file->message_type(2);
  static const int CMsgKeyChar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, unichar_),
  };
  CMsgKeyChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKeyChar_descriptor_,
      CMsgKeyChar::default_instance_,
      CMsgKeyChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKeyChar));
  CMsgMouseDown_descriptor_ = file->message_type(3);
  static const int CMsgMouseDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, mouse_button_),
  };
  CMsgMouseDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMouseDown_descriptor_,
      CMsgMouseDown::default_instance_,
      CMsgMouseDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMouseDown));
  CMsgMouseUp_descriptor_ = file->message_type(4);
  static const int CMsgMouseUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, mouse_button_),
  };
  CMsgMouseUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMouseUp_descriptor_,
      CMsgMouseUp::default_instance_,
      CMsgMouseUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMouseUp));
  CMsgMouseDblClick_descriptor_ = file->message_type(5);
  static const int CMsgMouseDblClick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, mouse_button_),
  };
  CMsgMouseDblClick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMouseDblClick_descriptor_,
      CMsgMouseDblClick::default_instance_,
      CMsgMouseDblClick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseDblClick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMouseDblClick));
  CMsgMouseWheel_descriptor_ = file->message_type(6);
  static const int CMsgMouseWheel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, delta_),
  };
  CMsgMouseWheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMouseWheel_descriptor_,
      CMsgMouseWheel::default_instance_,
      CMsgMouseWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseWheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMouseWheel));
  CMsgMouseMove_descriptor_ = file->message_type(7);
  static const int CMsgMouseMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, y_),
  };
  CMsgMouseMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMouseMove_descriptor_,
      CMsgMouseMove::default_instance_,
      CMsgMouseMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMouseMove));
  CMsgMouseLeave_descriptor_ = file->message_type(8);
  static const int CMsgMouseLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseLeave, browser_handle_),
  };
  CMsgMouseLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMouseLeave_descriptor_,
      CMsgMouseLeave::default_instance_,
      CMsgMouseLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMouseLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMouseLeave));
  CMsgBrowserCreate_descriptor_ = file->message_type(9);
  static const int CMsgBrowserCreate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, popup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, useragent_),
  };
  CMsgBrowserCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserCreate_descriptor_,
      CMsgBrowserCreate::default_instance_,
      CMsgBrowserCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserCreate));
  CMsgBrowserCreateResponse_descriptor_ = file->message_type(10);
  static const int CMsgBrowserCreateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, request_id_),
  };
  CMsgBrowserCreateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserCreateResponse_descriptor_,
      CMsgBrowserCreateResponse::default_instance_,
      CMsgBrowserCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserCreateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserCreateResponse));
  CMsgBrowserRemove_descriptor_ = file->message_type(11);
  static const int CMsgBrowserRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserRemove, browser_handle_),
  };
  CMsgBrowserRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserRemove_descriptor_,
      CMsgBrowserRemove::default_instance_,
      CMsgBrowserRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserRemove));
  CMsgBrowserErrorStrings_descriptor_ = file->message_type(12);
  static const int CMsgBrowserErrorStrings_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, cache_miss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, bad_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, connection_problem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, proxy_problem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, unknown_),
  };
  CMsgBrowserErrorStrings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserErrorStrings_descriptor_,
      CMsgBrowserErrorStrings::default_instance_,
      CMsgBrowserErrorStrings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserErrorStrings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserErrorStrings));
  CMsgBrowserSize_descriptor_ = file->message_type(13);
  static const int CMsgBrowserSize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, height_),
  };
  CMsgBrowserSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserSize_descriptor_,
      CMsgBrowserSize::default_instance_,
      CMsgBrowserSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserSize));
  CMsgBrowserPosition_descriptor_ = file->message_type(14);
  static const int CMsgBrowserPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserPosition, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserPosition, y_),
  };
  CMsgBrowserPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserPosition_descriptor_,
      CMsgBrowserPosition::default_instance_,
      CMsgBrowserPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserPosition));
  CMsgPostURL_descriptor_ = file->message_type(15);
  static const int CMsgPostURL_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, pageserial_),
  };
  CMsgPostURL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPostURL_descriptor_,
      CMsgPostURL::default_instance_,
      CMsgPostURL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPostURL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPostURL));
  CMsgAddHeader_descriptor_ = file->message_type(16);
  static const int CMsgAddHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, value_),
  };
  CMsgAddHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAddHeader_descriptor_,
      CMsgAddHeader::default_instance_,
      CMsgAddHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAddHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAddHeader));
  CMsgStopLoad_descriptor_ = file->message_type(17);
  static const int CMsgStopLoad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopLoad, browser_handle_),
  };
  CMsgStopLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStopLoad_descriptor_,
      CMsgStopLoad::default_instance_,
      CMsgStopLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStopLoad));
  CMsgReload_descriptor_ = file->message_type(18);
  static const int CMsgReload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReload, browser_handle_),
  };
  CMsgReload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReload_descriptor_,
      CMsgReload::default_instance_,
      CMsgReload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReload));
  CMsgGoForward_descriptor_ = file->message_type(19);
  static const int CMsgGoForward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoForward, browser_handle_),
  };
  CMsgGoForward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGoForward_descriptor_,
      CMsgGoForward::default_instance_,
      CMsgGoForward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoForward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoForward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGoForward));
  CMsgGoBack_descriptor_ = file->message_type(20);
  static const int CMsgGoBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoBack, browser_handle_),
  };
  CMsgGoBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGoBack_descriptor_,
      CMsgGoBack::default_instance_,
      CMsgGoBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGoBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGoBack));
  CMsgCopy_descriptor_ = file->message_type(21);
  static const int CMsgCopy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCopy, browser_handle_),
  };
  CMsgCopy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCopy_descriptor_,
      CMsgCopy::default_instance_,
      CMsgCopy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCopy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCopy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCopy));
  CMsgPaste_descriptor_ = file->message_type(22);
  static const int CMsgPaste_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaste, browser_handle_),
  };
  CMsgPaste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaste_descriptor_,
      CMsgPaste::default_instance_,
      CMsgPaste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaste));
  CMsgExecuteJavaScript_descriptor_ = file->message_type(23);
  static const int CMsgExecuteJavaScript_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, script_),
  };
  CMsgExecuteJavaScript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgExecuteJavaScript_descriptor_,
      CMsgExecuteJavaScript::default_instance_,
      CMsgExecuteJavaScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExecuteJavaScript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgExecuteJavaScript));
  CMsgSetFocus_descriptor_ = file->message_type(24);
  static const int CMsgSetFocus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, focus_),
  };
  CMsgSetFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetFocus_descriptor_,
      CMsgSetFocus::default_instance_,
      CMsgSetFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetFocus));
  CMsgHorizontalScrollBarSize_descriptor_ = file->message_type(25);
  static const int CMsgHorizontalScrollBarSize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSize, browser_handle_),
  };
  CMsgHorizontalScrollBarSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHorizontalScrollBarSize_descriptor_,
      CMsgHorizontalScrollBarSize::default_instance_,
      CMsgHorizontalScrollBarSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHorizontalScrollBarSize));
  CMsgHorizontalScrollBarSizeResponse_descriptor_ = file->message_type(26);
  static const int CMsgHorizontalScrollBarSizeResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, tall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, scroll_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, scroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, visible_),
  };
  CMsgHorizontalScrollBarSizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHorizontalScrollBarSizeResponse_descriptor_,
      CMsgHorizontalScrollBarSizeResponse::default_instance_,
      CMsgHorizontalScrollBarSizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHorizontalScrollBarSizeResponse));
  CMsgVerticalScrollBarSize_descriptor_ = file->message_type(27);
  static const int CMsgVerticalScrollBarSize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSize, browser_handle_),
  };
  CMsgVerticalScrollBarSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVerticalScrollBarSize_descriptor_,
      CMsgVerticalScrollBarSize::default_instance_,
      CMsgVerticalScrollBarSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVerticalScrollBarSize));
  CMsgVerticalScrollBarSizeResponse_descriptor_ = file->message_type(28);
  static const int CMsgVerticalScrollBarSizeResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, tall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, scroll_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, scroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, visible_),
  };
  CMsgVerticalScrollBarSizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVerticalScrollBarSizeResponse_descriptor_,
      CMsgVerticalScrollBarSizeResponse::default_instance_,
      CMsgVerticalScrollBarSizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVerticalScrollBarSizeResponse));
  CMsgFind_descriptor_ = file->message_type(29);
  static const int CMsgFind_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, find_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, infind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, reverse_),
  };
  CMsgFind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFind_descriptor_,
      CMsgFind::default_instance_,
      CMsgFind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFind));
  CMsgStopFind_descriptor_ = file->message_type(30);
  static const int CMsgStopFind_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFind, browser_handle_),
  };
  CMsgStopFind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStopFind_descriptor_,
      CMsgStopFind::default_instance_,
      CMsgStopFind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStopFind));
  CMsgSetHorizontalScroll_descriptor_ = file->message_type(31);
  static const int CMsgSetHorizontalScroll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, scroll_),
  };
  CMsgSetHorizontalScroll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetHorizontalScroll_descriptor_,
      CMsgSetHorizontalScroll::default_instance_,
      CMsgSetHorizontalScroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHorizontalScroll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetHorizontalScroll));
  CMsgSetVerticalScroll_descriptor_ = file->message_type(32);
  static const int CMsgSetVerticalScroll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, scroll_),
  };
  CMsgSetVerticalScroll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetVerticalScroll_descriptor_,
      CMsgSetVerticalScroll::default_instance_,
      CMsgSetVerticalScroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetVerticalScroll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetVerticalScroll));
  CMsgSetZoomLevel_descriptor_ = file->message_type(33);
  static const int CMsgSetZoomLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, zoom_),
  };
  CMsgSetZoomLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetZoomLevel_descriptor_,
      CMsgSetZoomLevel::default_instance_,
      CMsgSetZoomLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetZoomLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetZoomLevel));
  CMsgViewSource_descriptor_ = file->message_type(34);
  static const int CMsgViewSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgViewSource, browser_handle_),
  };
  CMsgViewSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgViewSource_descriptor_,
      CMsgViewSource::default_instance_,
      CMsgViewSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgViewSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgViewSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgViewSource));
  CMsgBrowserReady_descriptor_ = file->message_type(35);
  static const int CMsgBrowserReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, browser_handle_),
  };
  CMsgBrowserReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrowserReady_descriptor_,
      CMsgBrowserReady::default_instance_,
      CMsgBrowserReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrowserReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrowserReady));
  CMsgURLChanged_descriptor_ = file->message_type(36);
  static const int CMsgURLChanged_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, postdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, bisredirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, pagetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, bnewnavigation_),
  };
  CMsgURLChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgURLChanged_descriptor_,
      CMsgURLChanged::default_instance_,
      CMsgURLChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgURLChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgURLChanged));
  CHTMLHeader_descriptor_ = file->message_type(37);
  static const int CHTMLHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, value_),
  };
  CHTMLHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHTMLHeader_descriptor_,
      CHTMLHeader::default_instance_,
      CHTMLHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHTMLHeader));
  CHTMLPageSecurityInfo_descriptor_ = file->message_type(38);
  static const int CHTMLPageSecurityInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, bissecure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, bhascerterror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, issuername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, certname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, certexpiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, ncertbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, bisevcert_),
  };
  CHTMLPageSecurityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHTMLPageSecurityInfo_descriptor_,
      CHTMLPageSecurityInfo::default_instance_,
      CHTMLPageSecurityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHTMLPageSecurityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHTMLPageSecurityInfo));
  CMsgFinishedRequest_descriptor_ = file->message_type(39);
  static const int CMsgFinishedRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, pagetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, security_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, headers_),
  };
  CMsgFinishedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFinishedRequest_descriptor_,
      CMsgFinishedRequest::default_instance_,
      CMsgFinishedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFinishedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFinishedRequest));
  CMsgStartRequest_descriptor_ = file->message_type(40);
  static const int CMsgStartRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, postdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, bisredirect_),
  };
  CMsgStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStartRequest_descriptor_,
      CMsgStartRequest::default_instance_,
      CMsgStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStartRequest));
  CMsgStartRequestResponse_descriptor_ = file->message_type(41);
  static const int CMsgStartRequestResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, ballow_),
  };
  CMsgStartRequestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStartRequestResponse_descriptor_,
      CMsgStartRequestResponse::default_instance_,
      CMsgStartRequestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartRequestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStartRequestResponse));
  CMsgShowPopup_descriptor_ = file->message_type(42);
  static const int CMsgShowPopup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowPopup, browser_handle_),
  };
  CMsgShowPopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgShowPopup_descriptor_,
      CMsgShowPopup::default_instance_,
      CMsgShowPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowPopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowPopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgShowPopup));
  CMsgHidePopup_descriptor_ = file->message_type(43);
  static const int CMsgHidePopup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHidePopup, browser_handle_),
  };
  CMsgHidePopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHidePopup_descriptor_,
      CMsgHidePopup::default_instance_,
      CMsgHidePopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHidePopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHidePopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHidePopup));
  CMsgSizePopup_descriptor_ = file->message_type(44);
  static const int CMsgSizePopup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, tall_),
  };
  CMsgSizePopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSizePopup_descriptor_,
      CMsgSizePopup::default_instance_,
      CMsgSizePopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSizePopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSizePopup));
  CMsgOpenNewTab_descriptor_ = file->message_type(45);
  static const int CMsgOpenNewTab_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, bforeground_),
  };
  CMsgOpenNewTab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpenNewTab_descriptor_,
      CMsgOpenNewTab::default_instance_,
      CMsgOpenNewTab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpenNewTab));
  CMsgOpenNewTabResponse_descriptor_ = file->message_type(46);
  static const int CMsgOpenNewTabResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTabResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTabResponse, ballow_),
  };
  CMsgOpenNewTabResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpenNewTabResponse_descriptor_,
      CMsgOpenNewTabResponse::default_instance_,
      CMsgOpenNewTabResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTabResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenNewTabResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpenNewTabResponse));
  CMsgPopupHTMLWindow_descriptor_ = file->message_type(47);
  static const int CMsgPopupHTMLWindow_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, tall_),
  };
  CMsgPopupHTMLWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPopupHTMLWindow_descriptor_,
      CMsgPopupHTMLWindow::default_instance_,
      CMsgPopupHTMLWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPopupHTMLWindow));
  CMsgPopupHTMLWindowResponse_descriptor_ = file->message_type(48);
  static const int CMsgPopupHTMLWindowResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, ballow_),
  };
  CMsgPopupHTMLWindowResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPopupHTMLWindowResponse_descriptor_,
      CMsgPopupHTMLWindowResponse::default_instance_,
      CMsgPopupHTMLWindowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPopupHTMLWindowResponse));
  CMsgSetHTMLTitle_descriptor_ = file->message_type(49);
  static const int CMsgSetHTMLTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, title_),
  };
  CMsgSetHTMLTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetHTMLTitle_descriptor_,
      CMsgSetHTMLTitle::default_instance_,
      CMsgSetHTMLTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHTMLTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetHTMLTitle));
  CMsgLoadingResource_descriptor_ = file->message_type(50);
  static const int CMsgLoadingResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, url_),
  };
  CMsgLoadingResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLoadingResource_descriptor_,
      CMsgLoadingResource::default_instance_,
      CMsgLoadingResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLoadingResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLoadingResource));
  CMsgStatusText_descriptor_ = file->message_type(51);
  static const int CMsgStatusText_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, text_),
  };
  CMsgStatusText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStatusText_descriptor_,
      CMsgStatusText::default_instance_,
      CMsgStatusText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStatusText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStatusText));
  CMsgSetCursor_descriptor_ = file->message_type(52);
  static const int CMsgSetCursor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, tall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, xhotspot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, yhotspot_),
  };
  CMsgSetCursor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetCursor_descriptor_,
      CMsgSetCursor::default_instance_,
      CMsgSetCursor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCursor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetCursor));
  CMsgFileLoadDialog_descriptor_ = file->message_type(53);
  static const int CMsgFileLoadDialog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, initialfile_),
  };
  CMsgFileLoadDialog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFileLoadDialog_descriptor_,
      CMsgFileLoadDialog::default_instance_,
      CMsgFileLoadDialog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFileLoadDialog));
  CMsgFileLoadDialogResponse_descriptor_ = file->message_type(54);
  static const int CMsgFileLoadDialogResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, files_),
  };
  CMsgFileLoadDialogResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFileLoadDialogResponse_descriptor_,
      CMsgFileLoadDialogResponse::default_instance_,
      CMsgFileLoadDialogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFileLoadDialogResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFileLoadDialogResponse));
  CMsgShowToolTip_descriptor_ = file->message_type(55);
  static const int CMsgShowToolTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, text_),
  };
  CMsgShowToolTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgShowToolTip_descriptor_,
      CMsgShowToolTip::default_instance_,
      CMsgShowToolTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgShowToolTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgShowToolTip));
  CMsgUpdateToolTip_descriptor_ = file->message_type(56);
  static const int CMsgUpdateToolTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, text_),
  };
  CMsgUpdateToolTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateToolTip_descriptor_,
      CMsgUpdateToolTip::default_instance_,
      CMsgUpdateToolTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateToolTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateToolTip));
  CMsgHideToolTip_descriptor_ = file->message_type(57);
  static const int CMsgHideToolTip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHideToolTip, browser_handle_),
  };
  CMsgHideToolTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHideToolTip_descriptor_,
      CMsgHideToolTip::default_instance_,
      CMsgHideToolTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHideToolTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHideToolTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHideToolTip));
  CMsgSearchResults_descriptor_ = file->message_type(58);
  static const int CMsgSearchResults_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, activematch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, results_),
  };
  CMsgSearchResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSearchResults_descriptor_,
      CMsgSearchResults::default_instance_,
      CMsgSearchResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSearchResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSearchResults));
  CMsgClose_descriptor_ = file->message_type(59);
  static const int CMsgClose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClose, browser_handle_),
  };
  CMsgClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClose_descriptor_,
      CMsgClose::default_instance_,
      CMsgClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClose));
  CMsgNeedsPaint_descriptor_ = file->message_type(60);
  static const int CMsgNeedsPaint_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, rgba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, tall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, textureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, updatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, updatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, updatewide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, updatetall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, scrollx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, scrolly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, combobox_rgba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, combobox_wide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, combobox_tall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, pageserial_),
  };
  CMsgNeedsPaint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNeedsPaint_descriptor_,
      CMsgNeedsPaint::default_instance_,
      CMsgNeedsPaint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNeedsPaint));
  CMsgNeedsPaintResponse_descriptor_ = file->message_type(61);
  static const int CMsgNeedsPaintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaintResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaintResponse, textureid_),
  };
  CMsgNeedsPaintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNeedsPaintResponse_descriptor_,
      CMsgNeedsPaintResponse::default_instance_,
      CMsgNeedsPaintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNeedsPaintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNeedsPaintResponse));
  CMsgGetZoom_descriptor_ = file->message_type(62);
  static const int CMsgGetZoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoom, browser_handle_),
  };
  CMsgGetZoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGetZoom_descriptor_,
      CMsgGetZoom::default_instance_,
      CMsgGetZoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGetZoom));
  CMsgGetZoomResponse_descriptor_ = file->message_type(63);
  static const int CMsgGetZoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, zoom_),
  };
  CMsgGetZoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGetZoomResponse_descriptor_,
      CMsgGetZoomResponse::default_instance_,
      CMsgGetZoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetZoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGetZoomResponse));
  CMsgLinkAtPosition_descriptor_ = file->message_type(64);
  static const int CMsgLinkAtPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, y_),
  };
  CMsgLinkAtPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLinkAtPosition_descriptor_,
      CMsgLinkAtPosition::default_instance_,
      CMsgLinkAtPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLinkAtPosition));
  CMsgLinkAtPositionResponse_descriptor_ = file->message_type(65);
  static const int CMsgLinkAtPositionResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, blivelink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, binput_),
  };
  CMsgLinkAtPositionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLinkAtPositionResponse_descriptor_,
      CMsgLinkAtPositionResponse::default_instance_,
      CMsgLinkAtPositionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinkAtPositionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLinkAtPositionResponse));
  CMsgZoomToElementAtPosition_descriptor_ = file->message_type(66);
  static const int CMsgZoomToElementAtPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, y_),
  };
  CMsgZoomToElementAtPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgZoomToElementAtPosition_descriptor_,
      CMsgZoomToElementAtPosition::default_instance_,
      CMsgZoomToElementAtPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgZoomToElementAtPosition));
  CMsgZoomToElementAtPositionResponse_descriptor_ = file->message_type(67);
  static const int CMsgZoomToElementAtPositionResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, initial_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, initial_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, initial_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, initial_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, final_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, final_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, final_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, final_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, zoom_),
  };
  CMsgZoomToElementAtPositionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgZoomToElementAtPositionResponse_descriptor_,
      CMsgZoomToElementAtPositionResponse::default_instance_,
      CMsgZoomToElementAtPositionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgZoomToElementAtPositionResponse));
  CMsgScalePageToValue_descriptor_ = file->message_type(68);
  static const int CMsgScalePageToValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, y_),
  };
  CMsgScalePageToValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgScalePageToValue_descriptor_,
      CMsgScalePageToValue::default_instance_,
      CMsgScalePageToValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgScalePageToValue));
  CMsgScalePageToValueResponse_descriptor_ = file->message_type(69);
  static const int CMsgScalePageToValueResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, width_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, height_delta_),
  };
  CMsgScalePageToValueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgScalePageToValueResponse_descriptor_,
      CMsgScalePageToValueResponse::default_instance_,
      CMsgScalePageToValueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgScalePageToValueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgScalePageToValueResponse));
  CMsgSavePageToJPEG_descriptor_ = file->message_type(70);
  static const int CMsgSavePageToJPEG_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, height_),
  };
  CMsgSavePageToJPEG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSavePageToJPEG_descriptor_,
      CMsgSavePageToJPEG::default_instance_,
      CMsgSavePageToJPEG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSavePageToJPEG));
  CMsgSavePageToJPEGResponse_descriptor_ = file->message_type(71);
  static const int CMsgSavePageToJPEGResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, filename_),
  };
  CMsgSavePageToJPEGResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSavePageToJPEGResponse_descriptor_,
      CMsgSavePageToJPEGResponse::default_instance_,
      CMsgSavePageToJPEGResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSavePageToJPEGResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSavePageToJPEGResponse));
  CMsgJSAlert_descriptor_ = file->message_type(72);
  static const int CMsgJSAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, message_),
  };
  CMsgJSAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJSAlert_descriptor_,
      CMsgJSAlert::default_instance_,
      CMsgJSAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJSAlert));
  CMsgJSConfirm_descriptor_ = file->message_type(73);
  static const int CMsgJSConfirm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, message_),
  };
  CMsgJSConfirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJSConfirm_descriptor_,
      CMsgJSConfirm::default_instance_,
      CMsgJSConfirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSConfirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJSConfirm));
  CMsgJSDialogResponse_descriptor_ = file->message_type(74);
  static const int CMsgJSDialogResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, result_),
  };
  CMsgJSDialogResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJSDialogResponse_descriptor_,
      CMsgJSDialogResponse::default_instance_,
      CMsgJSDialogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJSDialogResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJSDialogResponse));
  CMsgCanGoBackAndForward_descriptor_ = file->message_type(75);
  static const int CMsgCanGoBackAndForward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, bgoback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, bgoforward_),
  };
  CMsgCanGoBackAndForward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCanGoBackAndForward_descriptor_,
      CMsgCanGoBackAndForward::default_instance_,
      CMsgCanGoBackAndForward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCanGoBackAndForward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCanGoBackAndForward));
  CMsgOpenSteamURL_descriptor_ = file->message_type(76);
  static const int CMsgOpenSteamURL_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, url_),
  };
  CMsgOpenSteamURL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpenSteamURL_descriptor_,
      CMsgOpenSteamURL::default_instance_,
      CMsgOpenSteamURL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpenSteamURL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpenSteamURL));
  CMsgSetCookie_descriptor_ = file->message_type(77);
  static const int CMsgSetCookie_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, expires_),
  };
  CMsgSetCookie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetCookie_descriptor_,
      CMsgSetCookie::default_instance_,
      CMsgSetCookie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetCookie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetCookie));
  CMsgSetTargetFrameRate_descriptor_ = file->message_type(78);
  static const int CMsgSetTargetFrameRate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, ntargetframerate_),
  };
  CMsgSetTargetFrameRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetTargetFrameRate_descriptor_,
      CMsgSetTargetFrameRate::default_instance_,
      CMsgSetTargetFrameRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetTargetFrameRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetTargetFrameRate));
  CMsgFullRepaint_descriptor_ = file->message_type(79);
  static const int CMsgFullRepaint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFullRepaint, browser_handle_),
  };
  CMsgFullRepaint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFullRepaint_descriptor_,
      CMsgFullRepaint::default_instance_,
      CMsgFullRepaint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFullRepaint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFullRepaint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFullRepaint));
  CMsgRequestFullScreen_descriptor_ = file->message_type(80);
  static const int CMsgRequestFullScreen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreen, browser_handle_),
  };
  CMsgRequestFullScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestFullScreen_descriptor_,
      CMsgRequestFullScreen::default_instance_,
      CMsgRequestFullScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestFullScreen));
  CMsgRequestFullScreenResponse_descriptor_ = file->message_type(81);
  static const int CMsgRequestFullScreenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, ballow_),
  };
  CMsgRequestFullScreenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestFullScreenResponse_descriptor_,
      CMsgRequestFullScreenResponse::default_instance_,
      CMsgRequestFullScreenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestFullScreenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestFullScreenResponse));
  CMsgExitFullScreen_descriptor_ = file->message_type(82);
  static const int CMsgExitFullScreen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitFullScreen, browser_handle_),
  };
  CMsgExitFullScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgExitFullScreen_descriptor_,
      CMsgExitFullScreen::default_instance_,
      CMsgExitFullScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitFullScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgExitFullScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgExitFullScreen));
  CMsgGetCookiesForURL_descriptor_ = file->message_type(83);
  static const int CMsgGetCookiesForURL_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, url_),
  };
  CMsgGetCookiesForURL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGetCookiesForURL_descriptor_,
      CMsgGetCookiesForURL::default_instance_,
      CMsgGetCookiesForURL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGetCookiesForURL));
  CCookie_descriptor_ = file->message_type(84);
  static const int CCookie_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, path_),
  };
  CCookie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCookie_descriptor_,
      CCookie::default_instance_,
      CCookie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCookie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCookie));
  CMsgGetCookiesForURLResponse_descriptor_ = file->message_type(85);
  static const int CMsgGetCookiesForURLResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, cookies_),
  };
  CMsgGetCookiesForURLResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGetCookiesForURLResponse_descriptor_,
      CMsgGetCookiesForURLResponse::default_instance_,
      CMsgGetCookiesForURLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGetCookiesForURLResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGetCookiesForURLResponse));
  CMsgNodeHasFocus_descriptor_ = file->message_type(86);
  static const int CMsgNodeHasFocus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, binput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, elementtagname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, searchbuttontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, bhasmultipleinputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, input_type_),
  };
  CMsgNodeHasFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgNodeHasFocus_descriptor_,
      CMsgNodeHasFocus::default_instance_,
      CMsgNodeHasFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNodeHasFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgNodeHasFocus));
  CMsgZoomToFocusedElement_descriptor_ = file->message_type(87);
  static const int CMsgZoomToFocusedElement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, leftoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, topoffset_),
  };
  CMsgZoomToFocusedElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgZoomToFocusedElement_descriptor_,
      CMsgZoomToFocusedElement::default_instance_,
      CMsgZoomToFocusedElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgZoomToFocusedElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgZoomToFocusedElement));
  CMsgCloseFullScreenFlashIfOpen_descriptor_ = file->message_type(88);
  static const int CMsgCloseFullScreenFlashIfOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseFullScreenFlashIfOpen, browser_handle_),
  };
  CMsgCloseFullScreenFlashIfOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCloseFullScreenFlashIfOpen_descriptor_,
      CMsgCloseFullScreenFlashIfOpen::default_instance_,
      CMsgCloseFullScreenFlashIfOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseFullScreenFlashIfOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCloseFullScreenFlashIfOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCloseFullScreenFlashIfOpen));
  CMsgPauseFullScreenFlashMovieIfOpen_descriptor_ = file->message_type(89);
  static const int CMsgPauseFullScreenFlashMovieIfOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseFullScreenFlashMovieIfOpen, browser_handle_),
  };
  CMsgPauseFullScreenFlashMovieIfOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPauseFullScreenFlashMovieIfOpen_descriptor_,
      CMsgPauseFullScreenFlashMovieIfOpen::default_instance_,
      CMsgPauseFullScreenFlashMovieIfOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseFullScreenFlashMovieIfOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPauseFullScreenFlashMovieIfOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPauseFullScreenFlashMovieIfOpen));
  CMsgFocusedNodeText_descriptor_ = file->message_type(90);
  static const int CMsgFocusedNodeText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeText, browser_handle_),
  };
  CMsgFocusedNodeText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFocusedNodeText_descriptor_,
      CMsgFocusedNodeText::default_instance_,
      CMsgFocusedNodeText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFocusedNodeText));
  CMsgFocusedNodeTextResponse_descriptor_ = file->message_type(91);
  static const int CMsgFocusedNodeTextResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, browser_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, value_),
  };
  CMsgFocusedNodeTextResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFocusedNodeTextResponse_descriptor_,
      CMsgFocusedNodeTextResponse::default_instance_,
      CMsgFocusedNodeTextResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFocusedNodeTextResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFocusedNodeTextResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_htmlmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKeyUp_descriptor_, &CMsgKeyUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKeyDown_descriptor_, &CMsgKeyDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKeyChar_descriptor_, &CMsgKeyChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMouseDown_descriptor_, &CMsgMouseDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMouseUp_descriptor_, &CMsgMouseUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMouseDblClick_descriptor_, &CMsgMouseDblClick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMouseWheel_descriptor_, &CMsgMouseWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMouseMove_descriptor_, &CMsgMouseMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMouseLeave_descriptor_, &CMsgMouseLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserCreate_descriptor_, &CMsgBrowserCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserCreateResponse_descriptor_, &CMsgBrowserCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserRemove_descriptor_, &CMsgBrowserRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserErrorStrings_descriptor_, &CMsgBrowserErrorStrings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserSize_descriptor_, &CMsgBrowserSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserPosition_descriptor_, &CMsgBrowserPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPostURL_descriptor_, &CMsgPostURL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAddHeader_descriptor_, &CMsgAddHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStopLoad_descriptor_, &CMsgStopLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReload_descriptor_, &CMsgReload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGoForward_descriptor_, &CMsgGoForward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGoBack_descriptor_, &CMsgGoBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCopy_descriptor_, &CMsgCopy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaste_descriptor_, &CMsgPaste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgExecuteJavaScript_descriptor_, &CMsgExecuteJavaScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetFocus_descriptor_, &CMsgSetFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHorizontalScrollBarSize_descriptor_, &CMsgHorizontalScrollBarSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHorizontalScrollBarSizeResponse_descriptor_, &CMsgHorizontalScrollBarSizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVerticalScrollBarSize_descriptor_, &CMsgVerticalScrollBarSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVerticalScrollBarSizeResponse_descriptor_, &CMsgVerticalScrollBarSizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFind_descriptor_, &CMsgFind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStopFind_descriptor_, &CMsgStopFind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetHorizontalScroll_descriptor_, &CMsgSetHorizontalScroll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetVerticalScroll_descriptor_, &CMsgSetVerticalScroll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetZoomLevel_descriptor_, &CMsgSetZoomLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgViewSource_descriptor_, &CMsgViewSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrowserReady_descriptor_, &CMsgBrowserReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgURLChanged_descriptor_, &CMsgURLChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHTMLHeader_descriptor_, &CHTMLHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHTMLPageSecurityInfo_descriptor_, &CHTMLPageSecurityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFinishedRequest_descriptor_, &CMsgFinishedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStartRequest_descriptor_, &CMsgStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStartRequestResponse_descriptor_, &CMsgStartRequestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgShowPopup_descriptor_, &CMsgShowPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHidePopup_descriptor_, &CMsgHidePopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSizePopup_descriptor_, &CMsgSizePopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpenNewTab_descriptor_, &CMsgOpenNewTab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpenNewTabResponse_descriptor_, &CMsgOpenNewTabResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPopupHTMLWindow_descriptor_, &CMsgPopupHTMLWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPopupHTMLWindowResponse_descriptor_, &CMsgPopupHTMLWindowResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetHTMLTitle_descriptor_, &CMsgSetHTMLTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLoadingResource_descriptor_, &CMsgLoadingResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStatusText_descriptor_, &CMsgStatusText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetCursor_descriptor_, &CMsgSetCursor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFileLoadDialog_descriptor_, &CMsgFileLoadDialog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFileLoadDialogResponse_descriptor_, &CMsgFileLoadDialogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgShowToolTip_descriptor_, &CMsgShowToolTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateToolTip_descriptor_, &CMsgUpdateToolTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHideToolTip_descriptor_, &CMsgHideToolTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSearchResults_descriptor_, &CMsgSearchResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClose_descriptor_, &CMsgClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNeedsPaint_descriptor_, &CMsgNeedsPaint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNeedsPaintResponse_descriptor_, &CMsgNeedsPaintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGetZoom_descriptor_, &CMsgGetZoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGetZoomResponse_descriptor_, &CMsgGetZoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLinkAtPosition_descriptor_, &CMsgLinkAtPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLinkAtPositionResponse_descriptor_, &CMsgLinkAtPositionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgZoomToElementAtPosition_descriptor_, &CMsgZoomToElementAtPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgZoomToElementAtPositionResponse_descriptor_, &CMsgZoomToElementAtPositionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgScalePageToValue_descriptor_, &CMsgScalePageToValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgScalePageToValueResponse_descriptor_, &CMsgScalePageToValueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSavePageToJPEG_descriptor_, &CMsgSavePageToJPEG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSavePageToJPEGResponse_descriptor_, &CMsgSavePageToJPEGResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJSAlert_descriptor_, &CMsgJSAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJSConfirm_descriptor_, &CMsgJSConfirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJSDialogResponse_descriptor_, &CMsgJSDialogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCanGoBackAndForward_descriptor_, &CMsgCanGoBackAndForward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpenSteamURL_descriptor_, &CMsgOpenSteamURL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetCookie_descriptor_, &CMsgSetCookie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetTargetFrameRate_descriptor_, &CMsgSetTargetFrameRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFullRepaint_descriptor_, &CMsgFullRepaint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestFullScreen_descriptor_, &CMsgRequestFullScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestFullScreenResponse_descriptor_, &CMsgRequestFullScreenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgExitFullScreen_descriptor_, &CMsgExitFullScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGetCookiesForURL_descriptor_, &CMsgGetCookiesForURL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCookie_descriptor_, &CCookie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGetCookiesForURLResponse_descriptor_, &CMsgGetCookiesForURLResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgNodeHasFocus_descriptor_, &CMsgNodeHasFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgZoomToFocusedElement_descriptor_, &CMsgZoomToFocusedElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCloseFullScreenFlashIfOpen_descriptor_, &CMsgCloseFullScreenFlashIfOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPauseFullScreenFlashMovieIfOpen_descriptor_, &CMsgPauseFullScreenFlashMovieIfOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFocusedNodeText_descriptor_, &CMsgFocusedNodeText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFocusedNodeTextResponse_descriptor_, &CMsgFocusedNodeTextResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_htmlmessages_2eproto() {
  delete CMsgKeyUp::default_instance_;
  delete CMsgKeyUp_reflection_;
  delete CMsgKeyDown::default_instance_;
  delete CMsgKeyDown_reflection_;
  delete CMsgKeyChar::default_instance_;
  delete CMsgKeyChar_reflection_;
  delete CMsgMouseDown::default_instance_;
  delete CMsgMouseDown_reflection_;
  delete CMsgMouseUp::default_instance_;
  delete CMsgMouseUp_reflection_;
  delete CMsgMouseDblClick::default_instance_;
  delete CMsgMouseDblClick_reflection_;
  delete CMsgMouseWheel::default_instance_;
  delete CMsgMouseWheel_reflection_;
  delete CMsgMouseMove::default_instance_;
  delete CMsgMouseMove_reflection_;
  delete CMsgMouseLeave::default_instance_;
  delete CMsgMouseLeave_reflection_;
  delete CMsgBrowserCreate::default_instance_;
  delete CMsgBrowserCreate_reflection_;
  delete CMsgBrowserCreateResponse::default_instance_;
  delete CMsgBrowserCreateResponse_reflection_;
  delete CMsgBrowserRemove::default_instance_;
  delete CMsgBrowserRemove_reflection_;
  delete CMsgBrowserErrorStrings::default_instance_;
  delete CMsgBrowserErrorStrings_reflection_;
  delete CMsgBrowserSize::default_instance_;
  delete CMsgBrowserSize_reflection_;
  delete CMsgBrowserPosition::default_instance_;
  delete CMsgBrowserPosition_reflection_;
  delete CMsgPostURL::default_instance_;
  delete CMsgPostURL_reflection_;
  delete CMsgAddHeader::default_instance_;
  delete CMsgAddHeader_reflection_;
  delete CMsgStopLoad::default_instance_;
  delete CMsgStopLoad_reflection_;
  delete CMsgReload::default_instance_;
  delete CMsgReload_reflection_;
  delete CMsgGoForward::default_instance_;
  delete CMsgGoForward_reflection_;
  delete CMsgGoBack::default_instance_;
  delete CMsgGoBack_reflection_;
  delete CMsgCopy::default_instance_;
  delete CMsgCopy_reflection_;
  delete CMsgPaste::default_instance_;
  delete CMsgPaste_reflection_;
  delete CMsgExecuteJavaScript::default_instance_;
  delete CMsgExecuteJavaScript_reflection_;
  delete CMsgSetFocus::default_instance_;
  delete CMsgSetFocus_reflection_;
  delete CMsgHorizontalScrollBarSize::default_instance_;
  delete CMsgHorizontalScrollBarSize_reflection_;
  delete CMsgHorizontalScrollBarSizeResponse::default_instance_;
  delete CMsgHorizontalScrollBarSizeResponse_reflection_;
  delete CMsgVerticalScrollBarSize::default_instance_;
  delete CMsgVerticalScrollBarSize_reflection_;
  delete CMsgVerticalScrollBarSizeResponse::default_instance_;
  delete CMsgVerticalScrollBarSizeResponse_reflection_;
  delete CMsgFind::default_instance_;
  delete CMsgFind_reflection_;
  delete CMsgStopFind::default_instance_;
  delete CMsgStopFind_reflection_;
  delete CMsgSetHorizontalScroll::default_instance_;
  delete CMsgSetHorizontalScroll_reflection_;
  delete CMsgSetVerticalScroll::default_instance_;
  delete CMsgSetVerticalScroll_reflection_;
  delete CMsgSetZoomLevel::default_instance_;
  delete CMsgSetZoomLevel_reflection_;
  delete CMsgViewSource::default_instance_;
  delete CMsgViewSource_reflection_;
  delete CMsgBrowserReady::default_instance_;
  delete CMsgBrowserReady_reflection_;
  delete CMsgURLChanged::default_instance_;
  delete CMsgURLChanged_reflection_;
  delete CHTMLHeader::default_instance_;
  delete CHTMLHeader_reflection_;
  delete CHTMLPageSecurityInfo::default_instance_;
  delete CHTMLPageSecurityInfo_reflection_;
  delete CMsgFinishedRequest::default_instance_;
  delete CMsgFinishedRequest_reflection_;
  delete CMsgStartRequest::default_instance_;
  delete CMsgStartRequest_reflection_;
  delete CMsgStartRequestResponse::default_instance_;
  delete CMsgStartRequestResponse_reflection_;
  delete CMsgShowPopup::default_instance_;
  delete CMsgShowPopup_reflection_;
  delete CMsgHidePopup::default_instance_;
  delete CMsgHidePopup_reflection_;
  delete CMsgSizePopup::default_instance_;
  delete CMsgSizePopup_reflection_;
  delete CMsgOpenNewTab::default_instance_;
  delete CMsgOpenNewTab_reflection_;
  delete CMsgOpenNewTabResponse::default_instance_;
  delete CMsgOpenNewTabResponse_reflection_;
  delete CMsgPopupHTMLWindow::default_instance_;
  delete CMsgPopupHTMLWindow_reflection_;
  delete CMsgPopupHTMLWindowResponse::default_instance_;
  delete CMsgPopupHTMLWindowResponse_reflection_;
  delete CMsgSetHTMLTitle::default_instance_;
  delete CMsgSetHTMLTitle_reflection_;
  delete CMsgLoadingResource::default_instance_;
  delete CMsgLoadingResource_reflection_;
  delete CMsgStatusText::default_instance_;
  delete CMsgStatusText_reflection_;
  delete CMsgSetCursor::default_instance_;
  delete CMsgSetCursor_reflection_;
  delete CMsgFileLoadDialog::default_instance_;
  delete CMsgFileLoadDialog_reflection_;
  delete CMsgFileLoadDialogResponse::default_instance_;
  delete CMsgFileLoadDialogResponse_reflection_;
  delete CMsgShowToolTip::default_instance_;
  delete CMsgShowToolTip_reflection_;
  delete CMsgUpdateToolTip::default_instance_;
  delete CMsgUpdateToolTip_reflection_;
  delete CMsgHideToolTip::default_instance_;
  delete CMsgHideToolTip_reflection_;
  delete CMsgSearchResults::default_instance_;
  delete CMsgSearchResults_reflection_;
  delete CMsgClose::default_instance_;
  delete CMsgClose_reflection_;
  delete CMsgNeedsPaint::default_instance_;
  delete CMsgNeedsPaint_reflection_;
  delete CMsgNeedsPaintResponse::default_instance_;
  delete CMsgNeedsPaintResponse_reflection_;
  delete CMsgGetZoom::default_instance_;
  delete CMsgGetZoom_reflection_;
  delete CMsgGetZoomResponse::default_instance_;
  delete CMsgGetZoomResponse_reflection_;
  delete CMsgLinkAtPosition::default_instance_;
  delete CMsgLinkAtPosition_reflection_;
  delete CMsgLinkAtPositionResponse::default_instance_;
  delete CMsgLinkAtPositionResponse_reflection_;
  delete CMsgZoomToElementAtPosition::default_instance_;
  delete CMsgZoomToElementAtPosition_reflection_;
  delete CMsgZoomToElementAtPositionResponse::default_instance_;
  delete CMsgZoomToElementAtPositionResponse_reflection_;
  delete CMsgScalePageToValue::default_instance_;
  delete CMsgScalePageToValue_reflection_;
  delete CMsgScalePageToValueResponse::default_instance_;
  delete CMsgScalePageToValueResponse_reflection_;
  delete CMsgSavePageToJPEG::default_instance_;
  delete CMsgSavePageToJPEG_reflection_;
  delete CMsgSavePageToJPEGResponse::default_instance_;
  delete CMsgSavePageToJPEGResponse_reflection_;
  delete CMsgJSAlert::default_instance_;
  delete CMsgJSAlert_reflection_;
  delete CMsgJSConfirm::default_instance_;
  delete CMsgJSConfirm_reflection_;
  delete CMsgJSDialogResponse::default_instance_;
  delete CMsgJSDialogResponse_reflection_;
  delete CMsgCanGoBackAndForward::default_instance_;
  delete CMsgCanGoBackAndForward_reflection_;
  delete CMsgOpenSteamURL::default_instance_;
  delete CMsgOpenSteamURL_reflection_;
  delete CMsgSetCookie::default_instance_;
  delete CMsgSetCookie_reflection_;
  delete CMsgSetTargetFrameRate::default_instance_;
  delete CMsgSetTargetFrameRate_reflection_;
  delete CMsgFullRepaint::default_instance_;
  delete CMsgFullRepaint_reflection_;
  delete CMsgRequestFullScreen::default_instance_;
  delete CMsgRequestFullScreen_reflection_;
  delete CMsgRequestFullScreenResponse::default_instance_;
  delete CMsgRequestFullScreenResponse_reflection_;
  delete CMsgExitFullScreen::default_instance_;
  delete CMsgExitFullScreen_reflection_;
  delete CMsgGetCookiesForURL::default_instance_;
  delete CMsgGetCookiesForURL_reflection_;
  delete CCookie::default_instance_;
  delete CCookie_reflection_;
  delete CMsgGetCookiesForURLResponse::default_instance_;
  delete CMsgGetCookiesForURLResponse_reflection_;
  delete CMsgNodeHasFocus::default_instance_;
  delete CMsgNodeHasFocus_reflection_;
  delete CMsgZoomToFocusedElement::default_instance_;
  delete CMsgZoomToFocusedElement_reflection_;
  delete CMsgCloseFullScreenFlashIfOpen::default_instance_;
  delete CMsgCloseFullScreenFlashIfOpen_reflection_;
  delete CMsgPauseFullScreenFlashMovieIfOpen::default_instance_;
  delete CMsgPauseFullScreenFlashMovieIfOpen_reflection_;
  delete CMsgFocusedNodeText::default_instance_;
  delete CMsgFocusedNodeText_reflection_;
  delete CMsgFocusedNodeTextResponse::default_instance_;
  delete CMsgFocusedNodeTextResponse_reflection_;
}

void protobuf_AddDesc_htmlmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022htmlmessages.proto\"G\n\tCMsgKeyUp\022\026\n\016bro"
    "wser_handle\030\001 \001(\r\022\017\n\007keyCode\030\002 \001(\r\022\021\n\tmo"
    "difiers\030\003 \001(\r\"I\n\013CMsgKeyDown\022\026\n\016browser_"
    "handle\030\001 \001(\r\022\017\n\007keyCode\030\002 \001(\r\022\021\n\tmodifie"
    "rs\030\003 \001(\r\"6\n\013CMsgKeyChar\022\026\n\016browser_handl"
    "e\030\001 \001(\r\022\017\n\007unichar\030\002 \001(\r\"=\n\rCMsgMouseDow"
    "n\022\026\n\016browser_handle\030\001 \001(\r\022\024\n\014mouse_butto"
    "n\030\002 \001(\r\";\n\013CMsgMouseUp\022\026\n\016browser_handle"
    "\030\001 \001(\r\022\024\n\014mouse_button\030\002 \001(\r\"A\n\021CMsgMous"
    "eDblClick\022\026\n\016browser_handle\030\001 \001(\r\022\024\n\014mou"
    "se_button\030\002 \001(\r\"7\n\016CMsgMouseWheel\022\026\n\016bro"
    "wser_handle\030\001 \001(\r\022\r\n\005delta\030\002 \001(\005\"=\n\rCMsg"
    "MouseMove\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002"
    " \001(\005\022\t\n\001y\030\003 \001(\005\"(\n\016CMsgMouseLeave\022\026\n\016bro"
    "wser_handle\030\001 \001(\r\"P\n\021CMsgBrowserCreate\022\022"
    "\n\nrequest_id\030\001 \001(\r\022\024\n\005popup\030\002 \001(\010:\005false"
    "\022\021\n\tuseragent\030\003 \001(\t\"G\n\031CMsgBrowserCreate"
    "Response\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\nrequ"
    "est_id\030\002 \001(\r\"+\n\021CMsgBrowserRemove\022\026\n\016bro"
    "wser_handle\030\001 \001(\r\"\271\001\n\027CMsgBrowserErrorSt"
    "rings\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005title\030\002"
    " \001(\t\022\016\n\006header\030\003 \001(\t\022\022\n\ncache_miss\030\004 \001(\t"
    "\022\017\n\007bad_url\030\005 \001(\t\022\032\n\022connection_problem\030"
    "\006 \001(\t\022\025\n\rproxy_problem\030\007 \001(\t\022\017\n\007unknown\030"
    "\010 \001(\t\"H\n\017CMsgBrowserSize\022\026\n\016browser_hand"
    "le\030\001 \001(\r\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\""
    "C\n\023CMsgBrowserPosition\022\026\n\016browser_handle"
    "\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"T\n\013CMsgPost"
    "URL\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t"
    "\022\014\n\004post\030\003 \001(\t\022\022\n\npageserial\030\004 \001(\r\"C\n\rCM"
    "sgAddHeader\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003k"
    "ey\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"&\n\014CMsgStopLoad\022"
    "\026\n\016browser_handle\030\001 \001(\r\"$\n\nCMsgReload\022\026\n"
    "\016browser_handle\030\001 \001(\r\"\'\n\rCMsgGoForward\022\026"
    "\n\016browser_handle\030\001 \001(\r\"$\n\nCMsgGoBack\022\026\n\016"
    "browser_handle\030\001 \001(\r\"\"\n\010CMsgCopy\022\026\n\016brow"
    "ser_handle\030\001 \001(\r\"#\n\tCMsgPaste\022\026\n\016browser"
    "_handle\030\001 \001(\r\"?\n\025CMsgExecuteJavaScript\022\026"
    "\n\016browser_handle\030\001 \001(\r\022\016\n\006script\030\002 \001(\t\"5"
    "\n\014CMsgSetFocus\022\026\n\016browser_handle\030\001 \001(\r\022\r"
    "\n\005focus\030\002 \001(\010\"5\n\033CMsgHorizontalScrollBar"
    "Size\022\026\n\016browser_handle\030\001 \001(\r\"\262\001\n#CMsgHor"
    "izontalScrollBarSizeResponse\022\026\n\016browser_"
    "handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\014\n\004wi"
    "de\030\004 \001(\r\022\014\n\004tall\030\005 \001(\r\022\022\n\nscroll_max\030\006 \001"
    "(\r\022\016\n\006scroll\030\007 \001(\r\022\014\n\004zoom\030\010 \001(\002\022\017\n\007visi"
    "ble\030\t \001(\010\"3\n\031CMsgVerticalScrollBarSize\022\026"
    "\n\016browser_handle\030\001 \001(\r\"\260\001\n!CMsgVerticalS"
    "crollBarSizeResponse\022\026\n\016browser_handle\030\001"
    " \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\014\n\004wide\030\004 \001(\r"
    "\022\014\n\004tall\030\005 \001(\r\022\022\n\nscroll_max\030\006 \001(\r\022\016\n\006sc"
    "roll\030\007 \001(\r\022\014\n\004zoom\030\010 \001(\002\022\017\n\007visible\030\t \001("
    "\010\"X\n\010CMsgFind\022\026\n\016browser_handle\030\001 \001(\r\022\014\n"
    "\004find\030\002 \001(\t\022\016\n\006infind\030\003 \001(\010\022\026\n\007reverse\030\004"
    " \001(\010:\005false\"&\n\014CMsgStopFind\022\026\n\016browser_h"
    "andle\030\001 \001(\r\"A\n\027CMsgSetHorizontalScroll\022\026"
    "\n\016browser_handle\030\001 \001(\r\022\016\n\006scroll\030\002 \001(\r\"?"
    "\n\025CMsgSetVerticalScroll\022\026\n\016browser_handl"
    "e\030\001 \001(\r\022\016\n\006scroll\030\002 \001(\r\"8\n\020CMsgSetZoomLe"
    "vel\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004zoom\030\002 \001("
    "\r\"(\n\016CMsgViewSource\022\026\n\016browser_handle\030\001 "
    "\001(\r\"*\n\020CMsgBrowserReady\022\026\n\016browser_handl"
    "e\030\001 \001(\r\"\207\001\n\016CMsgURLChanged\022\026\n\016browser_ha"
    "ndle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010postData\030\003 \001("
    "\t\022\023\n\013bIsRedirect\030\004 \001(\010\022\021\n\tpagetitle\030\005 \001("
    "\t\022\026\n\016bNewNavigation\030\006 \001(\010\")\n\013CHTMLHeader"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\300\001\n\025CHTMLPa"
    "geSecurityInfo\022\030\n\tbIsSecure\030\001 \001(\010:\005false"
    "\022\034\n\rbHasCertError\030\002 \001(\010:\005false\022\024\n\nissuer"
    "Name\030\003 \001(\t:\000\022\022\n\010certName\030\004 \001(\t:\000\022\025\n\ncert"
    "Expiry\030\005 \001(\005:\0010\022\024\n\tnCertBits\030\006 \001(\005:\0010\022\030\n"
    "\tbIsEVCert\030\007 \001(\010:\005false\"\233\001\n\023CMsgFinished"
    "Request\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002"
    " \001(\t\022\021\n\tpageTitle\030\003 \001(\t\022-\n\rsecurity_info"
    "\030\004 \001(\0132\026.CHTMLPageSecurityInfo\022\035\n\007header"
    "s\030\005 \003(\0132\014.CHTMLHeader\"n\n\020CMsgStartReques"
    "t\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\016"
    "\n\006target\030\003 \001(\t\022\020\n\010postData\030\004 \001(\t\022\023\n\013bIsR"
    "edirect\030\005 \001(\010\"B\n\030CMsgStartRequestRespons"
    "e\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006bAllow\030\002 \001("
    "\010\"\'\n\rCMsgShowPopup\022\026\n\016browser_handle\030\001 \001"
    "(\r\"\'\n\rCMsgHidePopup\022\026\n\016browser_handle\030\001 "
    "\001(\r\"Y\n\rCMsgSizePopup\022\026\n\016browser_handle\030\001"
    " \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\014\n\004wide\030\004 \001(\r"
    "\022\014\n\004tall\030\005 \001(\r\"J\n\016CMsgOpenNewTab\022\026\n\016brow"
    "ser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\023\n\013bForegr"
    "ound\030\003 \001(\010\"@\n\026CMsgOpenNewTabResponse\022\026\n\016"
    "browser_handle\030\001 \001(\r\022\016\n\006bAllow\030\002 \001(\010\"l\n\023"
    "CMsgPopupHTMLWindow\022\026\n\016browser_handle\030\001 "
    "\001(\r\022\013\n\003url\030\002 \001(\t\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\014"
    "\n\004wide\030\005 \001(\r\022\014\n\004tall\030\006 \001(\r\"E\n\033CMsgPopupH"
    "TMLWindowResponse\022\026\n\016browser_handle\030\001 \001("
    "\r\022\016\n\006bAllow\030\002 \001(\010\"9\n\020CMsgSetHTMLTitle\022\026\n"
    "\016browser_handle\030\001 \001(\r\022\r\n\005title\030\002 \001(\t\":\n\023"
    "CMsgLoadingResource\022\026\n\016browser_handle\030\001 "
    "\001(\r\022\013\n\003url\030\002 \001(\t\"6\n\016CMsgStatusText\022\026\n\016br"
    "owser_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\205\001\n\rCMs"
    "gSetCursor\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006cu"
    "rsor\030\002 \001(\r\022\014\n\004data\030\003 \001(\r\022\014\n\004wide\030\004 \001(\r\022\014"
    "\n\004tall\030\005 \001(\r\022\020\n\010xhotspot\030\006 \001(\r\022\020\n\010yhotsp"
    "ot\030\007 \001(\r\"P\n\022CMsgFileLoadDialog\022\026\n\016browse"
    "r_handle\030\001 \001(\r\022\r\n\005title\030\002 \001(\t\022\023\n\013initial"
    "File\030\003 \001(\t\"C\n\032CMsgFileLoadDialogResponse"
    "\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005files\030\002 \003(\t\""
    "7\n\017CMsgShowToolTip\022\026\n\016browser_handle\030\001 \001"
    "(\r\022\014\n\004text\030\002 \001(\t\"9\n\021CMsgUpdateToolTip\022\026\n"
    "\016browser_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\")\n\017C"
    "MsgHideToolTip\022\026\n\016browser_handle\030\001 \001(\r\"Q"
    "\n\021CMsgSearchResults\022\026\n\016browser_handle\030\001 "
    "\001(\r\022\023\n\013activeMatch\030\002 \001(\005\022\017\n\007results\030\003 \001("
    "\005\"#\n\tCMsgClose\022\026\n\016browser_handle\030\001 \001(\r\"\263"
    "\002\n\016CMsgNeedsPaint\022\026\n\016browser_handle\030\001 \001("
    "\r\022\014\n\004rgba\030\002 \001(\004\022\014\n\004wide\030\003 \001(\r\022\014\n\004tall\030\004 "
    "\001(\r\022\021\n\ttextureid\030\005 \001(\r\022\017\n\007updatex\030\006 \001(\r\022"
    "\017\n\007updatey\030\007 \001(\r\022\022\n\nupdatewide\030\010 \001(\r\022\022\n\n"
    "updatetall\030\t \001(\r\022\017\n\007scrollx\030\n \001(\r\022\017\n\007scr"
    "olly\030\013 \001(\r\022\030\n\rcombobox_rgba\030\014 \001(\004:\0010\022\030\n\r"
    "combobox_wide\030\r \001(\r:\0010\022\030\n\rcombobox_tall\030"
    "\016 \001(\r:\0010\022\022\n\npageserial\030\017 \001(\r\"C\n\026CMsgNeed"
    "sPaintResponse\022\026\n\016browser_handle\030\001 \001(\r\022\021"
    "\n\ttextureid\030\002 \001(\r\"%\n\013CMsgGetZoom\022\026\n\016brow"
    "ser_handle\030\001 \001(\r\";\n\023CMsgGetZoomResponse\022"
    "\026\n\016browser_handle\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\002\"B\n"
    "\022CMsgLinkAtPosition\022\026\n\016browser_handle\030\001 "
    "\001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"z\n\032CMsgLinkAtP"
    "ositionResponse\022\026\n\016browser_handle\030\001 \001(\r\022"
    "\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\013\n\003url\030\004 \001(\t\022\021\n\tbl"
    "ivelink\030\005 \001(\010\022\016\n\006binput\030\006 \001(\010\"K\n\033CMsgZoo"
    "mToElementAtPosition\022\026\n\016browser_handle\030\001"
    " \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"\355\001\n#CMsgZoomT"
    "oElementAtPositionResponse\022\026\n\016browser_ha"
    "ndle\030\001 \001(\r\022\021\n\tinitial_x\030\002 \001(\021\022\021\n\tinitial"
    "_y\030\003 \001(\021\022\025\n\rinitial_width\030\004 \001(\r\022\026\n\016initi"
    "al_height\030\005 \001(\r\022\017\n\007final_x\030\006 \001(\021\022\017\n\007fina"
    "l_y\030\007 \001(\021\022\023\n\013final_width\030\010 \001(\r\022\024\n\014final_"
    "height\030\t \001(\r\022\014\n\004zoom\030\n \001(\002\"S\n\024CMsgScaleP"
    "ageToValue\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005sc"
    "ale\030\002 \001(\002\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\"o\n\034CMsgS"
    "calePageToValueResponse\022\026\n\016browser_handl"
    "e\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\002\022\023\n\013width_delta\030\003 \001"
    "(\005\022\024\n\014height_delta\030\004 \001(\005\"j\n\022CMsgSavePage"
    "ToJPEG\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 "
    "\001(\t\022\020\n\010filename\030\003 \001(\t\022\r\n\005width\030\004 \001(\r\022\016\n\006"
    "height\030\005 \001(\r\"S\n\032CMsgSavePageToJPEGRespon"
    "se\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022"
    "\020\n\010filename\030\003 \001(\t\"6\n\013CMsgJSAlert\022\026\n\016brow"
    "ser_handle\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"8\n\rCMs"
    "gJSConfirm\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007me"
    "ssage\030\002 \001(\t\">\n\024CMsgJSDialogResponse\022\026\n\016b"
    "rowser_handle\030\001 \001(\r\022\016\n\006result\030\002 \001(\010\"V\n\027C"
    "MsgCanGoBackAndForward\022\026\n\016browser_handle"
    "\030\001 \001(\r\022\017\n\007bgoback\030\002 \001(\010\022\022\n\nbgoforward\030\003 "
    "\001(\010\"7\n\020CMsgOpenSteamURL\022\026\n\016browser_handl"
    "e\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\"X\n\rCMsgSetCookie\022\013\n"
    "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022"
    "\014\n\004host\030\004 \001(\t\022\017\n\007expires\030\005 \001(\r\"2\n\026CMsgSe"
    "tTargetFrameRate\022\030\n\020nTargetFrameRate\030\001 \001"
    "(\r\")\n\017CMsgFullRepaint\022\026\n\016browser_handle\030"
    "\001 \001(\r\"/\n\025CMsgRequestFullScreen\022\026\n\016browse"
    "r_handle\030\001 \001(\r\"G\n\035CMsgRequestFullScreenR"
    "esponse\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006ballo"
    "w\030\002 \001(\010\",\n\022CMsgExitFullScreen\022\026\n\016browser"
    "_handle\030\001 \001(\r\";\n\024CMsgGetCookiesForURL\022\026\n"
    "\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\"D\n\007CC"
    "ookie\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\016\n\006do"
    "main\030\003 \001(\t\022\014\n\004path\030\004 \001(\t\"^\n\034CMsgGetCooki"
    "esForURLResponse\022\026\n\016browser_handle\030\001 \001(\r"
    "\022\013\n\003url\030\002 \001(\t\022\031\n\007cookies\030\003 \003(\0132\010.CCookie"
    "\"\252\001\n\020CMsgNodeHasFocus\022\026\n\016browser_handle\030"
    "\001 \001(\r\022\016\n\006bInput\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\026\n\016e"
    "lementtagname\030\004 \001(\t\022\030\n\020searchbuttontext\030"
    "\005 \001(\t\022\032\n\022bHasMultipleInputs\030\006 \001(\010\022\022\n\ninp"
    "ut_type\030\007 \001(\t\"_\n\030CMsgZoomToFocusedElemen"
    "t\022\026\n\016browser_handle\030\001 \001(\r\022\025\n\nleftoffset\030"
    "\002 \001(\r:\0010\022\024\n\ttopoffset\030\003 \001(\r:\0010\"8\n\036CMsgCl"
    "oseFullScreenFlashIfOpen\022\026\n\016browser_hand"
    "le\030\001 \001(\r\"=\n#CMsgPauseFullScreenFlashMovi"
    "eIfOpen\022\026\n\016browser_handle\030\001 \001(\r\"-\n\023CMsgF"
    "ocusedNodeText\022\026\n\016browser_handle\030\001 \001(\r\"D"
    "\n\033CMsgFocusedNodeTextResponse\022\026\n\016browser"
    "_handle\030\001 \001(\r\022\r\n\005value\030\002 \001(\tB\005H\001\200\001\000", 7235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "htmlmessages.proto", &protobuf_RegisterTypes);
  CMsgKeyUp::default_instance_ = new CMsgKeyUp();
  CMsgKeyDown::default_instance_ = new CMsgKeyDown();
  CMsgKeyChar::default_instance_ = new CMsgKeyChar();
  CMsgMouseDown::default_instance_ = new CMsgMouseDown();
  CMsgMouseUp::default_instance_ = new CMsgMouseUp();
  CMsgMouseDblClick::default_instance_ = new CMsgMouseDblClick();
  CMsgMouseWheel::default_instance_ = new CMsgMouseWheel();
  CMsgMouseMove::default_instance_ = new CMsgMouseMove();
  CMsgMouseLeave::default_instance_ = new CMsgMouseLeave();
  CMsgBrowserCreate::default_instance_ = new CMsgBrowserCreate();
  CMsgBrowserCreateResponse::default_instance_ = new CMsgBrowserCreateResponse();
  CMsgBrowserRemove::default_instance_ = new CMsgBrowserRemove();
  CMsgBrowserErrorStrings::default_instance_ = new CMsgBrowserErrorStrings();
  CMsgBrowserSize::default_instance_ = new CMsgBrowserSize();
  CMsgBrowserPosition::default_instance_ = new CMsgBrowserPosition();
  CMsgPostURL::default_instance_ = new CMsgPostURL();
  CMsgAddHeader::default_instance_ = new CMsgAddHeader();
  CMsgStopLoad::default_instance_ = new CMsgStopLoad();
  CMsgReload::default_instance_ = new CMsgReload();
  CMsgGoForward::default_instance_ = new CMsgGoForward();
  CMsgGoBack::default_instance_ = new CMsgGoBack();
  CMsgCopy::default_instance_ = new CMsgCopy();
  CMsgPaste::default_instance_ = new CMsgPaste();
  CMsgExecuteJavaScript::default_instance_ = new CMsgExecuteJavaScript();
  CMsgSetFocus::default_instance_ = new CMsgSetFocus();
  CMsgHorizontalScrollBarSize::default_instance_ = new CMsgHorizontalScrollBarSize();
  CMsgHorizontalScrollBarSizeResponse::default_instance_ = new CMsgHorizontalScrollBarSizeResponse();
  CMsgVerticalScrollBarSize::default_instance_ = new CMsgVerticalScrollBarSize();
  CMsgVerticalScrollBarSizeResponse::default_instance_ = new CMsgVerticalScrollBarSizeResponse();
  CMsgFind::default_instance_ = new CMsgFind();
  CMsgStopFind::default_instance_ = new CMsgStopFind();
  CMsgSetHorizontalScroll::default_instance_ = new CMsgSetHorizontalScroll();
  CMsgSetVerticalScroll::default_instance_ = new CMsgSetVerticalScroll();
  CMsgSetZoomLevel::default_instance_ = new CMsgSetZoomLevel();
  CMsgViewSource::default_instance_ = new CMsgViewSource();
  CMsgBrowserReady::default_instance_ = new CMsgBrowserReady();
  CMsgURLChanged::default_instance_ = new CMsgURLChanged();
  CHTMLHeader::default_instance_ = new CHTMLHeader();
  CHTMLPageSecurityInfo::default_instance_ = new CHTMLPageSecurityInfo();
  CMsgFinishedRequest::default_instance_ = new CMsgFinishedRequest();
  CMsgStartRequest::default_instance_ = new CMsgStartRequest();
  CMsgStartRequestResponse::default_instance_ = new CMsgStartRequestResponse();
  CMsgShowPopup::default_instance_ = new CMsgShowPopup();
  CMsgHidePopup::default_instance_ = new CMsgHidePopup();
  CMsgSizePopup::default_instance_ = new CMsgSizePopup();
  CMsgOpenNewTab::default_instance_ = new CMsgOpenNewTab();
  CMsgOpenNewTabResponse::default_instance_ = new CMsgOpenNewTabResponse();
  CMsgPopupHTMLWindow::default_instance_ = new CMsgPopupHTMLWindow();
  CMsgPopupHTMLWindowResponse::default_instance_ = new CMsgPopupHTMLWindowResponse();
  CMsgSetHTMLTitle::default_instance_ = new CMsgSetHTMLTitle();
  CMsgLoadingResource::default_instance_ = new CMsgLoadingResource();
  CMsgStatusText::default_instance_ = new CMsgStatusText();
  CMsgSetCursor::default_instance_ = new CMsgSetCursor();
  CMsgFileLoadDialog::default_instance_ = new CMsgFileLoadDialog();
  CMsgFileLoadDialogResponse::default_instance_ = new CMsgFileLoadDialogResponse();
  CMsgShowToolTip::default_instance_ = new CMsgShowToolTip();
  CMsgUpdateToolTip::default_instance_ = new CMsgUpdateToolTip();
  CMsgHideToolTip::default_instance_ = new CMsgHideToolTip();
  CMsgSearchResults::default_instance_ = new CMsgSearchResults();
  CMsgClose::default_instance_ = new CMsgClose();
  CMsgNeedsPaint::default_instance_ = new CMsgNeedsPaint();
  CMsgNeedsPaintResponse::default_instance_ = new CMsgNeedsPaintResponse();
  CMsgGetZoom::default_instance_ = new CMsgGetZoom();
  CMsgGetZoomResponse::default_instance_ = new CMsgGetZoomResponse();
  CMsgLinkAtPosition::default_instance_ = new CMsgLinkAtPosition();
  CMsgLinkAtPositionResponse::default_instance_ = new CMsgLinkAtPositionResponse();
  CMsgZoomToElementAtPosition::default_instance_ = new CMsgZoomToElementAtPosition();
  CMsgZoomToElementAtPositionResponse::default_instance_ = new CMsgZoomToElementAtPositionResponse();
  CMsgScalePageToValue::default_instance_ = new CMsgScalePageToValue();
  CMsgScalePageToValueResponse::default_instance_ = new CMsgScalePageToValueResponse();
  CMsgSavePageToJPEG::default_instance_ = new CMsgSavePageToJPEG();
  CMsgSavePageToJPEGResponse::default_instance_ = new CMsgSavePageToJPEGResponse();
  CMsgJSAlert::default_instance_ = new CMsgJSAlert();
  CMsgJSConfirm::default_instance_ = new CMsgJSConfirm();
  CMsgJSDialogResponse::default_instance_ = new CMsgJSDialogResponse();
  CMsgCanGoBackAndForward::default_instance_ = new CMsgCanGoBackAndForward();
  CMsgOpenSteamURL::default_instance_ = new CMsgOpenSteamURL();
  CMsgSetCookie::default_instance_ = new CMsgSetCookie();
  CMsgSetTargetFrameRate::default_instance_ = new CMsgSetTargetFrameRate();
  CMsgFullRepaint::default_instance_ = new CMsgFullRepaint();
  CMsgRequestFullScreen::default_instance_ = new CMsgRequestFullScreen();
  CMsgRequestFullScreenResponse::default_instance_ = new CMsgRequestFullScreenResponse();
  CMsgExitFullScreen::default_instance_ = new CMsgExitFullScreen();
  CMsgGetCookiesForURL::default_instance_ = new CMsgGetCookiesForURL();
  CCookie::default_instance_ = new CCookie();
  CMsgGetCookiesForURLResponse::default_instance_ = new CMsgGetCookiesForURLResponse();
  CMsgNodeHasFocus::default_instance_ = new CMsgNodeHasFocus();
  CMsgZoomToFocusedElement::default_instance_ = new CMsgZoomToFocusedElement();
  CMsgCloseFullScreenFlashIfOpen::default_instance_ = new CMsgCloseFullScreenFlashIfOpen();
  CMsgPauseFullScreenFlashMovieIfOpen::default_instance_ = new CMsgPauseFullScreenFlashMovieIfOpen();
  CMsgFocusedNodeText::default_instance_ = new CMsgFocusedNodeText();
  CMsgFocusedNodeTextResponse::default_instance_ = new CMsgFocusedNodeTextResponse();
  CMsgKeyUp::default_instance_->InitAsDefaultInstance();
  CMsgKeyDown::default_instance_->InitAsDefaultInstance();
  CMsgKeyChar::default_instance_->InitAsDefaultInstance();
  CMsgMouseDown::default_instance_->InitAsDefaultInstance();
  CMsgMouseUp::default_instance_->InitAsDefaultInstance();
  CMsgMouseDblClick::default_instance_->InitAsDefaultInstance();
  CMsgMouseWheel::default_instance_->InitAsDefaultInstance();
  CMsgMouseMove::default_instance_->InitAsDefaultInstance();
  CMsgMouseLeave::default_instance_->InitAsDefaultInstance();
  CMsgBrowserCreate::default_instance_->InitAsDefaultInstance();
  CMsgBrowserCreateResponse::default_instance_->InitAsDefaultInstance();
  CMsgBrowserRemove::default_instance_->InitAsDefaultInstance();
  CMsgBrowserErrorStrings::default_instance_->InitAsDefaultInstance();
  CMsgBrowserSize::default_instance_->InitAsDefaultInstance();
  CMsgBrowserPosition::default_instance_->InitAsDefaultInstance();
  CMsgPostURL::default_instance_->InitAsDefaultInstance();
  CMsgAddHeader::default_instance_->InitAsDefaultInstance();
  CMsgStopLoad::default_instance_->InitAsDefaultInstance();
  CMsgReload::default_instance_->InitAsDefaultInstance();
  CMsgGoForward::default_instance_->InitAsDefaultInstance();
  CMsgGoBack::default_instance_->InitAsDefaultInstance();
  CMsgCopy::default_instance_->InitAsDefaultInstance();
  CMsgPaste::default_instance_->InitAsDefaultInstance();
  CMsgExecuteJavaScript::default_instance_->InitAsDefaultInstance();
  CMsgSetFocus::default_instance_->InitAsDefaultInstance();
  CMsgHorizontalScrollBarSize::default_instance_->InitAsDefaultInstance();
  CMsgHorizontalScrollBarSizeResponse::default_instance_->InitAsDefaultInstance();
  CMsgVerticalScrollBarSize::default_instance_->InitAsDefaultInstance();
  CMsgVerticalScrollBarSizeResponse::default_instance_->InitAsDefaultInstance();
  CMsgFind::default_instance_->InitAsDefaultInstance();
  CMsgStopFind::default_instance_->InitAsDefaultInstance();
  CMsgSetHorizontalScroll::default_instance_->InitAsDefaultInstance();
  CMsgSetVerticalScroll::default_instance_->InitAsDefaultInstance();
  CMsgSetZoomLevel::default_instance_->InitAsDefaultInstance();
  CMsgViewSource::default_instance_->InitAsDefaultInstance();
  CMsgBrowserReady::default_instance_->InitAsDefaultInstance();
  CMsgURLChanged::default_instance_->InitAsDefaultInstance();
  CHTMLHeader::default_instance_->InitAsDefaultInstance();
  CHTMLPageSecurityInfo::default_instance_->InitAsDefaultInstance();
  CMsgFinishedRequest::default_instance_->InitAsDefaultInstance();
  CMsgStartRequest::default_instance_->InitAsDefaultInstance();
  CMsgStartRequestResponse::default_instance_->InitAsDefaultInstance();
  CMsgShowPopup::default_instance_->InitAsDefaultInstance();
  CMsgHidePopup::default_instance_->InitAsDefaultInstance();
  CMsgSizePopup::default_instance_->InitAsDefaultInstance();
  CMsgOpenNewTab::default_instance_->InitAsDefaultInstance();
  CMsgOpenNewTabResponse::default_instance_->InitAsDefaultInstance();
  CMsgPopupHTMLWindow::default_instance_->InitAsDefaultInstance();
  CMsgPopupHTMLWindowResponse::default_instance_->InitAsDefaultInstance();
  CMsgSetHTMLTitle::default_instance_->InitAsDefaultInstance();
  CMsgLoadingResource::default_instance_->InitAsDefaultInstance();
  CMsgStatusText::default_instance_->InitAsDefaultInstance();
  CMsgSetCursor::default_instance_->InitAsDefaultInstance();
  CMsgFileLoadDialog::default_instance_->InitAsDefaultInstance();
  CMsgFileLoadDialogResponse::default_instance_->InitAsDefaultInstance();
  CMsgShowToolTip::default_instance_->InitAsDefaultInstance();
  CMsgUpdateToolTip::default_instance_->InitAsDefaultInstance();
  CMsgHideToolTip::default_instance_->InitAsDefaultInstance();
  CMsgSearchResults::default_instance_->InitAsDefaultInstance();
  CMsgClose::default_instance_->InitAsDefaultInstance();
  CMsgNeedsPaint::default_instance_->InitAsDefaultInstance();
  CMsgNeedsPaintResponse::default_instance_->InitAsDefaultInstance();
  CMsgGetZoom::default_instance_->InitAsDefaultInstance();
  CMsgGetZoomResponse::default_instance_->InitAsDefaultInstance();
  CMsgLinkAtPosition::default_instance_->InitAsDefaultInstance();
  CMsgLinkAtPositionResponse::default_instance_->InitAsDefaultInstance();
  CMsgZoomToElementAtPosition::default_instance_->InitAsDefaultInstance();
  CMsgZoomToElementAtPositionResponse::default_instance_->InitAsDefaultInstance();
  CMsgScalePageToValue::default_instance_->InitAsDefaultInstance();
  CMsgScalePageToValueResponse::default_instance_->InitAsDefaultInstance();
  CMsgSavePageToJPEG::default_instance_->InitAsDefaultInstance();
  CMsgSavePageToJPEGResponse::default_instance_->InitAsDefaultInstance();
  CMsgJSAlert::default_instance_->InitAsDefaultInstance();
  CMsgJSConfirm::default_instance_->InitAsDefaultInstance();
  CMsgJSDialogResponse::default_instance_->InitAsDefaultInstance();
  CMsgCanGoBackAndForward::default_instance_->InitAsDefaultInstance();
  CMsgOpenSteamURL::default_instance_->InitAsDefaultInstance();
  CMsgSetCookie::default_instance_->InitAsDefaultInstance();
  CMsgSetTargetFrameRate::default_instance_->InitAsDefaultInstance();
  CMsgFullRepaint::default_instance_->InitAsDefaultInstance();
  CMsgRequestFullScreen::default_instance_->InitAsDefaultInstance();
  CMsgRequestFullScreenResponse::default_instance_->InitAsDefaultInstance();
  CMsgExitFullScreen::default_instance_->InitAsDefaultInstance();
  CMsgGetCookiesForURL::default_instance_->InitAsDefaultInstance();
  CCookie::default_instance_->InitAsDefaultInstance();
  CMsgGetCookiesForURLResponse::default_instance_->InitAsDefaultInstance();
  CMsgNodeHasFocus::default_instance_->InitAsDefaultInstance();
  CMsgZoomToFocusedElement::default_instance_->InitAsDefaultInstance();
  CMsgCloseFullScreenFlashIfOpen::default_instance_->InitAsDefaultInstance();
  CMsgPauseFullScreenFlashMovieIfOpen::default_instance_->InitAsDefaultInstance();
  CMsgFocusedNodeText::default_instance_->InitAsDefaultInstance();
  CMsgFocusedNodeTextResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_htmlmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_htmlmessages_2eproto {
  StaticDescriptorInitializer_htmlmessages_2eproto() {
    protobuf_AddDesc_htmlmessages_2eproto();
  }
} static_descriptor_initializer_htmlmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMsgKeyUp::kBrowserHandleFieldNumber;
const int CMsgKeyUp::kKeyCodeFieldNumber;
const int CMsgKeyUp::kModifiersFieldNumber;
#endif  // !_MSC_VER

CMsgKeyUp::CMsgKeyUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKeyUp::InitAsDefaultInstance() {
}

CMsgKeyUp::CMsgKeyUp(const CMsgKeyUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKeyUp::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  keycode_ = 0u;
  modifiers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKeyUp::~CMsgKeyUp() {
  SharedDtor();
}

void CMsgKeyUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKeyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKeyUp_descriptor_;
}

const CMsgKeyUp& CMsgKeyUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgKeyUp* CMsgKeyUp::default_instance_ = NULL;

CMsgKeyUp* CMsgKeyUp::New() const {
  return new CMsgKeyUp;
}

void CMsgKeyUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    keycode_ = 0u;
    modifiers_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKeyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_keyCode;
        break;
      }
      
      // optional uint32 keyCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modifiers;
        break;
      }
      
      // optional uint32 modifiers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKeyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 keyCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keycode(), output);
  }
  
  // optional uint32 modifiers = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKeyUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 keyCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keycode(), target);
  }
  
  // optional uint32 modifiers = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKeyUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 keyCode = 2;
    if (has_keycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycode());
    }
    
    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKeyUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKeyUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKeyUp::MergeFrom(const CMsgKeyUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_keycode(from.keycode());
    }
    if (from._has_bit(2)) {
      set_modifiers(from.modifiers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKeyUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyUp::CopyFrom(const CMsgKeyUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyUp::IsInitialized() const {
  
  return true;
}

void CMsgKeyUp::Swap(CMsgKeyUp* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(keycode_, other->keycode_);
    std::swap(modifiers_, other->modifiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKeyUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKeyUp_descriptor_;
  metadata.reflection = CMsgKeyUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgKeyDown::kBrowserHandleFieldNumber;
const int CMsgKeyDown::kKeyCodeFieldNumber;
const int CMsgKeyDown::kModifiersFieldNumber;
#endif  // !_MSC_VER

CMsgKeyDown::CMsgKeyDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKeyDown::InitAsDefaultInstance() {
}

CMsgKeyDown::CMsgKeyDown(const CMsgKeyDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKeyDown::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  keycode_ = 0u;
  modifiers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKeyDown::~CMsgKeyDown() {
  SharedDtor();
}

void CMsgKeyDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKeyDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKeyDown_descriptor_;
}

const CMsgKeyDown& CMsgKeyDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgKeyDown* CMsgKeyDown::default_instance_ = NULL;

CMsgKeyDown* CMsgKeyDown::New() const {
  return new CMsgKeyDown;
}

void CMsgKeyDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    keycode_ = 0u;
    modifiers_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKeyDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_keyCode;
        break;
      }
      
      // optional uint32 keyCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modifiers;
        break;
      }
      
      // optional uint32 modifiers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKeyDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 keyCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keycode(), output);
  }
  
  // optional uint32 modifiers = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKeyDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 keyCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keycode(), target);
  }
  
  // optional uint32 modifiers = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKeyDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 keyCode = 2;
    if (has_keycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycode());
    }
    
    // optional uint32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKeyDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKeyDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKeyDown::MergeFrom(const CMsgKeyDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_keycode(from.keycode());
    }
    if (from._has_bit(2)) {
      set_modifiers(from.modifiers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKeyDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyDown::CopyFrom(const CMsgKeyDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyDown::IsInitialized() const {
  
  return true;
}

void CMsgKeyDown::Swap(CMsgKeyDown* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(keycode_, other->keycode_);
    std::swap(modifiers_, other->modifiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKeyDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKeyDown_descriptor_;
  metadata.reflection = CMsgKeyDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgKeyChar::kBrowserHandleFieldNumber;
const int CMsgKeyChar::kUnicharFieldNumber;
#endif  // !_MSC_VER

CMsgKeyChar::CMsgKeyChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKeyChar::InitAsDefaultInstance() {
}

CMsgKeyChar::CMsgKeyChar(const CMsgKeyChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKeyChar::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  unichar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKeyChar::~CMsgKeyChar() {
  SharedDtor();
}

void CMsgKeyChar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKeyChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKeyChar_descriptor_;
}

const CMsgKeyChar& CMsgKeyChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgKeyChar* CMsgKeyChar::default_instance_ = NULL;

CMsgKeyChar* CMsgKeyChar::New() const {
  return new CMsgKeyChar;
}

void CMsgKeyChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    unichar_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKeyChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unichar;
        break;
      }
      
      // optional uint32 unichar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unichar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unichar_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKeyChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 unichar = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unichar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKeyChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 unichar = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unichar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKeyChar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 unichar = 2;
    if (has_unichar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unichar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKeyChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKeyChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKeyChar::MergeFrom(const CMsgKeyChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_unichar(from.unichar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKeyChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyChar::CopyFrom(const CMsgKeyChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyChar::IsInitialized() const {
  
  return true;
}

void CMsgKeyChar::Swap(CMsgKeyChar* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(unichar_, other->unichar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKeyChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKeyChar_descriptor_;
  metadata.reflection = CMsgKeyChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMouseDown::kBrowserHandleFieldNumber;
const int CMsgMouseDown::kMouseButtonFieldNumber;
#endif  // !_MSC_VER

CMsgMouseDown::CMsgMouseDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMouseDown::InitAsDefaultInstance() {
}

CMsgMouseDown::CMsgMouseDown(const CMsgMouseDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMouseDown::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  mouse_button_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMouseDown::~CMsgMouseDown() {
  SharedDtor();
}

void CMsgMouseDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMouseDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMouseDown_descriptor_;
}

const CMsgMouseDown& CMsgMouseDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgMouseDown* CMsgMouseDown::default_instance_ = NULL;

CMsgMouseDown* CMsgMouseDown::New() const {
  return new CMsgMouseDown;
}

void CMsgMouseDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    mouse_button_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMouseDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mouse_button;
        break;
      }
      
      // optional uint32 mouse_button = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouse_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMouseDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 mouse_button = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMouseDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 mouse_button = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMouseDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 mouse_button = 2;
    if (has_mouse_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMouseDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMouseDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMouseDown::MergeFrom(const CMsgMouseDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_mouse_button(from.mouse_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMouseDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDown::CopyFrom(const CMsgMouseDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDown::IsInitialized() const {
  
  return true;
}

void CMsgMouseDown::Swap(CMsgMouseDown* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(mouse_button_, other->mouse_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMouseDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMouseDown_descriptor_;
  metadata.reflection = CMsgMouseDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMouseUp::kBrowserHandleFieldNumber;
const int CMsgMouseUp::kMouseButtonFieldNumber;
#endif  // !_MSC_VER

CMsgMouseUp::CMsgMouseUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMouseUp::InitAsDefaultInstance() {
}

CMsgMouseUp::CMsgMouseUp(const CMsgMouseUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMouseUp::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  mouse_button_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMouseUp::~CMsgMouseUp() {
  SharedDtor();
}

void CMsgMouseUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMouseUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMouseUp_descriptor_;
}

const CMsgMouseUp& CMsgMouseUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgMouseUp* CMsgMouseUp::default_instance_ = NULL;

CMsgMouseUp* CMsgMouseUp::New() const {
  return new CMsgMouseUp;
}

void CMsgMouseUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    mouse_button_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMouseUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mouse_button;
        break;
      }
      
      // optional uint32 mouse_button = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouse_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMouseUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 mouse_button = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMouseUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 mouse_button = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMouseUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 mouse_button = 2;
    if (has_mouse_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMouseUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMouseUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMouseUp::MergeFrom(const CMsgMouseUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_mouse_button(from.mouse_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMouseUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseUp::CopyFrom(const CMsgMouseUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseUp::IsInitialized() const {
  
  return true;
}

void CMsgMouseUp::Swap(CMsgMouseUp* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(mouse_button_, other->mouse_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMouseUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMouseUp_descriptor_;
  metadata.reflection = CMsgMouseUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMouseDblClick::kBrowserHandleFieldNumber;
const int CMsgMouseDblClick::kMouseButtonFieldNumber;
#endif  // !_MSC_VER

CMsgMouseDblClick::CMsgMouseDblClick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMouseDblClick::InitAsDefaultInstance() {
}

CMsgMouseDblClick::CMsgMouseDblClick(const CMsgMouseDblClick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMouseDblClick::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  mouse_button_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMouseDblClick::~CMsgMouseDblClick() {
  SharedDtor();
}

void CMsgMouseDblClick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMouseDblClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseDblClick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMouseDblClick_descriptor_;
}

const CMsgMouseDblClick& CMsgMouseDblClick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgMouseDblClick* CMsgMouseDblClick::default_instance_ = NULL;

CMsgMouseDblClick* CMsgMouseDblClick::New() const {
  return new CMsgMouseDblClick;
}

void CMsgMouseDblClick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    mouse_button_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMouseDblClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mouse_button;
        break;
      }
      
      // optional uint32 mouse_button = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouse_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMouseDblClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 mouse_button = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMouseDblClick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 mouse_button = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMouseDblClick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 mouse_button = 2;
    if (has_mouse_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseDblClick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMouseDblClick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMouseDblClick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMouseDblClick::MergeFrom(const CMsgMouseDblClick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_mouse_button(from.mouse_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMouseDblClick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDblClick::CopyFrom(const CMsgMouseDblClick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDblClick::IsInitialized() const {
  
  return true;
}

void CMsgMouseDblClick::Swap(CMsgMouseDblClick* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(mouse_button_, other->mouse_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMouseDblClick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMouseDblClick_descriptor_;
  metadata.reflection = CMsgMouseDblClick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMouseWheel::kBrowserHandleFieldNumber;
const int CMsgMouseWheel::kDeltaFieldNumber;
#endif  // !_MSC_VER

CMsgMouseWheel::CMsgMouseWheel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMouseWheel::InitAsDefaultInstance() {
}

CMsgMouseWheel::CMsgMouseWheel(const CMsgMouseWheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMouseWheel::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMouseWheel::~CMsgMouseWheel() {
  SharedDtor();
}

void CMsgMouseWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMouseWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMouseWheel_descriptor_;
}

const CMsgMouseWheel& CMsgMouseWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgMouseWheel* CMsgMouseWheel::default_instance_ = NULL;

CMsgMouseWheel* CMsgMouseWheel::New() const {
  return new CMsgMouseWheel;
}

void CMsgMouseWheel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMouseWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }
      
      // optional int32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMouseWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional int32 delta = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMouseWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional int32 delta = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMouseWheel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseWheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMouseWheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMouseWheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMouseWheel::MergeFrom(const CMsgMouseWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMouseWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseWheel::CopyFrom(const CMsgMouseWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseWheel::IsInitialized() const {
  
  return true;
}

void CMsgMouseWheel::Swap(CMsgMouseWheel* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMouseWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMouseWheel_descriptor_;
  metadata.reflection = CMsgMouseWheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMouseMove::kBrowserHandleFieldNumber;
const int CMsgMouseMove::kXFieldNumber;
const int CMsgMouseMove::kYFieldNumber;
#endif  // !_MSC_VER

CMsgMouseMove::CMsgMouseMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMouseMove::InitAsDefaultInstance() {
}

CMsgMouseMove::CMsgMouseMove(const CMsgMouseMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMouseMove::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMouseMove::~CMsgMouseMove() {
  SharedDtor();
}

void CMsgMouseMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMouseMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMouseMove_descriptor_;
}

const CMsgMouseMove& CMsgMouseMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgMouseMove* CMsgMouseMove::default_instance_ = NULL;

CMsgMouseMove* CMsgMouseMove::New() const {
  return new CMsgMouseMove;
}

void CMsgMouseMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMouseMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMouseMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional int32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMouseMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional int32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMouseMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMouseMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMouseMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMouseMove::MergeFrom(const CMsgMouseMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMouseMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseMove::CopyFrom(const CMsgMouseMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseMove::IsInitialized() const {
  
  return true;
}

void CMsgMouseMove::Swap(CMsgMouseMove* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMouseMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMouseMove_descriptor_;
  metadata.reflection = CMsgMouseMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMouseLeave::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgMouseLeave::CMsgMouseLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMouseLeave::InitAsDefaultInstance() {
}

CMsgMouseLeave::CMsgMouseLeave(const CMsgMouseLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMouseLeave::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMouseLeave::~CMsgMouseLeave() {
  SharedDtor();
}

void CMsgMouseLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMouseLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMouseLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMouseLeave_descriptor_;
}

const CMsgMouseLeave& CMsgMouseLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgMouseLeave* CMsgMouseLeave::default_instance_ = NULL;

CMsgMouseLeave* CMsgMouseLeave::New() const {
  return new CMsgMouseLeave;
}

void CMsgMouseLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMouseLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMouseLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMouseLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMouseLeave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMouseLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMouseLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMouseLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMouseLeave::MergeFrom(const CMsgMouseLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMouseLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseLeave::CopyFrom(const CMsgMouseLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseLeave::IsInitialized() const {
  
  return true;
}

void CMsgMouseLeave::Swap(CMsgMouseLeave* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMouseLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMouseLeave_descriptor_;
  metadata.reflection = CMsgMouseLeave_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgBrowserCreate::_default_useragent_;
#ifndef _MSC_VER
const int CMsgBrowserCreate::kRequestIdFieldNumber;
const int CMsgBrowserCreate::kPopupFieldNumber;
const int CMsgBrowserCreate::kUseragentFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserCreate::CMsgBrowserCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserCreate::InitAsDefaultInstance() {
}

CMsgBrowserCreate::CMsgBrowserCreate(const CMsgBrowserCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserCreate::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  popup_ = false;
  useragent_ = const_cast< ::std::string*>(&_default_useragent_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserCreate::~CMsgBrowserCreate() {
  SharedDtor();
}

void CMsgBrowserCreate::SharedDtor() {
  if (useragent_ != &_default_useragent_) {
    delete useragent_;
  }
  if (this != default_instance_) {
  }
}

void CMsgBrowserCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserCreate_descriptor_;
}

const CMsgBrowserCreate& CMsgBrowserCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserCreate* CMsgBrowserCreate::default_instance_ = NULL;

CMsgBrowserCreate* CMsgBrowserCreate::New() const {
  return new CMsgBrowserCreate;
}

void CMsgBrowserCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    popup_ = false;
    if (_has_bit(2)) {
      if (useragent_ != &_default_useragent_) {
        useragent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_popup;
        break;
      }
      
      // optional bool popup = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &popup_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_useragent;
        break;
      }
      
      // optional string useragent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useragent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useragent().data(), this->useragent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }
  
  // optional bool popup = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->popup(), output);
  }
  
  // optional string useragent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useragent().data(), this->useragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->useragent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 request_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }
  
  // optional bool popup = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->popup(), target);
  }
  
  // optional string useragent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useragent().data(), this->useragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useragent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }
    
    // optional bool popup = 2 [default = false];
    if (has_popup()) {
      total_size += 1 + 1;
    }
    
    // optional string useragent = 3;
    if (has_useragent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useragent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserCreate::MergeFrom(const CMsgBrowserCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_id(from.request_id());
    }
    if (from._has_bit(1)) {
      set_popup(from.popup());
    }
    if (from._has_bit(2)) {
      set_useragent(from.useragent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreate::CopyFrom(const CMsgBrowserCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreate::IsInitialized() const {
  
  return true;
}

void CMsgBrowserCreate::Swap(CMsgBrowserCreate* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(popup_, other->popup_);
    std::swap(useragent_, other->useragent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserCreate_descriptor_;
  metadata.reflection = CMsgBrowserCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBrowserCreateResponse::kBrowserHandleFieldNumber;
const int CMsgBrowserCreateResponse::kRequestIdFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserCreateResponse::CMsgBrowserCreateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserCreateResponse::InitAsDefaultInstance() {
}

CMsgBrowserCreateResponse::CMsgBrowserCreateResponse(const CMsgBrowserCreateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  request_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserCreateResponse::~CMsgBrowserCreateResponse() {
  SharedDtor();
}

void CMsgBrowserCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBrowserCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserCreateResponse_descriptor_;
}

const CMsgBrowserCreateResponse& CMsgBrowserCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserCreateResponse* CMsgBrowserCreateResponse::default_instance_ = NULL;

CMsgBrowserCreateResponse* CMsgBrowserCreateResponse::New() const {
  return new CMsgBrowserCreateResponse;
}

void CMsgBrowserCreateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    request_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_id;
        break;
      }
      
      // optional uint32 request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 request_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->request_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 request_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->request_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserCreateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserCreateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserCreateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserCreateResponse::MergeFrom(const CMsgBrowserCreateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreateResponse::CopyFrom(const CMsgBrowserCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreateResponse::IsInitialized() const {
  
  return true;
}

void CMsgBrowserCreateResponse::Swap(CMsgBrowserCreateResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(request_id_, other->request_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserCreateResponse_descriptor_;
  metadata.reflection = CMsgBrowserCreateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBrowserRemove::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserRemove::CMsgBrowserRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserRemove::InitAsDefaultInstance() {
}

CMsgBrowserRemove::CMsgBrowserRemove(const CMsgBrowserRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserRemove::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserRemove::~CMsgBrowserRemove() {
  SharedDtor();
}

void CMsgBrowserRemove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBrowserRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserRemove_descriptor_;
}

const CMsgBrowserRemove& CMsgBrowserRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserRemove* CMsgBrowserRemove::default_instance_ = NULL;

CMsgBrowserRemove* CMsgBrowserRemove::New() const {
  return new CMsgBrowserRemove;
}

void CMsgBrowserRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserRemove::MergeFrom(const CMsgBrowserRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserRemove::CopyFrom(const CMsgBrowserRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserRemove::IsInitialized() const {
  
  return true;
}

void CMsgBrowserRemove::Swap(CMsgBrowserRemove* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserRemove_descriptor_;
  metadata.reflection = CMsgBrowserRemove_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgBrowserErrorStrings::_default_title_;
const ::std::string CMsgBrowserErrorStrings::_default_header_;
const ::std::string CMsgBrowserErrorStrings::_default_cache_miss_;
const ::std::string CMsgBrowserErrorStrings::_default_bad_url_;
const ::std::string CMsgBrowserErrorStrings::_default_connection_problem_;
const ::std::string CMsgBrowserErrorStrings::_default_proxy_problem_;
const ::std::string CMsgBrowserErrorStrings::_default_unknown_;
#ifndef _MSC_VER
const int CMsgBrowserErrorStrings::kBrowserHandleFieldNumber;
const int CMsgBrowserErrorStrings::kTitleFieldNumber;
const int CMsgBrowserErrorStrings::kHeaderFieldNumber;
const int CMsgBrowserErrorStrings::kCacheMissFieldNumber;
const int CMsgBrowserErrorStrings::kBadUrlFieldNumber;
const int CMsgBrowserErrorStrings::kConnectionProblemFieldNumber;
const int CMsgBrowserErrorStrings::kProxyProblemFieldNumber;
const int CMsgBrowserErrorStrings::kUnknownFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserErrorStrings::CMsgBrowserErrorStrings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserErrorStrings::InitAsDefaultInstance() {
}

CMsgBrowserErrorStrings::CMsgBrowserErrorStrings(const CMsgBrowserErrorStrings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserErrorStrings::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  title_ = const_cast< ::std::string*>(&_default_title_);
  header_ = const_cast< ::std::string*>(&_default_header_);
  cache_miss_ = const_cast< ::std::string*>(&_default_cache_miss_);
  bad_url_ = const_cast< ::std::string*>(&_default_bad_url_);
  connection_problem_ = const_cast< ::std::string*>(&_default_connection_problem_);
  proxy_problem_ = const_cast< ::std::string*>(&_default_proxy_problem_);
  unknown_ = const_cast< ::std::string*>(&_default_unknown_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserErrorStrings::~CMsgBrowserErrorStrings() {
  SharedDtor();
}

void CMsgBrowserErrorStrings::SharedDtor() {
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (header_ != &_default_header_) {
    delete header_;
  }
  if (cache_miss_ != &_default_cache_miss_) {
    delete cache_miss_;
  }
  if (bad_url_ != &_default_bad_url_) {
    delete bad_url_;
  }
  if (connection_problem_ != &_default_connection_problem_) {
    delete connection_problem_;
  }
  if (proxy_problem_ != &_default_proxy_problem_) {
    delete proxy_problem_;
  }
  if (unknown_ != &_default_unknown_) {
    delete unknown_;
  }
  if (this != default_instance_) {
  }
}

void CMsgBrowserErrorStrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserErrorStrings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserErrorStrings_descriptor_;
}

const CMsgBrowserErrorStrings& CMsgBrowserErrorStrings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserErrorStrings* CMsgBrowserErrorStrings::default_instance_ = NULL;

CMsgBrowserErrorStrings* CMsgBrowserErrorStrings::New() const {
  return new CMsgBrowserErrorStrings;
}

void CMsgBrowserErrorStrings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    if (_has_bit(2)) {
      if (header_ != &_default_header_) {
        header_->clear();
      }
    }
    if (_has_bit(3)) {
      if (cache_miss_ != &_default_cache_miss_) {
        cache_miss_->clear();
      }
    }
    if (_has_bit(4)) {
      if (bad_url_ != &_default_bad_url_) {
        bad_url_->clear();
      }
    }
    if (_has_bit(5)) {
      if (connection_problem_ != &_default_connection_problem_) {
        connection_problem_->clear();
      }
    }
    if (_has_bit(6)) {
      if (proxy_problem_ != &_default_proxy_problem_) {
        proxy_problem_->clear();
      }
    }
    if (_has_bit(7)) {
      if (unknown_ != &_default_unknown_) {
        unknown_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserErrorStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_header;
        break;
      }
      
      // optional string header = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cache_miss;
        break;
      }
      
      // optional string cache_miss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_miss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_miss()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cache_miss().data(), this->cache_miss().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bad_url;
        break;
      }
      
      // optional string bad_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bad_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bad_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bad_url().data(), this->bad_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_connection_problem;
        break;
      }
      
      // optional string connection_problem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_problem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connection_problem().data(), this->connection_problem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_proxy_problem;
        break;
      }
      
      // optional string proxy_problem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy_problem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proxy_problem().data(), this->proxy_problem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_unknown;
        break;
      }
      
      // optional string unknown = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unknown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unknown().data(), this->unknown().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserErrorStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string title = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional string header = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->header(), output);
  }
  
  // optional string cache_miss = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cache_miss().data(), this->cache_miss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cache_miss(), output);
  }
  
  // optional string bad_url = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bad_url().data(), this->bad_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bad_url(), output);
  }
  
  // optional string connection_problem = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_problem().data(), this->connection_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->connection_problem(), output);
  }
  
  // optional string proxy_problem = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxy_problem().data(), this->proxy_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->proxy_problem(), output);
  }
  
  // optional string unknown = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unknown().data(), this->unknown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->unknown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserErrorStrings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string title = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional string header = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->header(), target);
  }
  
  // optional string cache_miss = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cache_miss().data(), this->cache_miss().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cache_miss(), target);
  }
  
  // optional string bad_url = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bad_url().data(), this->bad_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bad_url(), target);
  }
  
  // optional string connection_problem = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_problem().data(), this->connection_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->connection_problem(), target);
  }
  
  // optional string proxy_problem = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxy_problem().data(), this->proxy_problem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->proxy_problem(), target);
  }
  
  // optional string unknown = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unknown().data(), this->unknown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unknown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserErrorStrings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string header = 3;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }
    
    // optional string cache_miss = 4;
    if (has_cache_miss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_miss());
    }
    
    // optional string bad_url = 5;
    if (has_bad_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bad_url());
    }
    
    // optional string connection_problem = 6;
    if (has_connection_problem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_problem());
    }
    
    // optional string proxy_problem = 7;
    if (has_proxy_problem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_problem());
    }
    
    // optional string unknown = 8;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserErrorStrings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserErrorStrings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserErrorStrings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserErrorStrings::MergeFrom(const CMsgBrowserErrorStrings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_title(from.title());
    }
    if (from._has_bit(2)) {
      set_header(from.header());
    }
    if (from._has_bit(3)) {
      set_cache_miss(from.cache_miss());
    }
    if (from._has_bit(4)) {
      set_bad_url(from.bad_url());
    }
    if (from._has_bit(5)) {
      set_connection_problem(from.connection_problem());
    }
    if (from._has_bit(6)) {
      set_proxy_problem(from.proxy_problem());
    }
    if (from._has_bit(7)) {
      set_unknown(from.unknown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserErrorStrings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserErrorStrings::CopyFrom(const CMsgBrowserErrorStrings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserErrorStrings::IsInitialized() const {
  
  return true;
}

void CMsgBrowserErrorStrings::Swap(CMsgBrowserErrorStrings* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(title_, other->title_);
    std::swap(header_, other->header_);
    std::swap(cache_miss_, other->cache_miss_);
    std::swap(bad_url_, other->bad_url_);
    std::swap(connection_problem_, other->connection_problem_);
    std::swap(proxy_problem_, other->proxy_problem_);
    std::swap(unknown_, other->unknown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserErrorStrings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserErrorStrings_descriptor_;
  metadata.reflection = CMsgBrowserErrorStrings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBrowserSize::kBrowserHandleFieldNumber;
const int CMsgBrowserSize::kWidthFieldNumber;
const int CMsgBrowserSize::kHeightFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserSize::CMsgBrowserSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserSize::InitAsDefaultInstance() {
}

CMsgBrowserSize::CMsgBrowserSize(const CMsgBrowserSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserSize::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserSize::~CMsgBrowserSize() {
  SharedDtor();
}

void CMsgBrowserSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBrowserSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserSize_descriptor_;
}

const CMsgBrowserSize& CMsgBrowserSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserSize* CMsgBrowserSize::default_instance_ = NULL;

CMsgBrowserSize* CMsgBrowserSize::New() const {
  return new CMsgBrowserSize;
}

void CMsgBrowserSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional uint32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // optional uint32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 width = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }
  
  // optional uint32 height = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 width = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }
  
  // optional uint32 height = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }
    
    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserSize::MergeFrom(const CMsgBrowserSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_width(from.width());
    }
    if (from._has_bit(2)) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSize::CopyFrom(const CMsgBrowserSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSize::IsInitialized() const {
  
  return true;
}

void CMsgBrowserSize::Swap(CMsgBrowserSize* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserSize_descriptor_;
  metadata.reflection = CMsgBrowserSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBrowserPosition::kBrowserHandleFieldNumber;
const int CMsgBrowserPosition::kXFieldNumber;
const int CMsgBrowserPosition::kYFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserPosition::CMsgBrowserPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserPosition::InitAsDefaultInstance() {
}

CMsgBrowserPosition::CMsgBrowserPosition(const CMsgBrowserPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserPosition::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserPosition::~CMsgBrowserPosition() {
  SharedDtor();
}

void CMsgBrowserPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBrowserPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserPosition_descriptor_;
}

const CMsgBrowserPosition& CMsgBrowserPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserPosition* CMsgBrowserPosition::default_instance_ = NULL;

CMsgBrowserPosition* CMsgBrowserPosition::New() const {
  return new CMsgBrowserPosition;
}

void CMsgBrowserPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserPosition::MergeFrom(const CMsgBrowserPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserPosition::CopyFrom(const CMsgBrowserPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserPosition::IsInitialized() const {
  
  return true;
}

void CMsgBrowserPosition::Swap(CMsgBrowserPosition* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserPosition_descriptor_;
  metadata.reflection = CMsgBrowserPosition_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgPostURL::_default_url_;
const ::std::string CMsgPostURL::_default_post_;
#ifndef _MSC_VER
const int CMsgPostURL::kBrowserHandleFieldNumber;
const int CMsgPostURL::kUrlFieldNumber;
const int CMsgPostURL::kPostFieldNumber;
const int CMsgPostURL::kPageserialFieldNumber;
#endif  // !_MSC_VER

CMsgPostURL::CMsgPostURL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPostURL::InitAsDefaultInstance() {
}

CMsgPostURL::CMsgPostURL(const CMsgPostURL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPostURL::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  post_ = const_cast< ::std::string*>(&_default_post_);
  pageserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPostURL::~CMsgPostURL() {
  SharedDtor();
}

void CMsgPostURL::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (post_ != &_default_post_) {
    delete post_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPostURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPostURL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPostURL_descriptor_;
}

const CMsgPostURL& CMsgPostURL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgPostURL* CMsgPostURL::default_instance_ = NULL;

CMsgPostURL* CMsgPostURL::New() const {
  return new CMsgPostURL;
}

void CMsgPostURL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (post_ != &_default_post_) {
        post_->clear();
      }
    }
    pageserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPostURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_post;
        break;
      }
      
      // optional string post = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pageserial;
        break;
      }
      
      // optional uint32 pageserial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPostURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string post = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->post(), output);
  }
  
  // optional uint32 pageserial = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pageserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPostURL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string post = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->post(), target);
  }
  
  // optional uint32 pageserial = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pageserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPostURL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }
    
    // optional uint32 pageserial = 4;
    if (has_pageserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPostURL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPostURL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPostURL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPostURL::MergeFrom(const CMsgPostURL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_post(from.post());
    }
    if (from._has_bit(3)) {
      set_pageserial(from.pageserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPostURL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPostURL::CopyFrom(const CMsgPostURL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPostURL::IsInitialized() const {
  
  return true;
}

void CMsgPostURL::Swap(CMsgPostURL* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(post_, other->post_);
    std::swap(pageserial_, other->pageserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPostURL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPostURL_descriptor_;
  metadata.reflection = CMsgPostURL_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgAddHeader::_default_key_;
const ::std::string CMsgAddHeader::_default_value_;
#ifndef _MSC_VER
const int CMsgAddHeader::kBrowserHandleFieldNumber;
const int CMsgAddHeader::kKeyFieldNumber;
const int CMsgAddHeader::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgAddHeader::CMsgAddHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAddHeader::InitAsDefaultInstance() {
}

CMsgAddHeader::CMsgAddHeader(const CMsgAddHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAddHeader::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAddHeader::~CMsgAddHeader() {
  SharedDtor();
}

void CMsgAddHeader::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAddHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAddHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAddHeader_descriptor_;
}

const CMsgAddHeader& CMsgAddHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgAddHeader* CMsgAddHeader::default_instance_ = NULL;

CMsgAddHeader* CMsgAddHeader::New() const {
  return new CMsgAddHeader;
}

void CMsgAddHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAddHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAddHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional string value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAddHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional string value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAddHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAddHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAddHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAddHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAddHeader::MergeFrom(const CMsgAddHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAddHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddHeader::CopyFrom(const CMsgAddHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddHeader::IsInitialized() const {
  
  return true;
}

void CMsgAddHeader::Swap(CMsgAddHeader* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAddHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAddHeader_descriptor_;
  metadata.reflection = CMsgAddHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStopLoad::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgStopLoad::CMsgStopLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStopLoad::InitAsDefaultInstance() {
}

CMsgStopLoad::CMsgStopLoad(const CMsgStopLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStopLoad::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStopLoad::~CMsgStopLoad() {
  SharedDtor();
}

void CMsgStopLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStopLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStopLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStopLoad_descriptor_;
}

const CMsgStopLoad& CMsgStopLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgStopLoad* CMsgStopLoad::default_instance_ = NULL;

CMsgStopLoad* CMsgStopLoad::New() const {
  return new CMsgStopLoad;
}

void CMsgStopLoad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStopLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStopLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStopLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStopLoad::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStopLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStopLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStopLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStopLoad::MergeFrom(const CMsgStopLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStopLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopLoad::CopyFrom(const CMsgStopLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopLoad::IsInitialized() const {
  
  return true;
}

void CMsgStopLoad::Swap(CMsgStopLoad* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStopLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStopLoad_descriptor_;
  metadata.reflection = CMsgStopLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReload::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgReload::CMsgReload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReload::InitAsDefaultInstance() {
}

CMsgReload::CMsgReload(const CMsgReload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReload::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReload::~CMsgReload() {
  SharedDtor();
}

void CMsgReload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgReload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReload_descriptor_;
}

const CMsgReload& CMsgReload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgReload* CMsgReload::default_instance_ = NULL;

CMsgReload* CMsgReload::New() const {
  return new CMsgReload;
}

void CMsgReload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReload::MergeFrom(const CMsgReload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReload::CopyFrom(const CMsgReload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReload::IsInitialized() const {
  
  return true;
}

void CMsgReload::Swap(CMsgReload* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReload_descriptor_;
  metadata.reflection = CMsgReload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGoForward::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgGoForward::CMsgGoForward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGoForward::InitAsDefaultInstance() {
}

CMsgGoForward::CMsgGoForward(const CMsgGoForward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGoForward::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGoForward::~CMsgGoForward() {
  SharedDtor();
}

void CMsgGoForward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGoForward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGoForward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGoForward_descriptor_;
}

const CMsgGoForward& CMsgGoForward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgGoForward* CMsgGoForward::default_instance_ = NULL;

CMsgGoForward* CMsgGoForward::New() const {
  return new CMsgGoForward;
}

void CMsgGoForward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGoForward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGoForward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGoForward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGoForward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGoForward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGoForward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGoForward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGoForward::MergeFrom(const CMsgGoForward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGoForward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoForward::CopyFrom(const CMsgGoForward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoForward::IsInitialized() const {
  
  return true;
}

void CMsgGoForward::Swap(CMsgGoForward* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGoForward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGoForward_descriptor_;
  metadata.reflection = CMsgGoForward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGoBack::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgGoBack::CMsgGoBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGoBack::InitAsDefaultInstance() {
}

CMsgGoBack::CMsgGoBack(const CMsgGoBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGoBack::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGoBack::~CMsgGoBack() {
  SharedDtor();
}

void CMsgGoBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGoBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGoBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGoBack_descriptor_;
}

const CMsgGoBack& CMsgGoBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgGoBack* CMsgGoBack::default_instance_ = NULL;

CMsgGoBack* CMsgGoBack::New() const {
  return new CMsgGoBack;
}

void CMsgGoBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGoBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGoBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGoBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGoBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGoBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGoBack::MergeFrom(const CMsgGoBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGoBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoBack::CopyFrom(const CMsgGoBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoBack::IsInitialized() const {
  
  return true;
}

void CMsgGoBack::Swap(CMsgGoBack* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGoBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGoBack_descriptor_;
  metadata.reflection = CMsgGoBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCopy::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgCopy::CMsgCopy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCopy::InitAsDefaultInstance() {
}

CMsgCopy::CMsgCopy(const CMsgCopy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCopy::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCopy::~CMsgCopy() {
  SharedDtor();
}

void CMsgCopy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCopy_descriptor_;
}

const CMsgCopy& CMsgCopy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgCopy* CMsgCopy::default_instance_ = NULL;

CMsgCopy* CMsgCopy::New() const {
  return new CMsgCopy;
}

void CMsgCopy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCopy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCopy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCopy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCopy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCopy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCopy::MergeFrom(const CMsgCopy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCopy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCopy::CopyFrom(const CMsgCopy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCopy::IsInitialized() const {
  
  return true;
}

void CMsgCopy::Swap(CMsgCopy* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCopy_descriptor_;
  metadata.reflection = CMsgCopy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaste::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgPaste::CMsgPaste()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPaste::InitAsDefaultInstance() {
}

CMsgPaste::CMsgPaste(const CMsgPaste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPaste::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaste::~CMsgPaste() {
  SharedDtor();
}

void CMsgPaste::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPaste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaste_descriptor_;
}

const CMsgPaste& CMsgPaste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgPaste* CMsgPaste::default_instance_ = NULL;

CMsgPaste* CMsgPaste::New() const {
  return new CMsgPaste;
}

void CMsgPaste::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPaste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPaste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPaste::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaste::MergeFrom(const CMsgPaste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaste::CopyFrom(const CMsgPaste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaste::IsInitialized() const {
  
  return true;
}

void CMsgPaste::Swap(CMsgPaste* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaste_descriptor_;
  metadata.reflection = CMsgPaste_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgExecuteJavaScript::_default_script_;
#ifndef _MSC_VER
const int CMsgExecuteJavaScript::kBrowserHandleFieldNumber;
const int CMsgExecuteJavaScript::kScriptFieldNumber;
#endif  // !_MSC_VER

CMsgExecuteJavaScript::CMsgExecuteJavaScript()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgExecuteJavaScript::InitAsDefaultInstance() {
}

CMsgExecuteJavaScript::CMsgExecuteJavaScript(const CMsgExecuteJavaScript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgExecuteJavaScript::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  script_ = const_cast< ::std::string*>(&_default_script_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgExecuteJavaScript::~CMsgExecuteJavaScript() {
  SharedDtor();
}

void CMsgExecuteJavaScript::SharedDtor() {
  if (script_ != &_default_script_) {
    delete script_;
  }
  if (this != default_instance_) {
  }
}

void CMsgExecuteJavaScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExecuteJavaScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExecuteJavaScript_descriptor_;
}

const CMsgExecuteJavaScript& CMsgExecuteJavaScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgExecuteJavaScript* CMsgExecuteJavaScript::default_instance_ = NULL;

CMsgExecuteJavaScript* CMsgExecuteJavaScript::New() const {
  return new CMsgExecuteJavaScript;
}

void CMsgExecuteJavaScript::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (script_ != &_default_script_) {
        script_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgExecuteJavaScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_script;
        break;
      }
      
      // optional string script = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgExecuteJavaScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string script = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->script(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgExecuteJavaScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string script = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgExecuteJavaScript::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string script = 2;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExecuteJavaScript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgExecuteJavaScript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgExecuteJavaScript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgExecuteJavaScript::MergeFrom(const CMsgExecuteJavaScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgExecuteJavaScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteJavaScript::CopyFrom(const CMsgExecuteJavaScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteJavaScript::IsInitialized() const {
  
  return true;
}

void CMsgExecuteJavaScript::Swap(CMsgExecuteJavaScript* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(script_, other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgExecuteJavaScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgExecuteJavaScript_descriptor_;
  metadata.reflection = CMsgExecuteJavaScript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetFocus::kBrowserHandleFieldNumber;
const int CMsgSetFocus::kFocusFieldNumber;
#endif  // !_MSC_VER

CMsgSetFocus::CMsgSetFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetFocus::InitAsDefaultInstance() {
}

CMsgSetFocus::CMsgSetFocus(const CMsgSetFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetFocus::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  focus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetFocus::~CMsgSetFocus() {
  SharedDtor();
}

void CMsgSetFocus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetFocus_descriptor_;
}

const CMsgSetFocus& CMsgSetFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetFocus* CMsgSetFocus::default_instance_ = NULL;

CMsgSetFocus* CMsgSetFocus::New() const {
  return new CMsgSetFocus;
}

void CMsgSetFocus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    focus_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_focus;
        break;
      }
      
      // optional bool focus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_focus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &focus_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool focus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->focus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool focus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->focus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetFocus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool focus = 2;
    if (has_focus()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetFocus::MergeFrom(const CMsgSetFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_focus(from.focus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetFocus::CopyFrom(const CMsgSetFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetFocus::IsInitialized() const {
  
  return true;
}

void CMsgSetFocus::Swap(CMsgSetFocus* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(focus_, other->focus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetFocus_descriptor_;
  metadata.reflection = CMsgSetFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHorizontalScrollBarSize::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHorizontalScrollBarSize::InitAsDefaultInstance() {
}

CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize(const CMsgHorizontalScrollBarSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSize::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHorizontalScrollBarSize::~CMsgHorizontalScrollBarSize() {
  SharedDtor();
}

void CMsgHorizontalScrollBarSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHorizontalScrollBarSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHorizontalScrollBarSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHorizontalScrollBarSize_descriptor_;
}

const CMsgHorizontalScrollBarSize& CMsgHorizontalScrollBarSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgHorizontalScrollBarSize* CMsgHorizontalScrollBarSize::default_instance_ = NULL;

CMsgHorizontalScrollBarSize* CMsgHorizontalScrollBarSize::New() const {
  return new CMsgHorizontalScrollBarSize;
}

void CMsgHorizontalScrollBarSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHorizontalScrollBarSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHorizontalScrollBarSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHorizontalScrollBarSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHorizontalScrollBarSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHorizontalScrollBarSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHorizontalScrollBarSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSize::MergeFrom(const CMsgHorizontalScrollBarSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHorizontalScrollBarSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSize::CopyFrom(const CMsgHorizontalScrollBarSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSize::IsInitialized() const {
  
  return true;
}

void CMsgHorizontalScrollBarSize::Swap(CMsgHorizontalScrollBarSize* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHorizontalScrollBarSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHorizontalScrollBarSize_descriptor_;
  metadata.reflection = CMsgHorizontalScrollBarSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHorizontalScrollBarSizeResponse::kBrowserHandleFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kXFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kYFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kWideFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kTallFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kScrollMaxFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kScrollFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kZoomFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kVisibleFieldNumber;
#endif  // !_MSC_VER

CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHorizontalScrollBarSizeResponse::InitAsDefaultInstance() {
}

CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse(const CMsgHorizontalScrollBarSizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSizeResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  wide_ = 0u;
  tall_ = 0u;
  scroll_max_ = 0u;
  scroll_ = 0u;
  zoom_ = 0;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHorizontalScrollBarSizeResponse::~CMsgHorizontalScrollBarSizeResponse() {
  SharedDtor();
}

void CMsgHorizontalScrollBarSizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHorizontalScrollBarSizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHorizontalScrollBarSizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHorizontalScrollBarSizeResponse_descriptor_;
}

const CMsgHorizontalScrollBarSizeResponse& CMsgHorizontalScrollBarSizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgHorizontalScrollBarSizeResponse* CMsgHorizontalScrollBarSizeResponse::default_instance_ = NULL;

CMsgHorizontalScrollBarSizeResponse* CMsgHorizontalScrollBarSizeResponse::New() const {
  return new CMsgHorizontalScrollBarSizeResponse;
}

void CMsgHorizontalScrollBarSizeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
    wide_ = 0u;
    tall_ = 0u;
    scroll_max_ = 0u;
    scroll_ = 0u;
    zoom_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHorizontalScrollBarSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wide;
        break;
      }
      
      // optional uint32 wide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tall;
        break;
      }
      
      // optional uint32 tall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scroll_max;
        break;
      }
      
      // optional uint32 scroll_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_max_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scroll;
        break;
      }
      
      // optional uint32 scroll = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_zoom;
        break;
      }
      
      // optional float zoom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_visible;
        break;
      }
      
      // optional bool visible = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHorizontalScrollBarSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }
  
  // optional uint32 scroll_max = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scroll_max(), output);
  }
  
  // optional uint32 scroll = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scroll(), output);
  }
  
  // optional float zoom = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->zoom(), output);
  }
  
  // optional bool visible = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->visible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHorizontalScrollBarSizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }
  
  // optional uint32 scroll_max = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scroll_max(), target);
  }
  
  // optional uint32 scroll = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scroll(), target);
  }
  
  // optional float zoom = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->zoom(), target);
  }
  
  // optional bool visible = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->visible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHorizontalScrollBarSizeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional uint32 wide = 4;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }
    
    // optional uint32 tall = 5;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }
    
    // optional uint32 scroll_max = 6;
    if (has_scroll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll_max());
    }
    
    // optional uint32 scroll = 7;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }
    
    // optional float zoom = 8;
    if (has_zoom()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool visible = 9;
    if (has_visible()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHorizontalScrollBarSizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_wide(from.wide());
    }
    if (from._has_bit(4)) {
      set_tall(from.tall());
    }
    if (from._has_bit(5)) {
      set_scroll_max(from.scroll_max());
    }
    if (from._has_bit(6)) {
      set_scroll(from.scroll());
    }
    if (from._has_bit(7)) {
      set_zoom(from.zoom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSizeResponse::IsInitialized() const {
  
  return true;
}

void CMsgHorizontalScrollBarSizeResponse::Swap(CMsgHorizontalScrollBarSizeResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(wide_, other->wide_);
    std::swap(tall_, other->tall_);
    std::swap(scroll_max_, other->scroll_max_);
    std::swap(scroll_, other->scroll_);
    std::swap(zoom_, other->zoom_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHorizontalScrollBarSizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHorizontalScrollBarSizeResponse_descriptor_;
  metadata.reflection = CMsgHorizontalScrollBarSizeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVerticalScrollBarSize::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgVerticalScrollBarSize::InitAsDefaultInstance() {
}

CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize(const CMsgVerticalScrollBarSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSize::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVerticalScrollBarSize::~CMsgVerticalScrollBarSize() {
  SharedDtor();
}

void CMsgVerticalScrollBarSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgVerticalScrollBarSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVerticalScrollBarSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVerticalScrollBarSize_descriptor_;
}

const CMsgVerticalScrollBarSize& CMsgVerticalScrollBarSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgVerticalScrollBarSize* CMsgVerticalScrollBarSize::default_instance_ = NULL;

CMsgVerticalScrollBarSize* CMsgVerticalScrollBarSize::New() const {
  return new CMsgVerticalScrollBarSize;
}

void CMsgVerticalScrollBarSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVerticalScrollBarSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgVerticalScrollBarSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgVerticalScrollBarSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgVerticalScrollBarSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVerticalScrollBarSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVerticalScrollBarSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVerticalScrollBarSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSize::MergeFrom(const CMsgVerticalScrollBarSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVerticalScrollBarSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSize::CopyFrom(const CMsgVerticalScrollBarSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSize::IsInitialized() const {
  
  return true;
}

void CMsgVerticalScrollBarSize::Swap(CMsgVerticalScrollBarSize* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVerticalScrollBarSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVerticalScrollBarSize_descriptor_;
  metadata.reflection = CMsgVerticalScrollBarSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVerticalScrollBarSizeResponse::kBrowserHandleFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kXFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kYFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kWideFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kTallFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kScrollMaxFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kScrollFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kZoomFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kVisibleFieldNumber;
#endif  // !_MSC_VER

CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgVerticalScrollBarSizeResponse::InitAsDefaultInstance() {
}

CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse(const CMsgVerticalScrollBarSizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSizeResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  wide_ = 0u;
  tall_ = 0u;
  scroll_max_ = 0u;
  scroll_ = 0u;
  zoom_ = 0;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVerticalScrollBarSizeResponse::~CMsgVerticalScrollBarSizeResponse() {
  SharedDtor();
}

void CMsgVerticalScrollBarSizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgVerticalScrollBarSizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVerticalScrollBarSizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVerticalScrollBarSizeResponse_descriptor_;
}

const CMsgVerticalScrollBarSizeResponse& CMsgVerticalScrollBarSizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgVerticalScrollBarSizeResponse* CMsgVerticalScrollBarSizeResponse::default_instance_ = NULL;

CMsgVerticalScrollBarSizeResponse* CMsgVerticalScrollBarSizeResponse::New() const {
  return new CMsgVerticalScrollBarSizeResponse;
}

void CMsgVerticalScrollBarSizeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
    wide_ = 0u;
    tall_ = 0u;
    scroll_max_ = 0u;
    scroll_ = 0u;
    zoom_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVerticalScrollBarSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wide;
        break;
      }
      
      // optional uint32 wide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tall;
        break;
      }
      
      // optional uint32 tall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scroll_max;
        break;
      }
      
      // optional uint32 scroll_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_max_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scroll;
        break;
      }
      
      // optional uint32 scroll = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_zoom;
        break;
      }
      
      // optional float zoom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_visible;
        break;
      }
      
      // optional bool visible = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgVerticalScrollBarSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }
  
  // optional uint32 scroll_max = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scroll_max(), output);
  }
  
  // optional uint32 scroll = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scroll(), output);
  }
  
  // optional float zoom = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->zoom(), output);
  }
  
  // optional bool visible = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->visible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgVerticalScrollBarSizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }
  
  // optional uint32 scroll_max = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scroll_max(), target);
  }
  
  // optional uint32 scroll = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scroll(), target);
  }
  
  // optional float zoom = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->zoom(), target);
  }
  
  // optional bool visible = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->visible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgVerticalScrollBarSizeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional uint32 wide = 4;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }
    
    // optional uint32 tall = 5;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }
    
    // optional uint32 scroll_max = 6;
    if (has_scroll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll_max());
    }
    
    // optional uint32 scroll = 7;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }
    
    // optional float zoom = 8;
    if (has_zoom()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool visible = 9;
    if (has_visible()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVerticalScrollBarSizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVerticalScrollBarSizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const CMsgVerticalScrollBarSizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_wide(from.wide());
    }
    if (from._has_bit(4)) {
      set_tall(from.tall());
    }
    if (from._has_bit(5)) {
      set_scroll_max(from.scroll_max());
    }
    if (from._has_bit(6)) {
      set_scroll(from.scroll());
    }
    if (from._has_bit(7)) {
      set_zoom(from.zoom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const CMsgVerticalScrollBarSizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSizeResponse::IsInitialized() const {
  
  return true;
}

void CMsgVerticalScrollBarSizeResponse::Swap(CMsgVerticalScrollBarSizeResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(wide_, other->wide_);
    std::swap(tall_, other->tall_);
    std::swap(scroll_max_, other->scroll_max_);
    std::swap(scroll_, other->scroll_);
    std::swap(zoom_, other->zoom_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVerticalScrollBarSizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVerticalScrollBarSizeResponse_descriptor_;
  metadata.reflection = CMsgVerticalScrollBarSizeResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgFind::_default_find_;
#ifndef _MSC_VER
const int CMsgFind::kBrowserHandleFieldNumber;
const int CMsgFind::kFindFieldNumber;
const int CMsgFind::kInfindFieldNumber;
const int CMsgFind::kReverseFieldNumber;
#endif  // !_MSC_VER

CMsgFind::CMsgFind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFind::InitAsDefaultInstance() {
}

CMsgFind::CMsgFind(const CMsgFind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFind::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  find_ = const_cast< ::std::string*>(&_default_find_);
  infind_ = false;
  reverse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFind::~CMsgFind() {
  SharedDtor();
}

void CMsgFind::SharedDtor() {
  if (find_ != &_default_find_) {
    delete find_;
  }
  if (this != default_instance_) {
  }
}

void CMsgFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFind_descriptor_;
}

const CMsgFind& CMsgFind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFind* CMsgFind::default_instance_ = NULL;

CMsgFind* CMsgFind::New() const {
  return new CMsgFind;
}

void CMsgFind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (find_ != &_default_find_) {
        find_->clear();
      }
    }
    infind_ = false;
    reverse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_find;
        break;
      }
      
      // optional string find = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_find()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->find().data(), this->find().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_infind;
        break;
      }
      
      // optional bool infind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infind_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reverse;
        break;
      }
      
      // optional bool reverse = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string find = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->find().data(), this->find().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->find(), output);
  }
  
  // optional bool infind = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->infind(), output);
  }
  
  // optional bool reverse = 4 [default = false];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reverse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string find = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->find().data(), this->find().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->find(), target);
  }
  
  // optional bool infind = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->infind(), target);
  }
  
  // optional bool reverse = 4 [default = false];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reverse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFind::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string find = 2;
    if (has_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->find());
    }
    
    // optional bool infind = 3;
    if (has_infind()) {
      total_size += 1 + 1;
    }
    
    // optional bool reverse = 4 [default = false];
    if (has_reverse()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFind::MergeFrom(const CMsgFind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_find(from.find());
    }
    if (from._has_bit(2)) {
      set_infind(from.infind());
    }
    if (from._has_bit(3)) {
      set_reverse(from.reverse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFind::CopyFrom(const CMsgFind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFind::IsInitialized() const {
  
  return true;
}

void CMsgFind::Swap(CMsgFind* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(find_, other->find_);
    std::swap(infind_, other->infind_);
    std::swap(reverse_, other->reverse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFind_descriptor_;
  metadata.reflection = CMsgFind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStopFind::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgStopFind::CMsgStopFind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStopFind::InitAsDefaultInstance() {
}

CMsgStopFind::CMsgStopFind(const CMsgStopFind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStopFind::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStopFind::~CMsgStopFind() {
  SharedDtor();
}

void CMsgStopFind::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStopFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStopFind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStopFind_descriptor_;
}

const CMsgStopFind& CMsgStopFind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgStopFind* CMsgStopFind::default_instance_ = NULL;

CMsgStopFind* CMsgStopFind::New() const {
  return new CMsgStopFind;
}

void CMsgStopFind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStopFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStopFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStopFind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStopFind::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStopFind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStopFind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStopFind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStopFind::MergeFrom(const CMsgStopFind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStopFind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFind::CopyFrom(const CMsgStopFind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFind::IsInitialized() const {
  
  return true;
}

void CMsgStopFind::Swap(CMsgStopFind* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStopFind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStopFind_descriptor_;
  metadata.reflection = CMsgStopFind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetHorizontalScroll::kBrowserHandleFieldNumber;
const int CMsgSetHorizontalScroll::kScrollFieldNumber;
#endif  // !_MSC_VER

CMsgSetHorizontalScroll::CMsgSetHorizontalScroll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetHorizontalScroll::InitAsDefaultInstance() {
}

CMsgSetHorizontalScroll::CMsgSetHorizontalScroll(const CMsgSetHorizontalScroll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetHorizontalScroll::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  scroll_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetHorizontalScroll::~CMsgSetHorizontalScroll() {
  SharedDtor();
}

void CMsgSetHorizontalScroll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetHorizontalScroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetHorizontalScroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetHorizontalScroll_descriptor_;
}

const CMsgSetHorizontalScroll& CMsgSetHorizontalScroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetHorizontalScroll* CMsgSetHorizontalScroll::default_instance_ = NULL;

CMsgSetHorizontalScroll* CMsgSetHorizontalScroll::New() const {
  return new CMsgSetHorizontalScroll;
}

void CMsgSetHorizontalScroll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    scroll_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetHorizontalScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scroll;
        break;
      }
      
      // optional uint32 scroll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetHorizontalScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 scroll = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scroll(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetHorizontalScroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 scroll = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scroll(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetHorizontalScroll::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 scroll = 2;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetHorizontalScroll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetHorizontalScroll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetHorizontalScroll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetHorizontalScroll::MergeFrom(const CMsgSetHorizontalScroll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_scroll(from.scroll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetHorizontalScroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHorizontalScroll::CopyFrom(const CMsgSetHorizontalScroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHorizontalScroll::IsInitialized() const {
  
  return true;
}

void CMsgSetHorizontalScroll::Swap(CMsgSetHorizontalScroll* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(scroll_, other->scroll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetHorizontalScroll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetHorizontalScroll_descriptor_;
  metadata.reflection = CMsgSetHorizontalScroll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetVerticalScroll::kBrowserHandleFieldNumber;
const int CMsgSetVerticalScroll::kScrollFieldNumber;
#endif  // !_MSC_VER

CMsgSetVerticalScroll::CMsgSetVerticalScroll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetVerticalScroll::InitAsDefaultInstance() {
}

CMsgSetVerticalScroll::CMsgSetVerticalScroll(const CMsgSetVerticalScroll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetVerticalScroll::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  scroll_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetVerticalScroll::~CMsgSetVerticalScroll() {
  SharedDtor();
}

void CMsgSetVerticalScroll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetVerticalScroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetVerticalScroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetVerticalScroll_descriptor_;
}

const CMsgSetVerticalScroll& CMsgSetVerticalScroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetVerticalScroll* CMsgSetVerticalScroll::default_instance_ = NULL;

CMsgSetVerticalScroll* CMsgSetVerticalScroll::New() const {
  return new CMsgSetVerticalScroll;
}

void CMsgSetVerticalScroll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    scroll_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetVerticalScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scroll;
        break;
      }
      
      // optional uint32 scroll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scroll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetVerticalScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 scroll = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scroll(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetVerticalScroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 scroll = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scroll(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetVerticalScroll::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 scroll = 2;
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetVerticalScroll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetVerticalScroll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetVerticalScroll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetVerticalScroll::MergeFrom(const CMsgSetVerticalScroll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_scroll(from.scroll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetVerticalScroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetVerticalScroll::CopyFrom(const CMsgSetVerticalScroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetVerticalScroll::IsInitialized() const {
  
  return true;
}

void CMsgSetVerticalScroll::Swap(CMsgSetVerticalScroll* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(scroll_, other->scroll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetVerticalScroll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetVerticalScroll_descriptor_;
  metadata.reflection = CMsgSetVerticalScroll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetZoomLevel::kBrowserHandleFieldNumber;
const int CMsgSetZoomLevel::kZoomFieldNumber;
#endif  // !_MSC_VER

CMsgSetZoomLevel::CMsgSetZoomLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetZoomLevel::InitAsDefaultInstance() {
}

CMsgSetZoomLevel::CMsgSetZoomLevel(const CMsgSetZoomLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetZoomLevel::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  zoom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetZoomLevel::~CMsgSetZoomLevel() {
  SharedDtor();
}

void CMsgSetZoomLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetZoomLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetZoomLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetZoomLevel_descriptor_;
}

const CMsgSetZoomLevel& CMsgSetZoomLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetZoomLevel* CMsgSetZoomLevel::default_instance_ = NULL;

CMsgSetZoomLevel* CMsgSetZoomLevel::New() const {
  return new CMsgSetZoomLevel;
}

void CMsgSetZoomLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    zoom_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetZoomLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zoom;
        break;
      }
      
      // optional uint32 zoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetZoomLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 zoom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetZoomLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 zoom = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetZoomLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 zoom = 2;
    if (has_zoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetZoomLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetZoomLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetZoomLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetZoomLevel::MergeFrom(const CMsgSetZoomLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_zoom(from.zoom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetZoomLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetZoomLevel::CopyFrom(const CMsgSetZoomLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetZoomLevel::IsInitialized() const {
  
  return true;
}

void CMsgSetZoomLevel::Swap(CMsgSetZoomLevel* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(zoom_, other->zoom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetZoomLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetZoomLevel_descriptor_;
  metadata.reflection = CMsgSetZoomLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgViewSource::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgViewSource::CMsgViewSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgViewSource::InitAsDefaultInstance() {
}

CMsgViewSource::CMsgViewSource(const CMsgViewSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgViewSource::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgViewSource::~CMsgViewSource() {
  SharedDtor();
}

void CMsgViewSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgViewSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgViewSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgViewSource_descriptor_;
}

const CMsgViewSource& CMsgViewSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgViewSource* CMsgViewSource::default_instance_ = NULL;

CMsgViewSource* CMsgViewSource::New() const {
  return new CMsgViewSource;
}

void CMsgViewSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgViewSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgViewSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgViewSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgViewSource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgViewSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgViewSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgViewSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgViewSource::MergeFrom(const CMsgViewSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgViewSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgViewSource::CopyFrom(const CMsgViewSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgViewSource::IsInitialized() const {
  
  return true;
}

void CMsgViewSource::Swap(CMsgViewSource* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgViewSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgViewSource_descriptor_;
  metadata.reflection = CMsgViewSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBrowserReady::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgBrowserReady::CMsgBrowserReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBrowserReady::InitAsDefaultInstance() {
}

CMsgBrowserReady::CMsgBrowserReady(const CMsgBrowserReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBrowserReady::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrowserReady::~CMsgBrowserReady() {
  SharedDtor();
}

void CMsgBrowserReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBrowserReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrowserReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrowserReady_descriptor_;
}

const CMsgBrowserReady& CMsgBrowserReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgBrowserReady* CMsgBrowserReady::default_instance_ = NULL;

CMsgBrowserReady* CMsgBrowserReady::New() const {
  return new CMsgBrowserReady;
}

void CMsgBrowserReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrowserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBrowserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBrowserReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBrowserReady::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrowserReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrowserReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrowserReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrowserReady::MergeFrom(const CMsgBrowserReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrowserReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserReady::CopyFrom(const CMsgBrowserReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserReady::IsInitialized() const {
  
  return true;
}

void CMsgBrowserReady::Swap(CMsgBrowserReady* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrowserReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrowserReady_descriptor_;
  metadata.reflection = CMsgBrowserReady_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgURLChanged::_default_url_;
const ::std::string CMsgURLChanged::_default_postdata_;
const ::std::string CMsgURLChanged::_default_pagetitle_;
#ifndef _MSC_VER
const int CMsgURLChanged::kBrowserHandleFieldNumber;
const int CMsgURLChanged::kUrlFieldNumber;
const int CMsgURLChanged::kPostDataFieldNumber;
const int CMsgURLChanged::kBIsRedirectFieldNumber;
const int CMsgURLChanged::kPagetitleFieldNumber;
const int CMsgURLChanged::kBNewNavigationFieldNumber;
#endif  // !_MSC_VER

CMsgURLChanged::CMsgURLChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgURLChanged::InitAsDefaultInstance() {
}

CMsgURLChanged::CMsgURLChanged(const CMsgURLChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgURLChanged::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  postdata_ = const_cast< ::std::string*>(&_default_postdata_);
  bisredirect_ = false;
  pagetitle_ = const_cast< ::std::string*>(&_default_pagetitle_);
  bnewnavigation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgURLChanged::~CMsgURLChanged() {
  SharedDtor();
}

void CMsgURLChanged::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (postdata_ != &_default_postdata_) {
    delete postdata_;
  }
  if (pagetitle_ != &_default_pagetitle_) {
    delete pagetitle_;
  }
  if (this != default_instance_) {
  }
}

void CMsgURLChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgURLChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgURLChanged_descriptor_;
}

const CMsgURLChanged& CMsgURLChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgURLChanged* CMsgURLChanged::default_instance_ = NULL;

CMsgURLChanged* CMsgURLChanged::New() const {
  return new CMsgURLChanged;
}

void CMsgURLChanged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (postdata_ != &_default_postdata_) {
        postdata_->clear();
      }
    }
    bisredirect_ = false;
    if (_has_bit(4)) {
      if (pagetitle_ != &_default_pagetitle_) {
        pagetitle_->clear();
      }
    }
    bnewnavigation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgURLChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_postData;
        break;
      }
      
      // optional string postData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postdata().data(), this->postdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bIsRedirect;
        break;
      }
      
      // optional bool bIsRedirect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsRedirect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisredirect_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pagetitle;
        break;
      }
      
      // optional string pagetitle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pagetitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pagetitle().data(), this->pagetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bNewNavigation;
        break;
      }
      
      // optional bool bNewNavigation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bNewNavigation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bnewnavigation_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgURLChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string postData = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->postdata(), output);
  }
  
  // optional bool bIsRedirect = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bisredirect(), output);
  }
  
  // optional string pagetitle = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pagetitle(), output);
  }
  
  // optional bool bNewNavigation = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bnewnavigation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgURLChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string postData = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->postdata(), target);
  }
  
  // optional bool bIsRedirect = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bisredirect(), target);
  }
  
  // optional string pagetitle = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pagetitle(), target);
  }
  
  // optional bool bNewNavigation = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bnewnavigation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgURLChanged::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string postData = 3;
    if (has_postdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }
    
    // optional bool bIsRedirect = 4;
    if (has_bisredirect()) {
      total_size += 1 + 1;
    }
    
    // optional string pagetitle = 5;
    if (has_pagetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }
    
    // optional bool bNewNavigation = 6;
    if (has_bnewnavigation()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgURLChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgURLChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgURLChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgURLChanged::MergeFrom(const CMsgURLChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_postdata(from.postdata());
    }
    if (from._has_bit(3)) {
      set_bisredirect(from.bisredirect());
    }
    if (from._has_bit(4)) {
      set_pagetitle(from.pagetitle());
    }
    if (from._has_bit(5)) {
      set_bnewnavigation(from.bnewnavigation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgURLChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgURLChanged::CopyFrom(const CMsgURLChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgURLChanged::IsInitialized() const {
  
  return true;
}

void CMsgURLChanged::Swap(CMsgURLChanged* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(postdata_, other->postdata_);
    std::swap(bisredirect_, other->bisredirect_);
    std::swap(pagetitle_, other->pagetitle_);
    std::swap(bnewnavigation_, other->bnewnavigation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgURLChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgURLChanged_descriptor_;
  metadata.reflection = CMsgURLChanged_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CHTMLHeader::_default_key_;
const ::std::string CHTMLHeader::_default_value_;
#ifndef _MSC_VER
const int CHTMLHeader::kKeyFieldNumber;
const int CHTMLHeader::kValueFieldNumber;
#endif  // !_MSC_VER

CHTMLHeader::CHTMLHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHTMLHeader::InitAsDefaultInstance() {
}

CHTMLHeader::CHTMLHeader(const CHTMLHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHTMLHeader::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHTMLHeader::~CHTMLHeader() {
  SharedDtor();
}

void CHTMLHeader::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CHTMLHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHTMLHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHTMLHeader_descriptor_;
}

const CHTMLHeader& CHTMLHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CHTMLHeader* CHTMLHeader::default_instance_ = NULL;

CHTMLHeader* CHTMLHeader::New() const {
  return new CHTMLHeader;
}

void CHTMLHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHTMLHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHTMLHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHTMLHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHTMLHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHTMLHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHTMLHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHTMLHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHTMLHeader::MergeFrom(const CHTMLHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHTMLHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLHeader::CopyFrom(const CHTMLHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLHeader::IsInitialized() const {
  
  return true;
}

void CHTMLHeader::Swap(CHTMLHeader* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHTMLHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHTMLHeader_descriptor_;
  metadata.reflection = CHTMLHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CHTMLPageSecurityInfo::_default_issuername_;
const ::std::string CHTMLPageSecurityInfo::_default_certname_;
#ifndef _MSC_VER
const int CHTMLPageSecurityInfo::kBIsSecureFieldNumber;
const int CHTMLPageSecurityInfo::kBHasCertErrorFieldNumber;
const int CHTMLPageSecurityInfo::kIssuerNameFieldNumber;
const int CHTMLPageSecurityInfo::kCertNameFieldNumber;
const int CHTMLPageSecurityInfo::kCertExpiryFieldNumber;
const int CHTMLPageSecurityInfo::kNCertBitsFieldNumber;
const int CHTMLPageSecurityInfo::kBIsEVCertFieldNumber;
#endif  // !_MSC_VER

CHTMLPageSecurityInfo::CHTMLPageSecurityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHTMLPageSecurityInfo::InitAsDefaultInstance() {
}

CHTMLPageSecurityInfo::CHTMLPageSecurityInfo(const CHTMLPageSecurityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHTMLPageSecurityInfo::SharedCtor() {
  _cached_size_ = 0;
  bissecure_ = false;
  bhascerterror_ = false;
  issuername_ = const_cast< ::std::string*>(&_default_issuername_);
  certname_ = const_cast< ::std::string*>(&_default_certname_);
  certexpiry_ = 0;
  ncertbits_ = 0;
  bisevcert_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHTMLPageSecurityInfo::~CHTMLPageSecurityInfo() {
  SharedDtor();
}

void CHTMLPageSecurityInfo::SharedDtor() {
  if (issuername_ != &_default_issuername_) {
    delete issuername_;
  }
  if (certname_ != &_default_certname_) {
    delete certname_;
  }
  if (this != default_instance_) {
  }
}

void CHTMLPageSecurityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHTMLPageSecurityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHTMLPageSecurityInfo_descriptor_;
}

const CHTMLPageSecurityInfo& CHTMLPageSecurityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CHTMLPageSecurityInfo* CHTMLPageSecurityInfo::default_instance_ = NULL;

CHTMLPageSecurityInfo* CHTMLPageSecurityInfo::New() const {
  return new CHTMLPageSecurityInfo;
}

void CHTMLPageSecurityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bissecure_ = false;
    bhascerterror_ = false;
    if (_has_bit(2)) {
      if (issuername_ != &_default_issuername_) {
        issuername_->clear();
      }
    }
    if (_has_bit(3)) {
      if (certname_ != &_default_certname_) {
        certname_->clear();
      }
    }
    certexpiry_ = 0;
    ncertbits_ = 0;
    bisevcert_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHTMLPageSecurityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsSecure = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissecure_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bHasCertError;
        break;
      }
      
      // optional bool bHasCertError = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHasCertError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhascerterror_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_issuerName;
        break;
      }
      
      // optional string issuerName = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_issuerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->issuername().data(), this->issuername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_certName;
        break;
      }
      
      // optional string certName = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_certName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->certname().data(), this->certname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_certExpiry;
        break;
      }
      
      // optional int32 certExpiry = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_certExpiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &certexpiry_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nCertBits;
        break;
      }
      
      // optional int32 nCertBits = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCertBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncertbits_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bIsEVCert;
        break;
      }
      
      // optional bool bIsEVCert = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsEVCert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisevcert_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHTMLPageSecurityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsSecure = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bissecure(), output);
  }
  
  // optional bool bHasCertError = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bhascerterror(), output);
  }
  
  // optional string issuerName = 3 [default = ""];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuername().data(), this->issuername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->issuername(), output);
  }
  
  // optional string certName = 4 [default = ""];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->certname().data(), this->certname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->certname(), output);
  }
  
  // optional int32 certExpiry = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->certexpiry(), output);
  }
  
  // optional int32 nCertBits = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ncertbits(), output);
  }
  
  // optional bool bIsEVCert = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisevcert(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHTMLPageSecurityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsSecure = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bissecure(), target);
  }
  
  // optional bool bHasCertError = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bhascerterror(), target);
  }
  
  // optional string issuerName = 3 [default = ""];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuername().data(), this->issuername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->issuername(), target);
  }
  
  // optional string certName = 4 [default = ""];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->certname().data(), this->certname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->certname(), target);
  }
  
  // optional int32 certExpiry = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->certexpiry(), target);
  }
  
  // optional int32 nCertBits = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ncertbits(), target);
  }
  
  // optional bool bIsEVCert = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisevcert(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHTMLPageSecurityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsSecure = 1 [default = false];
    if (has_bissecure()) {
      total_size += 1 + 1;
    }
    
    // optional bool bHasCertError = 2 [default = false];
    if (has_bhascerterror()) {
      total_size += 1 + 1;
    }
    
    // optional string issuerName = 3 [default = ""];
    if (has_issuername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuername());
    }
    
    // optional string certName = 4 [default = ""];
    if (has_certname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certname());
    }
    
    // optional int32 certExpiry = 5 [default = 0];
    if (has_certexpiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->certexpiry());
    }
    
    // optional int32 nCertBits = 6 [default = 0];
    if (has_ncertbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncertbits());
    }
    
    // optional bool bIsEVCert = 7 [default = false];
    if (has_bisevcert()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHTMLPageSecurityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHTMLPageSecurityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHTMLPageSecurityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHTMLPageSecurityInfo::MergeFrom(const CHTMLPageSecurityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bissecure(from.bissecure());
    }
    if (from._has_bit(1)) {
      set_bhascerterror(from.bhascerterror());
    }
    if (from._has_bit(2)) {
      set_issuername(from.issuername());
    }
    if (from._has_bit(3)) {
      set_certname(from.certname());
    }
    if (from._has_bit(4)) {
      set_certexpiry(from.certexpiry());
    }
    if (from._has_bit(5)) {
      set_ncertbits(from.ncertbits());
    }
    if (from._has_bit(6)) {
      set_bisevcert(from.bisevcert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHTMLPageSecurityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLPageSecurityInfo::CopyFrom(const CHTMLPageSecurityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLPageSecurityInfo::IsInitialized() const {
  
  return true;
}

void CHTMLPageSecurityInfo::Swap(CHTMLPageSecurityInfo* other) {
  if (other != this) {
    std::swap(bissecure_, other->bissecure_);
    std::swap(bhascerterror_, other->bhascerterror_);
    std::swap(issuername_, other->issuername_);
    std::swap(certname_, other->certname_);
    std::swap(certexpiry_, other->certexpiry_);
    std::swap(ncertbits_, other->ncertbits_);
    std::swap(bisevcert_, other->bisevcert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHTMLPageSecurityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHTMLPageSecurityInfo_descriptor_;
  metadata.reflection = CHTMLPageSecurityInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgFinishedRequest::_default_url_;
const ::std::string CMsgFinishedRequest::_default_pagetitle_;
#ifndef _MSC_VER
const int CMsgFinishedRequest::kBrowserHandleFieldNumber;
const int CMsgFinishedRequest::kUrlFieldNumber;
const int CMsgFinishedRequest::kPageTitleFieldNumber;
const int CMsgFinishedRequest::kSecurityInfoFieldNumber;
const int CMsgFinishedRequest::kHeadersFieldNumber;
#endif  // !_MSC_VER

CMsgFinishedRequest::CMsgFinishedRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFinishedRequest::InitAsDefaultInstance() {
  security_info_ = const_cast< ::CHTMLPageSecurityInfo*>(&::CHTMLPageSecurityInfo::default_instance());
}

CMsgFinishedRequest::CMsgFinishedRequest(const CMsgFinishedRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFinishedRequest::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  pagetitle_ = const_cast< ::std::string*>(&_default_pagetitle_);
  security_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFinishedRequest::~CMsgFinishedRequest() {
  SharedDtor();
}

void CMsgFinishedRequest::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (pagetitle_ != &_default_pagetitle_) {
    delete pagetitle_;
  }
  if (this != default_instance_) {
    delete security_info_;
  }
}

void CMsgFinishedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFinishedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFinishedRequest_descriptor_;
}

const CMsgFinishedRequest& CMsgFinishedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFinishedRequest* CMsgFinishedRequest::default_instance_ = NULL;

CMsgFinishedRequest* CMsgFinishedRequest::New() const {
  return new CMsgFinishedRequest;
}

void CMsgFinishedRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pagetitle_ != &_default_pagetitle_) {
        pagetitle_->clear();
      }
    }
    if (_has_bit(3)) {
      if (security_info_ != NULL) security_info_->::CHTMLPageSecurityInfo::Clear();
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFinishedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pageTitle;
        break;
      }
      
      // optional string pageTitle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pagetitle().data(), this->pagetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security_info;
        break;
      }
      
      // optional .CHTMLPageSecurityInfo security_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_headers;
        break;
      }
      
      // repeated .CHTMLHeader headers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_headers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFinishedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string pageTitle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pagetitle(), output);
  }
  
  // optional .CHTMLPageSecurityInfo security_info = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->security_info(), output);
  }
  
  // repeated .CHTMLHeader headers = 5;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->headers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFinishedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string pageTitle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetitle().data(), this->pagetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pagetitle(), target);
  }
  
  // optional .CHTMLPageSecurityInfo security_info = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->security_info(), target);
  }
  
  // repeated .CHTMLHeader headers = 5;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->headers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFinishedRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string pageTitle = 3;
    if (has_pagetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }
    
    // optional .CHTMLPageSecurityInfo security_info = 4;
    if (has_security_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security_info());
    }
    
  }
  // repeated .CHTMLHeader headers = 5;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFinishedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFinishedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFinishedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFinishedRequest::MergeFrom(const CMsgFinishedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_pagetitle(from.pagetitle());
    }
    if (from._has_bit(3)) {
      mutable_security_info()->::CHTMLPageSecurityInfo::MergeFrom(from.security_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFinishedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFinishedRequest::CopyFrom(const CMsgFinishedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFinishedRequest::IsInitialized() const {
  
  return true;
}

void CMsgFinishedRequest::Swap(CMsgFinishedRequest* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(pagetitle_, other->pagetitle_);
    std::swap(security_info_, other->security_info_);
    headers_.Swap(&other->headers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFinishedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFinishedRequest_descriptor_;
  metadata.reflection = CMsgFinishedRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgStartRequest::_default_url_;
const ::std::string CMsgStartRequest::_default_target_;
const ::std::string CMsgStartRequest::_default_postdata_;
#ifndef _MSC_VER
const int CMsgStartRequest::kBrowserHandleFieldNumber;
const int CMsgStartRequest::kUrlFieldNumber;
const int CMsgStartRequest::kTargetFieldNumber;
const int CMsgStartRequest::kPostDataFieldNumber;
const int CMsgStartRequest::kBIsRedirectFieldNumber;
#endif  // !_MSC_VER

CMsgStartRequest::CMsgStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStartRequest::InitAsDefaultInstance() {
}

CMsgStartRequest::CMsgStartRequest(const CMsgStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStartRequest::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  target_ = const_cast< ::std::string*>(&_default_target_);
  postdata_ = const_cast< ::std::string*>(&_default_postdata_);
  bisredirect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStartRequest::~CMsgStartRequest() {
  SharedDtor();
}

void CMsgStartRequest::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (target_ != &_default_target_) {
    delete target_;
  }
  if (postdata_ != &_default_postdata_) {
    delete postdata_;
  }
  if (this != default_instance_) {
  }
}

void CMsgStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStartRequest_descriptor_;
}

const CMsgStartRequest& CMsgStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgStartRequest* CMsgStartRequest::default_instance_ = NULL;

CMsgStartRequest* CMsgStartRequest::New() const {
  return new CMsgStartRequest;
}

void CMsgStartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (target_ != &_default_target_) {
        target_->clear();
      }
    }
    if (_has_bit(3)) {
      if (postdata_ != &_default_postdata_) {
        postdata_->clear();
      }
    }
    bisredirect_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // optional string target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_postData;
        break;
      }
      
      // optional string postData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postdata().data(), this->postdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bIsRedirect;
        break;
      }
      
      // optional bool bIsRedirect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsRedirect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisredirect_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string target = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target(), output);
  }
  
  // optional string postData = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->postdata(), output);
  }
  
  // optional bool bIsRedirect = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bisredirect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string target = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }
  
  // optional string postData = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postdata().data(), this->postdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->postdata(), target);
  }
  
  // optional bool bIsRedirect = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bisredirect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStartRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }
    
    // optional string postData = 4;
    if (has_postdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }
    
    // optional bool bIsRedirect = 5;
    if (has_bisredirect()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStartRequest::MergeFrom(const CMsgStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_target(from.target());
    }
    if (from._has_bit(3)) {
      set_postdata(from.postdata());
    }
    if (from._has_bit(4)) {
      set_bisredirect(from.bisredirect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequest::CopyFrom(const CMsgStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequest::IsInitialized() const {
  
  return true;
}

void CMsgStartRequest::Swap(CMsgStartRequest* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(target_, other->target_);
    std::swap(postdata_, other->postdata_);
    std::swap(bisredirect_, other->bisredirect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStartRequest_descriptor_;
  metadata.reflection = CMsgStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStartRequestResponse::kBrowserHandleFieldNumber;
const int CMsgStartRequestResponse::kBAllowFieldNumber;
#endif  // !_MSC_VER

CMsgStartRequestResponse::CMsgStartRequestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStartRequestResponse::InitAsDefaultInstance() {
}

CMsgStartRequestResponse::CMsgStartRequestResponse(const CMsgStartRequestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStartRequestResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ballow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStartRequestResponse::~CMsgStartRequestResponse() {
  SharedDtor();
}

void CMsgStartRequestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStartRequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartRequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStartRequestResponse_descriptor_;
}

const CMsgStartRequestResponse& CMsgStartRequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgStartRequestResponse* CMsgStartRequestResponse::default_instance_ = NULL;

CMsgStartRequestResponse* CMsgStartRequestResponse::New() const {
  return new CMsgStartRequestResponse;
}

void CMsgStartRequestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    ballow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStartRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bAllow;
        break;
      }
      
      // optional bool bAllow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAllow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStartRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool bAllow = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStartRequestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool bAllow = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStartRequestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool bAllow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStartRequestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStartRequestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStartRequestResponse::MergeFrom(const CMsgStartRequestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_ballow(from.ballow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStartRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequestResponse::CopyFrom(const CMsgStartRequestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequestResponse::IsInitialized() const {
  
  return true;
}

void CMsgStartRequestResponse::Swap(CMsgStartRequestResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(ballow_, other->ballow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStartRequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStartRequestResponse_descriptor_;
  metadata.reflection = CMsgStartRequestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgShowPopup::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgShowPopup::CMsgShowPopup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgShowPopup::InitAsDefaultInstance() {
}

CMsgShowPopup::CMsgShowPopup(const CMsgShowPopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgShowPopup::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgShowPopup::~CMsgShowPopup() {
  SharedDtor();
}

void CMsgShowPopup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgShowPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgShowPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgShowPopup_descriptor_;
}

const CMsgShowPopup& CMsgShowPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgShowPopup* CMsgShowPopup::default_instance_ = NULL;

CMsgShowPopup* CMsgShowPopup::New() const {
  return new CMsgShowPopup;
}

void CMsgShowPopup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgShowPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgShowPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgShowPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgShowPopup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgShowPopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgShowPopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgShowPopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgShowPopup::MergeFrom(const CMsgShowPopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgShowPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowPopup::CopyFrom(const CMsgShowPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowPopup::IsInitialized() const {
  
  return true;
}

void CMsgShowPopup::Swap(CMsgShowPopup* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgShowPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgShowPopup_descriptor_;
  metadata.reflection = CMsgShowPopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHidePopup::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgHidePopup::CMsgHidePopup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHidePopup::InitAsDefaultInstance() {
}

CMsgHidePopup::CMsgHidePopup(const CMsgHidePopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHidePopup::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHidePopup::~CMsgHidePopup() {
  SharedDtor();
}

void CMsgHidePopup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHidePopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHidePopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHidePopup_descriptor_;
}

const CMsgHidePopup& CMsgHidePopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgHidePopup* CMsgHidePopup::default_instance_ = NULL;

CMsgHidePopup* CMsgHidePopup::New() const {
  return new CMsgHidePopup;
}

void CMsgHidePopup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHidePopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHidePopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHidePopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHidePopup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHidePopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHidePopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHidePopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHidePopup::MergeFrom(const CMsgHidePopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHidePopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHidePopup::CopyFrom(const CMsgHidePopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHidePopup::IsInitialized() const {
  
  return true;
}

void CMsgHidePopup::Swap(CMsgHidePopup* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHidePopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHidePopup_descriptor_;
  metadata.reflection = CMsgHidePopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSizePopup::kBrowserHandleFieldNumber;
const int CMsgSizePopup::kXFieldNumber;
const int CMsgSizePopup::kYFieldNumber;
const int CMsgSizePopup::kWideFieldNumber;
const int CMsgSizePopup::kTallFieldNumber;
#endif  // !_MSC_VER

CMsgSizePopup::CMsgSizePopup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSizePopup::InitAsDefaultInstance() {
}

CMsgSizePopup::CMsgSizePopup(const CMsgSizePopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSizePopup::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  wide_ = 0u;
  tall_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSizePopup::~CMsgSizePopup() {
  SharedDtor();
}

void CMsgSizePopup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSizePopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSizePopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSizePopup_descriptor_;
}

const CMsgSizePopup& CMsgSizePopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSizePopup* CMsgSizePopup::default_instance_ = NULL;

CMsgSizePopup* CMsgSizePopup::New() const {
  return new CMsgSizePopup;
}

void CMsgSizePopup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
    wide_ = 0u;
    tall_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSizePopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wide;
        break;
      }
      
      // optional uint32 wide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tall;
        break;
      }
      
      // optional uint32 tall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSizePopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSizePopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSizePopup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional uint32 wide = 4;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }
    
    // optional uint32 tall = 5;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSizePopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSizePopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSizePopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSizePopup::MergeFrom(const CMsgSizePopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_wide(from.wide());
    }
    if (from._has_bit(4)) {
      set_tall(from.tall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSizePopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSizePopup::CopyFrom(const CMsgSizePopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSizePopup::IsInitialized() const {
  
  return true;
}

void CMsgSizePopup::Swap(CMsgSizePopup* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(wide_, other->wide_);
    std::swap(tall_, other->tall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSizePopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSizePopup_descriptor_;
  metadata.reflection = CMsgSizePopup_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgOpenNewTab::_default_url_;
#ifndef _MSC_VER
const int CMsgOpenNewTab::kBrowserHandleFieldNumber;
const int CMsgOpenNewTab::kUrlFieldNumber;
const int CMsgOpenNewTab::kBForegroundFieldNumber;
#endif  // !_MSC_VER

CMsgOpenNewTab::CMsgOpenNewTab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgOpenNewTab::InitAsDefaultInstance() {
}

CMsgOpenNewTab::CMsgOpenNewTab(const CMsgOpenNewTab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgOpenNewTab::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  bforeground_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpenNewTab::~CMsgOpenNewTab() {
  SharedDtor();
}

void CMsgOpenNewTab::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgOpenNewTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpenNewTab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpenNewTab_descriptor_;
}

const CMsgOpenNewTab& CMsgOpenNewTab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgOpenNewTab* CMsgOpenNewTab::default_instance_ = NULL;

CMsgOpenNewTab* CMsgOpenNewTab::New() const {
  return new CMsgOpenNewTab;
}

void CMsgOpenNewTab::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    bforeground_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpenNewTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bForeground;
        break;
      }
      
      // optional bool bForeground = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bForeground:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bforeground_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgOpenNewTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional bool bForeground = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bforeground(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgOpenNewTab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional bool bForeground = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bforeground(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgOpenNewTab::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional bool bForeground = 3;
    if (has_bforeground()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpenNewTab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpenNewTab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpenNewTab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpenNewTab::MergeFrom(const CMsgOpenNewTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_bforeground(from.bforeground());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpenNewTab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenNewTab::CopyFrom(const CMsgOpenNewTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenNewTab::IsInitialized() const {
  
  return true;
}

void CMsgOpenNewTab::Swap(CMsgOpenNewTab* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(bforeground_, other->bforeground_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpenNewTab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpenNewTab_descriptor_;
  metadata.reflection = CMsgOpenNewTab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgOpenNewTabResponse::kBrowserHandleFieldNumber;
const int CMsgOpenNewTabResponse::kBAllowFieldNumber;
#endif  // !_MSC_VER

CMsgOpenNewTabResponse::CMsgOpenNewTabResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgOpenNewTabResponse::InitAsDefaultInstance() {
}

CMsgOpenNewTabResponse::CMsgOpenNewTabResponse(const CMsgOpenNewTabResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgOpenNewTabResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ballow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpenNewTabResponse::~CMsgOpenNewTabResponse() {
  SharedDtor();
}

void CMsgOpenNewTabResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgOpenNewTabResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpenNewTabResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpenNewTabResponse_descriptor_;
}

const CMsgOpenNewTabResponse& CMsgOpenNewTabResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgOpenNewTabResponse* CMsgOpenNewTabResponse::default_instance_ = NULL;

CMsgOpenNewTabResponse* CMsgOpenNewTabResponse::New() const {
  return new CMsgOpenNewTabResponse;
}

void CMsgOpenNewTabResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    ballow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpenNewTabResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bAllow;
        break;
      }
      
      // optional bool bAllow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAllow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgOpenNewTabResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool bAllow = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgOpenNewTabResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool bAllow = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgOpenNewTabResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool bAllow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpenNewTabResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpenNewTabResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpenNewTabResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpenNewTabResponse::MergeFrom(const CMsgOpenNewTabResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_ballow(from.ballow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpenNewTabResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenNewTabResponse::CopyFrom(const CMsgOpenNewTabResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenNewTabResponse::IsInitialized() const {
  
  return true;
}

void CMsgOpenNewTabResponse::Swap(CMsgOpenNewTabResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(ballow_, other->ballow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpenNewTabResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpenNewTabResponse_descriptor_;
  metadata.reflection = CMsgOpenNewTabResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgPopupHTMLWindow::_default_url_;
#ifndef _MSC_VER
const int CMsgPopupHTMLWindow::kBrowserHandleFieldNumber;
const int CMsgPopupHTMLWindow::kUrlFieldNumber;
const int CMsgPopupHTMLWindow::kXFieldNumber;
const int CMsgPopupHTMLWindow::kYFieldNumber;
const int CMsgPopupHTMLWindow::kWideFieldNumber;
const int CMsgPopupHTMLWindow::kTallFieldNumber;
#endif  // !_MSC_VER

CMsgPopupHTMLWindow::CMsgPopupHTMLWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPopupHTMLWindow::InitAsDefaultInstance() {
}

CMsgPopupHTMLWindow::CMsgPopupHTMLWindow(const CMsgPopupHTMLWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPopupHTMLWindow::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  x_ = 0u;
  y_ = 0u;
  wide_ = 0u;
  tall_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPopupHTMLWindow::~CMsgPopupHTMLWindow() {
  SharedDtor();
}

void CMsgPopupHTMLWindow::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPopupHTMLWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopupHTMLWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPopupHTMLWindow_descriptor_;
}

const CMsgPopupHTMLWindow& CMsgPopupHTMLWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgPopupHTMLWindow* CMsgPopupHTMLWindow::default_instance_ = NULL;

CMsgPopupHTMLWindow* CMsgPopupHTMLWindow::New() const {
  return new CMsgPopupHTMLWindow;
}

void CMsgPopupHTMLWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    x_ = 0u;
    y_ = 0u;
    wide_ = 0u;
    tall_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPopupHTMLWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wide;
        break;
      }
      
      // optional uint32 wide = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tall;
        break;
      }
      
      // optional uint32 tall = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPopupHTMLWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional uint32 x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }
  
  // optional uint32 y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }
  
  // optional uint32 wide = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wide(), output);
  }
  
  // optional uint32 tall = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPopupHTMLWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional uint32 x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }
  
  // optional uint32 y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }
  
  // optional uint32 wide = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wide(), target);
  }
  
  // optional uint32 tall = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPopupHTMLWindow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional uint32 wide = 5;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }
    
    // optional uint32 tall = 6;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopupHTMLWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPopupHTMLWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPopupHTMLWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindow::MergeFrom(const CMsgPopupHTMLWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_y(from.y());
    }
    if (from._has_bit(4)) {
      set_wide(from.wide());
    }
    if (from._has_bit(5)) {
      set_tall(from.tall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPopupHTMLWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindow::CopyFrom(const CMsgPopupHTMLWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindow::IsInitialized() const {
  
  return true;
}

void CMsgPopupHTMLWindow::Swap(CMsgPopupHTMLWindow* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(wide_, other->wide_);
    std::swap(tall_, other->tall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPopupHTMLWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPopupHTMLWindow_descriptor_;
  metadata.reflection = CMsgPopupHTMLWindow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPopupHTMLWindowResponse::kBrowserHandleFieldNumber;
const int CMsgPopupHTMLWindowResponse::kBAllowFieldNumber;
#endif  // !_MSC_VER

CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPopupHTMLWindowResponse::InitAsDefaultInstance() {
}

CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse(const CMsgPopupHTMLWindowResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPopupHTMLWindowResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ballow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPopupHTMLWindowResponse::~CMsgPopupHTMLWindowResponse() {
  SharedDtor();
}

void CMsgPopupHTMLWindowResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPopupHTMLWindowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopupHTMLWindowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPopupHTMLWindowResponse_descriptor_;
}

const CMsgPopupHTMLWindowResponse& CMsgPopupHTMLWindowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgPopupHTMLWindowResponse* CMsgPopupHTMLWindowResponse::default_instance_ = NULL;

CMsgPopupHTMLWindowResponse* CMsgPopupHTMLWindowResponse::New() const {
  return new CMsgPopupHTMLWindowResponse;
}

void CMsgPopupHTMLWindowResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    ballow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPopupHTMLWindowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bAllow;
        break;
      }
      
      // optional bool bAllow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAllow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPopupHTMLWindowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool bAllow = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPopupHTMLWindowResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool bAllow = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPopupHTMLWindowResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool bAllow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPopupHTMLWindowResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPopupHTMLWindowResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const CMsgPopupHTMLWindowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_ballow(from.ballow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const CMsgPopupHTMLWindowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindowResponse::IsInitialized() const {
  
  return true;
}

void CMsgPopupHTMLWindowResponse::Swap(CMsgPopupHTMLWindowResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(ballow_, other->ballow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPopupHTMLWindowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPopupHTMLWindowResponse_descriptor_;
  metadata.reflection = CMsgPopupHTMLWindowResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgSetHTMLTitle::_default_title_;
#ifndef _MSC_VER
const int CMsgSetHTMLTitle::kBrowserHandleFieldNumber;
const int CMsgSetHTMLTitle::kTitleFieldNumber;
#endif  // !_MSC_VER

CMsgSetHTMLTitle::CMsgSetHTMLTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetHTMLTitle::InitAsDefaultInstance() {
}

CMsgSetHTMLTitle::CMsgSetHTMLTitle(const CMsgSetHTMLTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetHTMLTitle::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  title_ = const_cast< ::std::string*>(&_default_title_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetHTMLTitle::~CMsgSetHTMLTitle() {
  SharedDtor();
}

void CMsgSetHTMLTitle::SharedDtor() {
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSetHTMLTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetHTMLTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetHTMLTitle_descriptor_;
}

const CMsgSetHTMLTitle& CMsgSetHTMLTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetHTMLTitle* CMsgSetHTMLTitle::default_instance_ = NULL;

CMsgSetHTMLTitle* CMsgSetHTMLTitle::New() const {
  return new CMsgSetHTMLTitle;
}

void CMsgSetHTMLTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetHTMLTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetHTMLTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string title = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetHTMLTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string title = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetHTMLTitle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetHTMLTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetHTMLTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetHTMLTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetHTMLTitle::MergeFrom(const CMsgSetHTMLTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetHTMLTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHTMLTitle::CopyFrom(const CMsgSetHTMLTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHTMLTitle::IsInitialized() const {
  
  return true;
}

void CMsgSetHTMLTitle::Swap(CMsgSetHTMLTitle* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetHTMLTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetHTMLTitle_descriptor_;
  metadata.reflection = CMsgSetHTMLTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgLoadingResource::_default_url_;
#ifndef _MSC_VER
const int CMsgLoadingResource::kBrowserHandleFieldNumber;
const int CMsgLoadingResource::kUrlFieldNumber;
#endif  // !_MSC_VER

CMsgLoadingResource::CMsgLoadingResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLoadingResource::InitAsDefaultInstance() {
}

CMsgLoadingResource::CMsgLoadingResource(const CMsgLoadingResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLoadingResource::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLoadingResource::~CMsgLoadingResource() {
  SharedDtor();
}

void CMsgLoadingResource::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgLoadingResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLoadingResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLoadingResource_descriptor_;
}

const CMsgLoadingResource& CMsgLoadingResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgLoadingResource* CMsgLoadingResource::default_instance_ = NULL;

CMsgLoadingResource* CMsgLoadingResource::New() const {
  return new CMsgLoadingResource;
}

void CMsgLoadingResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLoadingResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLoadingResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLoadingResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLoadingResource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLoadingResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLoadingResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLoadingResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLoadingResource::MergeFrom(const CMsgLoadingResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLoadingResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadingResource::CopyFrom(const CMsgLoadingResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadingResource::IsInitialized() const {
  
  return true;
}

void CMsgLoadingResource::Swap(CMsgLoadingResource* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLoadingResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLoadingResource_descriptor_;
  metadata.reflection = CMsgLoadingResource_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgStatusText::_default_text_;
#ifndef _MSC_VER
const int CMsgStatusText::kBrowserHandleFieldNumber;
const int CMsgStatusText::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgStatusText::CMsgStatusText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStatusText::InitAsDefaultInstance() {
}

CMsgStatusText::CMsgStatusText(const CMsgStatusText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStatusText::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStatusText::~CMsgStatusText() {
  SharedDtor();
}

void CMsgStatusText::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgStatusText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStatusText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStatusText_descriptor_;
}

const CMsgStatusText& CMsgStatusText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgStatusText* CMsgStatusText::default_instance_ = NULL;

CMsgStatusText* CMsgStatusText::New() const {
  return new CMsgStatusText;
}

void CMsgStatusText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStatusText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStatusText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStatusText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStatusText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStatusText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStatusText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStatusText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStatusText::MergeFrom(const CMsgStatusText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStatusText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStatusText::CopyFrom(const CMsgStatusText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStatusText::IsInitialized() const {
  
  return true;
}

void CMsgStatusText::Swap(CMsgStatusText* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStatusText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStatusText_descriptor_;
  metadata.reflection = CMsgStatusText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetCursor::kBrowserHandleFieldNumber;
const int CMsgSetCursor::kCursorFieldNumber;
const int CMsgSetCursor::kDataFieldNumber;
const int CMsgSetCursor::kWideFieldNumber;
const int CMsgSetCursor::kTallFieldNumber;
const int CMsgSetCursor::kXhotspotFieldNumber;
const int CMsgSetCursor::kYhotspotFieldNumber;
#endif  // !_MSC_VER

CMsgSetCursor::CMsgSetCursor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetCursor::InitAsDefaultInstance() {
}

CMsgSetCursor::CMsgSetCursor(const CMsgSetCursor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetCursor::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  cursor_ = 0u;
  data_ = 0u;
  wide_ = 0u;
  tall_ = 0u;
  xhotspot_ = 0u;
  yhotspot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetCursor::~CMsgSetCursor() {
  SharedDtor();
}

void CMsgSetCursor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetCursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetCursor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetCursor_descriptor_;
}

const CMsgSetCursor& CMsgSetCursor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetCursor* CMsgSetCursor::default_instance_ = NULL;

CMsgSetCursor* CMsgSetCursor::New() const {
  return new CMsgSetCursor;
}

void CMsgSetCursor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    cursor_ = 0u;
    data_ = 0u;
    wide_ = 0u;
    tall_ = 0u;
    xhotspot_ = 0u;
    yhotspot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cursor;
        break;
      }
      
      // optional uint32 cursor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }
      
      // optional uint32 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wide;
        break;
      }
      
      // optional uint32 wide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tall;
        break;
      }
      
      // optional uint32 tall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xhotspot;
        break;
      }
      
      // optional uint32 xhotspot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xhotspot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xhotspot_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_yhotspot;
        break;
      }
      
      // optional uint32 yhotspot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yhotspot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yhotspot_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 cursor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cursor(), output);
  }
  
  // optional uint32 data = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data(), output);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }
  
  // optional uint32 xhotspot = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->xhotspot(), output);
  }
  
  // optional uint32 yhotspot = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->yhotspot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetCursor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 cursor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cursor(), target);
  }
  
  // optional uint32 data = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data(), target);
  }
  
  // optional uint32 wide = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }
  
  // optional uint32 tall = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }
  
  // optional uint32 xhotspot = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->xhotspot(), target);
  }
  
  // optional uint32 yhotspot = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->yhotspot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetCursor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 cursor = 2;
    if (has_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor());
    }
    
    // optional uint32 data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }
    
    // optional uint32 wide = 4;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }
    
    // optional uint32 tall = 5;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }
    
    // optional uint32 xhotspot = 6;
    if (has_xhotspot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xhotspot());
    }
    
    // optional uint32 yhotspot = 7;
    if (has_yhotspot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yhotspot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetCursor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetCursor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetCursor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetCursor::MergeFrom(const CMsgSetCursor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_cursor(from.cursor());
    }
    if (from._has_bit(2)) {
      set_data(from.data());
    }
    if (from._has_bit(3)) {
      set_wide(from.wide());
    }
    if (from._has_bit(4)) {
      set_tall(from.tall());
    }
    if (from._has_bit(5)) {
      set_xhotspot(from.xhotspot());
    }
    if (from._has_bit(6)) {
      set_yhotspot(from.yhotspot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetCursor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCursor::CopyFrom(const CMsgSetCursor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCursor::IsInitialized() const {
  
  return true;
}

void CMsgSetCursor::Swap(CMsgSetCursor* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(cursor_, other->cursor_);
    std::swap(data_, other->data_);
    std::swap(wide_, other->wide_);
    std::swap(tall_, other->tall_);
    std::swap(xhotspot_, other->xhotspot_);
    std::swap(yhotspot_, other->yhotspot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetCursor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetCursor_descriptor_;
  metadata.reflection = CMsgSetCursor_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgFileLoadDialog::_default_title_;
const ::std::string CMsgFileLoadDialog::_default_initialfile_;
#ifndef _MSC_VER
const int CMsgFileLoadDialog::kBrowserHandleFieldNumber;
const int CMsgFileLoadDialog::kTitleFieldNumber;
const int CMsgFileLoadDialog::kInitialFileFieldNumber;
#endif  // !_MSC_VER

CMsgFileLoadDialog::CMsgFileLoadDialog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFileLoadDialog::InitAsDefaultInstance() {
}

CMsgFileLoadDialog::CMsgFileLoadDialog(const CMsgFileLoadDialog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFileLoadDialog::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  title_ = const_cast< ::std::string*>(&_default_title_);
  initialfile_ = const_cast< ::std::string*>(&_default_initialfile_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFileLoadDialog::~CMsgFileLoadDialog() {
  SharedDtor();
}

void CMsgFileLoadDialog::SharedDtor() {
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (initialfile_ != &_default_initialfile_) {
    delete initialfile_;
  }
  if (this != default_instance_) {
  }
}

void CMsgFileLoadDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFileLoadDialog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFileLoadDialog_descriptor_;
}

const CMsgFileLoadDialog& CMsgFileLoadDialog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFileLoadDialog* CMsgFileLoadDialog::default_instance_ = NULL;

CMsgFileLoadDialog* CMsgFileLoadDialog::New() const {
  return new CMsgFileLoadDialog;
}

void CMsgFileLoadDialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    if (_has_bit(2)) {
      if (initialfile_ != &_default_initialfile_) {
        initialfile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFileLoadDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_initialFile;
        break;
      }
      
      // optional string initialFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initialFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialfile().data(), this->initialfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFileLoadDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string title = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional string initialFile = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialfile().data(), this->initialfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->initialfile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFileLoadDialog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string title = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional string initialFile = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialfile().data(), this->initialfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->initialfile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFileLoadDialog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string initialFile = 3;
    if (has_initialfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialfile());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFileLoadDialog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFileLoadDialog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFileLoadDialog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialog::MergeFrom(const CMsgFileLoadDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_title(from.title());
    }
    if (from._has_bit(2)) {
      set_initialfile(from.initialfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFileLoadDialog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialog::CopyFrom(const CMsgFileLoadDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialog::IsInitialized() const {
  
  return true;
}

void CMsgFileLoadDialog::Swap(CMsgFileLoadDialog* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(title_, other->title_);
    std::swap(initialfile_, other->initialfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFileLoadDialog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFileLoadDialog_descriptor_;
  metadata.reflection = CMsgFileLoadDialog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFileLoadDialogResponse::kBrowserHandleFieldNumber;
const int CMsgFileLoadDialogResponse::kFilesFieldNumber;
#endif  // !_MSC_VER

CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFileLoadDialogResponse::InitAsDefaultInstance() {
}

CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse(const CMsgFileLoadDialogResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFileLoadDialogResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFileLoadDialogResponse::~CMsgFileLoadDialogResponse() {
  SharedDtor();
}

void CMsgFileLoadDialogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFileLoadDialogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFileLoadDialogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFileLoadDialogResponse_descriptor_;
}

const CMsgFileLoadDialogResponse& CMsgFileLoadDialogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFileLoadDialogResponse* CMsgFileLoadDialogResponse::default_instance_ = NULL;

CMsgFileLoadDialogResponse* CMsgFileLoadDialogResponse::New() const {
  return new CMsgFileLoadDialogResponse;
}

void CMsgFileLoadDialogResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFileLoadDialogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        break;
      }
      
      // repeated string files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->files(0).data(), this->files(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFileLoadDialogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // repeated string files = 2;
  for (int i = 0; i < this->files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->files(i).data(), this->files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->files(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFileLoadDialogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // repeated string files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->files(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFileLoadDialogResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  // repeated string files = 2;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFileLoadDialogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFileLoadDialogResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFileLoadDialogResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialogResponse::MergeFrom(const CMsgFileLoadDialogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFileLoadDialogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialogResponse::CopyFrom(const CMsgFileLoadDialogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialogResponse::IsInitialized() const {
  
  return true;
}

void CMsgFileLoadDialogResponse::Swap(CMsgFileLoadDialogResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFileLoadDialogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFileLoadDialogResponse_descriptor_;
  metadata.reflection = CMsgFileLoadDialogResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgShowToolTip::_default_text_;
#ifndef _MSC_VER
const int CMsgShowToolTip::kBrowserHandleFieldNumber;
const int CMsgShowToolTip::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgShowToolTip::CMsgShowToolTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgShowToolTip::InitAsDefaultInstance() {
}

CMsgShowToolTip::CMsgShowToolTip(const CMsgShowToolTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgShowToolTip::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgShowToolTip::~CMsgShowToolTip() {
  SharedDtor();
}

void CMsgShowToolTip::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgShowToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgShowToolTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgShowToolTip_descriptor_;
}

const CMsgShowToolTip& CMsgShowToolTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgShowToolTip* CMsgShowToolTip::default_instance_ = NULL;

CMsgShowToolTip* CMsgShowToolTip::New() const {
  return new CMsgShowToolTip;
}

void CMsgShowToolTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgShowToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgShowToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgShowToolTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgShowToolTip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgShowToolTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgShowToolTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgShowToolTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgShowToolTip::MergeFrom(const CMsgShowToolTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgShowToolTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowToolTip::CopyFrom(const CMsgShowToolTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowToolTip::IsInitialized() const {
  
  return true;
}

void CMsgShowToolTip::Swap(CMsgShowToolTip* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgShowToolTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgShowToolTip_descriptor_;
  metadata.reflection = CMsgShowToolTip_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgUpdateToolTip::_default_text_;
#ifndef _MSC_VER
const int CMsgUpdateToolTip::kBrowserHandleFieldNumber;
const int CMsgUpdateToolTip::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateToolTip::CMsgUpdateToolTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateToolTip::InitAsDefaultInstance() {
}

CMsgUpdateToolTip::CMsgUpdateToolTip(const CMsgUpdateToolTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateToolTip::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateToolTip::~CMsgUpdateToolTip() {
  SharedDtor();
}

void CMsgUpdateToolTip::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgUpdateToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateToolTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateToolTip_descriptor_;
}

const CMsgUpdateToolTip& CMsgUpdateToolTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgUpdateToolTip* CMsgUpdateToolTip::default_instance_ = NULL;

CMsgUpdateToolTip* CMsgUpdateToolTip::New() const {
  return new CMsgUpdateToolTip;
}

void CMsgUpdateToolTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateToolTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateToolTip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateToolTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateToolTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateToolTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateToolTip::MergeFrom(const CMsgUpdateToolTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateToolTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateToolTip::CopyFrom(const CMsgUpdateToolTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateToolTip::IsInitialized() const {
  
  return true;
}

void CMsgUpdateToolTip::Swap(CMsgUpdateToolTip* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateToolTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateToolTip_descriptor_;
  metadata.reflection = CMsgUpdateToolTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHideToolTip::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgHideToolTip::CMsgHideToolTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgHideToolTip::InitAsDefaultInstance() {
}

CMsgHideToolTip::CMsgHideToolTip(const CMsgHideToolTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgHideToolTip::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHideToolTip::~CMsgHideToolTip() {
  SharedDtor();
}

void CMsgHideToolTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHideToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHideToolTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHideToolTip_descriptor_;
}

const CMsgHideToolTip& CMsgHideToolTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgHideToolTip* CMsgHideToolTip::default_instance_ = NULL;

CMsgHideToolTip* CMsgHideToolTip::New() const {
  return new CMsgHideToolTip;
}

void CMsgHideToolTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHideToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgHideToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgHideToolTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgHideToolTip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHideToolTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHideToolTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHideToolTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHideToolTip::MergeFrom(const CMsgHideToolTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHideToolTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHideToolTip::CopyFrom(const CMsgHideToolTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHideToolTip::IsInitialized() const {
  
  return true;
}

void CMsgHideToolTip::Swap(CMsgHideToolTip* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHideToolTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHideToolTip_descriptor_;
  metadata.reflection = CMsgHideToolTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSearchResults::kBrowserHandleFieldNumber;
const int CMsgSearchResults::kActiveMatchFieldNumber;
const int CMsgSearchResults::kResultsFieldNumber;
#endif  // !_MSC_VER

CMsgSearchResults::CMsgSearchResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSearchResults::InitAsDefaultInstance() {
}

CMsgSearchResults::CMsgSearchResults(const CMsgSearchResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSearchResults::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  activematch_ = 0;
  results_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSearchResults::~CMsgSearchResults() {
  SharedDtor();
}

void CMsgSearchResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSearchResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSearchResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSearchResults_descriptor_;
}

const CMsgSearchResults& CMsgSearchResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSearchResults* CMsgSearchResults::default_instance_ = NULL;

CMsgSearchResults* CMsgSearchResults::New() const {
  return new CMsgSearchResults;
}

void CMsgSearchResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    activematch_ = 0;
    results_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activeMatch;
        break;
      }
      
      // optional int32 activeMatch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeMatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activematch_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_results;
        break;
      }
      
      // optional int32 results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &results_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional int32 activeMatch = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activematch(), output);
  }
  
  // optional int32 results = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->results(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSearchResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional int32 activeMatch = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activematch(), target);
  }
  
  // optional int32 results = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->results(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSearchResults::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional int32 activeMatch = 2;
    if (has_activematch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activematch());
    }
    
    // optional int32 results = 3;
    if (has_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->results());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSearchResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSearchResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSearchResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSearchResults::MergeFrom(const CMsgSearchResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_activematch(from.activematch());
    }
    if (from._has_bit(2)) {
      set_results(from.results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSearchResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSearchResults::CopyFrom(const CMsgSearchResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSearchResults::IsInitialized() const {
  
  return true;
}

void CMsgSearchResults::Swap(CMsgSearchResults* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(activematch_, other->activematch_);
    std::swap(results_, other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSearchResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSearchResults_descriptor_;
  metadata.reflection = CMsgSearchResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClose::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgClose::CMsgClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClose::InitAsDefaultInstance() {
}

CMsgClose::CMsgClose(const CMsgClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClose::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClose::~CMsgClose() {
  SharedDtor();
}

void CMsgClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClose_descriptor_;
}

const CMsgClose& CMsgClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgClose* CMsgClose::default_instance_ = NULL;

CMsgClose* CMsgClose::New() const {
  return new CMsgClose;
}

void CMsgClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClose::MergeFrom(const CMsgClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClose::CopyFrom(const CMsgClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClose::IsInitialized() const {
  
  return true;
}

void CMsgClose::Swap(CMsgClose* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClose_descriptor_;
  metadata.reflection = CMsgClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgNeedsPaint::kBrowserHandleFieldNumber;
const int CMsgNeedsPaint::kRgbaFieldNumber;
const int CMsgNeedsPaint::kWideFieldNumber;
const int CMsgNeedsPaint::kTallFieldNumber;
const int CMsgNeedsPaint::kTextureidFieldNumber;
const int CMsgNeedsPaint::kUpdatexFieldNumber;
const int CMsgNeedsPaint::kUpdateyFieldNumber;
const int CMsgNeedsPaint::kUpdatewideFieldNumber;
const int CMsgNeedsPaint::kUpdatetallFieldNumber;
const int CMsgNeedsPaint::kScrollxFieldNumber;
const int CMsgNeedsPaint::kScrollyFieldNumber;
const int CMsgNeedsPaint::kComboboxRgbaFieldNumber;
const int CMsgNeedsPaint::kComboboxWideFieldNumber;
const int CMsgNeedsPaint::kComboboxTallFieldNumber;
const int CMsgNeedsPaint::kPageserialFieldNumber;
#endif  // !_MSC_VER

CMsgNeedsPaint::CMsgNeedsPaint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNeedsPaint::InitAsDefaultInstance() {
}

CMsgNeedsPaint::CMsgNeedsPaint(const CMsgNeedsPaint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNeedsPaint::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  rgba_ = GOOGLE_ULONGLONG(0);
  wide_ = 0u;
  tall_ = 0u;
  textureid_ = 0u;
  updatex_ = 0u;
  updatey_ = 0u;
  updatewide_ = 0u;
  updatetall_ = 0u;
  scrollx_ = 0u;
  scrolly_ = 0u;
  combobox_rgba_ = GOOGLE_ULONGLONG(0);
  combobox_wide_ = 0u;
  combobox_tall_ = 0u;
  pageserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNeedsPaint::~CMsgNeedsPaint() {
  SharedDtor();
}

void CMsgNeedsPaint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgNeedsPaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNeedsPaint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNeedsPaint_descriptor_;
}

const CMsgNeedsPaint& CMsgNeedsPaint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgNeedsPaint* CMsgNeedsPaint::default_instance_ = NULL;

CMsgNeedsPaint* CMsgNeedsPaint::New() const {
  return new CMsgNeedsPaint;
}

void CMsgNeedsPaint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    rgba_ = GOOGLE_ULONGLONG(0);
    wide_ = 0u;
    tall_ = 0u;
    textureid_ = 0u;
    updatex_ = 0u;
    updatey_ = 0u;
    updatewide_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    updatetall_ = 0u;
    scrollx_ = 0u;
    scrolly_ = 0u;
    combobox_rgba_ = GOOGLE_ULONGLONG(0);
    combobox_wide_ = 0u;
    combobox_tall_ = 0u;
    pageserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNeedsPaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rgba;
        break;
      }
      
      // optional uint64 rgba = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rgba_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wide;
        break;
      }
      
      // optional uint32 wide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tall;
        break;
      }
      
      // optional uint32 tall = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_textureid;
        break;
      }
      
      // optional uint32 textureid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textureid_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_updatex;
        break;
      }
      
      // optional uint32 updatex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatex_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_updatey;
        break;
      }
      
      // optional uint32 updatey = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatey_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_updatewide;
        break;
      }
      
      // optional uint32 updatewide = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatewide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatewide_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_updatetall;
        break;
      }
      
      // optional uint32 updatetall = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatetall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetall_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_scrollx;
        break;
      }
      
      // optional uint32 scrollx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrollx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrollx_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_scrolly;
        break;
      }
      
      // optional uint32 scrolly = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrolly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrolly_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_combobox_rgba;
        break;
      }
      
      // optional uint64 combobox_rgba = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combobox_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &combobox_rgba_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_combobox_wide;
        break;
      }
      
      // optional uint32 combobox_wide = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combobox_wide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combobox_wide_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_combobox_tall;
        break;
      }
      
      // optional uint32 combobox_tall = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combobox_tall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combobox_tall_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pageserial;
        break;
      }
      
      // optional uint32 pageserial = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgNeedsPaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint64 rgba = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rgba(), output);
  }
  
  // optional uint32 wide = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wide(), output);
  }
  
  // optional uint32 tall = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tall(), output);
  }
  
  // optional uint32 textureid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->textureid(), output);
  }
  
  // optional uint32 updatex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->updatex(), output);
  }
  
  // optional uint32 updatey = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->updatey(), output);
  }
  
  // optional uint32 updatewide = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->updatewide(), output);
  }
  
  // optional uint32 updatetall = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->updatetall(), output);
  }
  
  // optional uint32 scrollx = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->scrollx(), output);
  }
  
  // optional uint32 scrolly = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->scrolly(), output);
  }
  
  // optional uint64 combobox_rgba = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->combobox_rgba(), output);
  }
  
  // optional uint32 combobox_wide = 13 [default = 0];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->combobox_wide(), output);
  }
  
  // optional uint32 combobox_tall = 14 [default = 0];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->combobox_tall(), output);
  }
  
  // optional uint32 pageserial = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pageserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNeedsPaint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint64 rgba = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rgba(), target);
  }
  
  // optional uint32 wide = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wide(), target);
  }
  
  // optional uint32 tall = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tall(), target);
  }
  
  // optional uint32 textureid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->textureid(), target);
  }
  
  // optional uint32 updatex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->updatex(), target);
  }
  
  // optional uint32 updatey = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->updatey(), target);
  }
  
  // optional uint32 updatewide = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->updatewide(), target);
  }
  
  // optional uint32 updatetall = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->updatetall(), target);
  }
  
  // optional uint32 scrollx = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->scrollx(), target);
  }
  
  // optional uint32 scrolly = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->scrolly(), target);
  }
  
  // optional uint64 combobox_rgba = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->combobox_rgba(), target);
  }
  
  // optional uint32 combobox_wide = 13 [default = 0];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->combobox_wide(), target);
  }
  
  // optional uint32 combobox_tall = 14 [default = 0];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->combobox_tall(), target);
  }
  
  // optional uint32 pageserial = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pageserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNeedsPaint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint64 rgba = 2;
    if (has_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rgba());
    }
    
    // optional uint32 wide = 3;
    if (has_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }
    
    // optional uint32 tall = 4;
    if (has_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }
    
    // optional uint32 textureid = 5;
    if (has_textureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textureid());
    }
    
    // optional uint32 updatex = 6;
    if (has_updatex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatex());
    }
    
    // optional uint32 updatey = 7;
    if (has_updatey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatey());
    }
    
    // optional uint32 updatewide = 8;
    if (has_updatewide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatewide());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 updatetall = 9;
    if (has_updatetall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetall());
    }
    
    // optional uint32 scrollx = 10;
    if (has_scrollx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrollx());
    }
    
    // optional uint32 scrolly = 11;
    if (has_scrolly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrolly());
    }
    
    // optional uint64 combobox_rgba = 12 [default = 0];
    if (has_combobox_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->combobox_rgba());
    }
    
    // optional uint32 combobox_wide = 13 [default = 0];
    if (has_combobox_wide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combobox_wide());
    }
    
    // optional uint32 combobox_tall = 14 [default = 0];
    if (has_combobox_tall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combobox_tall());
    }
    
    // optional uint32 pageserial = 15;
    if (has_pageserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNeedsPaint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNeedsPaint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNeedsPaint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNeedsPaint::MergeFrom(const CMsgNeedsPaint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_rgba(from.rgba());
    }
    if (from._has_bit(2)) {
      set_wide(from.wide());
    }
    if (from._has_bit(3)) {
      set_tall(from.tall());
    }
    if (from._has_bit(4)) {
      set_textureid(from.textureid());
    }
    if (from._has_bit(5)) {
      set_updatex(from.updatex());
    }
    if (from._has_bit(6)) {
      set_updatey(from.updatey());
    }
    if (from._has_bit(7)) {
      set_updatewide(from.updatewide());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_updatetall(from.updatetall());
    }
    if (from._has_bit(9)) {
      set_scrollx(from.scrollx());
    }
    if (from._has_bit(10)) {
      set_scrolly(from.scrolly());
    }
    if (from._has_bit(11)) {
      set_combobox_rgba(from.combobox_rgba());
    }
    if (from._has_bit(12)) {
      set_combobox_wide(from.combobox_wide());
    }
    if (from._has_bit(13)) {
      set_combobox_tall(from.combobox_tall());
    }
    if (from._has_bit(14)) {
      set_pageserial(from.pageserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNeedsPaint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsPaint::CopyFrom(const CMsgNeedsPaint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsPaint::IsInitialized() const {
  
  return true;
}

void CMsgNeedsPaint::Swap(CMsgNeedsPaint* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(rgba_, other->rgba_);
    std::swap(wide_, other->wide_);
    std::swap(tall_, other->tall_);
    std::swap(textureid_, other->textureid_);
    std::swap(updatex_, other->updatex_);
    std::swap(updatey_, other->updatey_);
    std::swap(updatewide_, other->updatewide_);
    std::swap(updatetall_, other->updatetall_);
    std::swap(scrollx_, other->scrollx_);
    std::swap(scrolly_, other->scrolly_);
    std::swap(combobox_rgba_, other->combobox_rgba_);
    std::swap(combobox_wide_, other->combobox_wide_);
    std::swap(combobox_tall_, other->combobox_tall_);
    std::swap(pageserial_, other->pageserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNeedsPaint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNeedsPaint_descriptor_;
  metadata.reflection = CMsgNeedsPaint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgNeedsPaintResponse::kBrowserHandleFieldNumber;
const int CMsgNeedsPaintResponse::kTextureidFieldNumber;
#endif  // !_MSC_VER

CMsgNeedsPaintResponse::CMsgNeedsPaintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNeedsPaintResponse::InitAsDefaultInstance() {
}

CMsgNeedsPaintResponse::CMsgNeedsPaintResponse(const CMsgNeedsPaintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNeedsPaintResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  textureid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNeedsPaintResponse::~CMsgNeedsPaintResponse() {
  SharedDtor();
}

void CMsgNeedsPaintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgNeedsPaintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNeedsPaintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNeedsPaintResponse_descriptor_;
}

const CMsgNeedsPaintResponse& CMsgNeedsPaintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgNeedsPaintResponse* CMsgNeedsPaintResponse::default_instance_ = NULL;

CMsgNeedsPaintResponse* CMsgNeedsPaintResponse::New() const {
  return new CMsgNeedsPaintResponse;
}

void CMsgNeedsPaintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    textureid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNeedsPaintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_textureid;
        break;
      }
      
      // optional uint32 textureid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textureid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgNeedsPaintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 textureid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->textureid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNeedsPaintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 textureid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->textureid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNeedsPaintResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 textureid = 2;
    if (has_textureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textureid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNeedsPaintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNeedsPaintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNeedsPaintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNeedsPaintResponse::MergeFrom(const CMsgNeedsPaintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_textureid(from.textureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNeedsPaintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsPaintResponse::CopyFrom(const CMsgNeedsPaintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsPaintResponse::IsInitialized() const {
  
  return true;
}

void CMsgNeedsPaintResponse::Swap(CMsgNeedsPaintResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(textureid_, other->textureid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNeedsPaintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNeedsPaintResponse_descriptor_;
  metadata.reflection = CMsgNeedsPaintResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGetZoom::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgGetZoom::CMsgGetZoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGetZoom::InitAsDefaultInstance() {
}

CMsgGetZoom::CMsgGetZoom(const CMsgGetZoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGetZoom::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGetZoom::~CMsgGetZoom() {
  SharedDtor();
}

void CMsgGetZoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGetZoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetZoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGetZoom_descriptor_;
}

const CMsgGetZoom& CMsgGetZoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgGetZoom* CMsgGetZoom::default_instance_ = NULL;

CMsgGetZoom* CMsgGetZoom::New() const {
  return new CMsgGetZoom;
}

void CMsgGetZoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGetZoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGetZoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGetZoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGetZoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetZoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGetZoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGetZoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGetZoom::MergeFrom(const CMsgGetZoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGetZoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoom::CopyFrom(const CMsgGetZoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoom::IsInitialized() const {
  
  return true;
}

void CMsgGetZoom::Swap(CMsgGetZoom* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGetZoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGetZoom_descriptor_;
  metadata.reflection = CMsgGetZoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGetZoomResponse::kBrowserHandleFieldNumber;
const int CMsgGetZoomResponse::kZoomFieldNumber;
#endif  // !_MSC_VER

CMsgGetZoomResponse::CMsgGetZoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGetZoomResponse::InitAsDefaultInstance() {
}

CMsgGetZoomResponse::CMsgGetZoomResponse(const CMsgGetZoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGetZoomResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  zoom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGetZoomResponse::~CMsgGetZoomResponse() {
  SharedDtor();
}

void CMsgGetZoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGetZoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetZoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGetZoomResponse_descriptor_;
}

const CMsgGetZoomResponse& CMsgGetZoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgGetZoomResponse* CMsgGetZoomResponse::default_instance_ = NULL;

CMsgGetZoomResponse* CMsgGetZoomResponse::New() const {
  return new CMsgGetZoomResponse;
}

void CMsgGetZoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    zoom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGetZoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_zoom;
        break;
      }
      
      // optional float zoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGetZoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional float zoom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->zoom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGetZoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional float zoom = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->zoom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGetZoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional float zoom = 2;
    if (has_zoom()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetZoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGetZoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGetZoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGetZoomResponse::MergeFrom(const CMsgGetZoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_zoom(from.zoom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGetZoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoomResponse::CopyFrom(const CMsgGetZoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoomResponse::IsInitialized() const {
  
  return true;
}

void CMsgGetZoomResponse::Swap(CMsgGetZoomResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(zoom_, other->zoom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGetZoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGetZoomResponse_descriptor_;
  metadata.reflection = CMsgGetZoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLinkAtPosition::kBrowserHandleFieldNumber;
const int CMsgLinkAtPosition::kXFieldNumber;
const int CMsgLinkAtPosition::kYFieldNumber;
#endif  // !_MSC_VER

CMsgLinkAtPosition::CMsgLinkAtPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLinkAtPosition::InitAsDefaultInstance() {
}

CMsgLinkAtPosition::CMsgLinkAtPosition(const CMsgLinkAtPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLinkAtPosition::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLinkAtPosition::~CMsgLinkAtPosition() {
  SharedDtor();
}

void CMsgLinkAtPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLinkAtPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLinkAtPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLinkAtPosition_descriptor_;
}

const CMsgLinkAtPosition& CMsgLinkAtPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgLinkAtPosition* CMsgLinkAtPosition::default_instance_ = NULL;

CMsgLinkAtPosition* CMsgLinkAtPosition::New() const {
  return new CMsgLinkAtPosition;
}

void CMsgLinkAtPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLinkAtPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLinkAtPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLinkAtPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLinkAtPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLinkAtPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLinkAtPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLinkAtPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLinkAtPosition::MergeFrom(const CMsgLinkAtPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLinkAtPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPosition::CopyFrom(const CMsgLinkAtPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPosition::IsInitialized() const {
  
  return true;
}

void CMsgLinkAtPosition::Swap(CMsgLinkAtPosition* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLinkAtPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLinkAtPosition_descriptor_;
  metadata.reflection = CMsgLinkAtPosition_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgLinkAtPositionResponse::_default_url_;
#ifndef _MSC_VER
const int CMsgLinkAtPositionResponse::kBrowserHandleFieldNumber;
const int CMsgLinkAtPositionResponse::kXFieldNumber;
const int CMsgLinkAtPositionResponse::kYFieldNumber;
const int CMsgLinkAtPositionResponse::kUrlFieldNumber;
const int CMsgLinkAtPositionResponse::kBlivelinkFieldNumber;
const int CMsgLinkAtPositionResponse::kBinputFieldNumber;
#endif  // !_MSC_VER

CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLinkAtPositionResponse::InitAsDefaultInstance() {
}

CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse(const CMsgLinkAtPositionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLinkAtPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  blivelink_ = false;
  binput_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLinkAtPositionResponse::~CMsgLinkAtPositionResponse() {
  SharedDtor();
}

void CMsgLinkAtPositionResponse::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgLinkAtPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLinkAtPositionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLinkAtPositionResponse_descriptor_;
}

const CMsgLinkAtPositionResponse& CMsgLinkAtPositionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgLinkAtPositionResponse* CMsgLinkAtPositionResponse::default_instance_ = NULL;

CMsgLinkAtPositionResponse* CMsgLinkAtPositionResponse::New() const {
  return new CMsgLinkAtPositionResponse;
}

void CMsgLinkAtPositionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
    if (_has_bit(3)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    blivelink_ = false;
    binput_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLinkAtPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }
      
      // optional string url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blivelink;
        break;
      }
      
      // optional bool blivelink = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blivelink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blivelink_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_binput;
        break;
      }
      
      // optional bool binput = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binput_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLinkAtPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // optional string url = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url(), output);
  }
  
  // optional bool blivelink = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blivelink(), output);
  }
  
  // optional bool binput = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->binput(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLinkAtPositionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // optional string url = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }
  
  // optional bool blivelink = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blivelink(), target);
  }
  
  // optional bool binput = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->binput(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLinkAtPositionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional bool blivelink = 5;
    if (has_blivelink()) {
      total_size += 1 + 1;
    }
    
    // optional bool binput = 6;
    if (has_binput()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLinkAtPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLinkAtPositionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLinkAtPositionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLinkAtPositionResponse::MergeFrom(const CMsgLinkAtPositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_url(from.url());
    }
    if (from._has_bit(4)) {
      set_blivelink(from.blivelink());
    }
    if (from._has_bit(5)) {
      set_binput(from.binput());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLinkAtPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPositionResponse::CopyFrom(const CMsgLinkAtPositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPositionResponse::IsInitialized() const {
  
  return true;
}

void CMsgLinkAtPositionResponse::Swap(CMsgLinkAtPositionResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(url_, other->url_);
    std::swap(blivelink_, other->blivelink_);
    std::swap(binput_, other->binput_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLinkAtPositionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLinkAtPositionResponse_descriptor_;
  metadata.reflection = CMsgLinkAtPositionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgZoomToElementAtPosition::kBrowserHandleFieldNumber;
const int CMsgZoomToElementAtPosition::kXFieldNumber;
const int CMsgZoomToElementAtPosition::kYFieldNumber;
#endif  // !_MSC_VER

CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgZoomToElementAtPosition::InitAsDefaultInstance() {
}

CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition(const CMsgZoomToElementAtPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgZoomToElementAtPosition::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgZoomToElementAtPosition::~CMsgZoomToElementAtPosition() {
  SharedDtor();
}

void CMsgZoomToElementAtPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgZoomToElementAtPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgZoomToElementAtPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgZoomToElementAtPosition_descriptor_;
}

const CMsgZoomToElementAtPosition& CMsgZoomToElementAtPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgZoomToElementAtPosition* CMsgZoomToElementAtPosition::default_instance_ = NULL;

CMsgZoomToElementAtPosition* CMsgZoomToElementAtPosition::New() const {
  return new CMsgZoomToElementAtPosition;
}

void CMsgZoomToElementAtPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgZoomToElementAtPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgZoomToElementAtPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgZoomToElementAtPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgZoomToElementAtPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgZoomToElementAtPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgZoomToElementAtPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgZoomToElementAtPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPosition::MergeFrom(const CMsgZoomToElementAtPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgZoomToElementAtPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPosition::CopyFrom(const CMsgZoomToElementAtPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPosition::IsInitialized() const {
  
  return true;
}

void CMsgZoomToElementAtPosition::Swap(CMsgZoomToElementAtPosition* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgZoomToElementAtPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgZoomToElementAtPosition_descriptor_;
  metadata.reflection = CMsgZoomToElementAtPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgZoomToElementAtPositionResponse::kBrowserHandleFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kInitialXFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kInitialYFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kInitialWidthFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kInitialHeightFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kFinalXFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kFinalYFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kFinalWidthFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kFinalHeightFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kZoomFieldNumber;
#endif  // !_MSC_VER

CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgZoomToElementAtPositionResponse::InitAsDefaultInstance() {
}

CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse(const CMsgZoomToElementAtPositionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgZoomToElementAtPositionResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  initial_x_ = 0;
  initial_y_ = 0;
  initial_width_ = 0u;
  initial_height_ = 0u;
  final_x_ = 0;
  final_y_ = 0;
  final_width_ = 0u;
  final_height_ = 0u;
  zoom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgZoomToElementAtPositionResponse::~CMsgZoomToElementAtPositionResponse() {
  SharedDtor();
}

void CMsgZoomToElementAtPositionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgZoomToElementAtPositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgZoomToElementAtPositionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgZoomToElementAtPositionResponse_descriptor_;
}

const CMsgZoomToElementAtPositionResponse& CMsgZoomToElementAtPositionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgZoomToElementAtPositionResponse* CMsgZoomToElementAtPositionResponse::default_instance_ = NULL;

CMsgZoomToElementAtPositionResponse* CMsgZoomToElementAtPositionResponse::New() const {
  return new CMsgZoomToElementAtPositionResponse;
}

void CMsgZoomToElementAtPositionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    initial_x_ = 0;
    initial_y_ = 0;
    initial_width_ = 0u;
    initial_height_ = 0u;
    final_x_ = 0;
    final_y_ = 0;
    final_width_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    final_height_ = 0u;
    zoom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgZoomToElementAtPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_initial_x;
        break;
      }
      
      // optional sint32 initial_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &initial_x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_initial_y;
        break;
      }
      
      // optional sint32 initial_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &initial_y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_initial_width;
        break;
      }
      
      // optional uint32 initial_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_width_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initial_height;
        break;
      }
      
      // optional uint32 initial_height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_height_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_final_x;
        break;
      }
      
      // optional sint32 final_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &final_x_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_final_y;
        break;
      }
      
      // optional sint32 final_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &final_y_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_final_width;
        break;
      }
      
      // optional uint32 final_width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_width_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_final_height;
        break;
      }
      
      // optional uint32 final_height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_height_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_zoom;
        break;
      }
      
      // optional float zoom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgZoomToElementAtPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional sint32 initial_x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->initial_x(), output);
  }
  
  // optional sint32 initial_y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->initial_y(), output);
  }
  
  // optional uint32 initial_width = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->initial_width(), output);
  }
  
  // optional uint32 initial_height = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_height(), output);
  }
  
  // optional sint32 final_x = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->final_x(), output);
  }
  
  // optional sint32 final_y = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->final_y(), output);
  }
  
  // optional uint32 final_width = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->final_width(), output);
  }
  
  // optional uint32 final_height = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->final_height(), output);
  }
  
  // optional float zoom = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->zoom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgZoomToElementAtPositionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional sint32 initial_x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->initial_x(), target);
  }
  
  // optional sint32 initial_y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->initial_y(), target);
  }
  
  // optional uint32 initial_width = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->initial_width(), target);
  }
  
  // optional uint32 initial_height = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_height(), target);
  }
  
  // optional sint32 final_x = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->final_x(), target);
  }
  
  // optional sint32 final_y = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->final_y(), target);
  }
  
  // optional uint32 final_width = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->final_width(), target);
  }
  
  // optional uint32 final_height = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->final_height(), target);
  }
  
  // optional float zoom = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->zoom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgZoomToElementAtPositionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional sint32 initial_x = 2;
    if (has_initial_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->initial_x());
    }
    
    // optional sint32 initial_y = 3;
    if (has_initial_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->initial_y());
    }
    
    // optional uint32 initial_width = 4;
    if (has_initial_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_width());
    }
    
    // optional uint32 initial_height = 5;
    if (has_initial_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_height());
    }
    
    // optional sint32 final_x = 6;
    if (has_final_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->final_x());
    }
    
    // optional sint32 final_y = 7;
    if (has_final_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->final_y());
    }
    
    // optional uint32 final_width = 8;
    if (has_final_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->final_width());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 final_height = 9;
    if (has_final_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->final_height());
    }
    
    // optional float zoom = 10;
    if (has_zoom()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgZoomToElementAtPositionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgZoomToElementAtPositionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const CMsgZoomToElementAtPositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_initial_x(from.initial_x());
    }
    if (from._has_bit(2)) {
      set_initial_y(from.initial_y());
    }
    if (from._has_bit(3)) {
      set_initial_width(from.initial_width());
    }
    if (from._has_bit(4)) {
      set_initial_height(from.initial_height());
    }
    if (from._has_bit(5)) {
      set_final_x(from.final_x());
    }
    if (from._has_bit(6)) {
      set_final_y(from.final_y());
    }
    if (from._has_bit(7)) {
      set_final_width(from.final_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_final_height(from.final_height());
    }
    if (from._has_bit(9)) {
      set_zoom(from.zoom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const CMsgZoomToElementAtPositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPositionResponse::IsInitialized() const {
  
  return true;
}

void CMsgZoomToElementAtPositionResponse::Swap(CMsgZoomToElementAtPositionResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(initial_x_, other->initial_x_);
    std::swap(initial_y_, other->initial_y_);
    std::swap(initial_width_, other->initial_width_);
    std::swap(initial_height_, other->initial_height_);
    std::swap(final_x_, other->final_x_);
    std::swap(final_y_, other->final_y_);
    std::swap(final_width_, other->final_width_);
    std::swap(final_height_, other->final_height_);
    std::swap(zoom_, other->zoom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgZoomToElementAtPositionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgZoomToElementAtPositionResponse_descriptor_;
  metadata.reflection = CMsgZoomToElementAtPositionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgScalePageToValue::kBrowserHandleFieldNumber;
const int CMsgScalePageToValue::kScaleFieldNumber;
const int CMsgScalePageToValue::kXFieldNumber;
const int CMsgScalePageToValue::kYFieldNumber;
#endif  // !_MSC_VER

CMsgScalePageToValue::CMsgScalePageToValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgScalePageToValue::InitAsDefaultInstance() {
}

CMsgScalePageToValue::CMsgScalePageToValue(const CMsgScalePageToValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgScalePageToValue::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  scale_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgScalePageToValue::~CMsgScalePageToValue() {
  SharedDtor();
}

void CMsgScalePageToValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgScalePageToValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgScalePageToValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgScalePageToValue_descriptor_;
}

const CMsgScalePageToValue& CMsgScalePageToValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgScalePageToValue* CMsgScalePageToValue::default_instance_ = NULL;

CMsgScalePageToValue* CMsgScalePageToValue::New() const {
  return new CMsgScalePageToValue;
}

void CMsgScalePageToValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    scale_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgScalePageToValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }
      
      // optional float scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }
      
      // optional float x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }
      
      // optional float y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgScalePageToValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional float scale = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }
  
  // optional float x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }
  
  // optional float y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgScalePageToValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional float scale = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }
  
  // optional float x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }
  
  // optional float y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgScalePageToValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgScalePageToValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgScalePageToValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgScalePageToValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgScalePageToValue::MergeFrom(const CMsgScalePageToValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_scale(from.scale());
    }
    if (from._has_bit(2)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgScalePageToValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValue::CopyFrom(const CMsgScalePageToValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValue::IsInitialized() const {
  
  return true;
}

void CMsgScalePageToValue::Swap(CMsgScalePageToValue* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(scale_, other->scale_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgScalePageToValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgScalePageToValue_descriptor_;
  metadata.reflection = CMsgScalePageToValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgScalePageToValueResponse::kBrowserHandleFieldNumber;
const int CMsgScalePageToValueResponse::kZoomFieldNumber;
const int CMsgScalePageToValueResponse::kWidthDeltaFieldNumber;
const int CMsgScalePageToValueResponse::kHeightDeltaFieldNumber;
#endif  // !_MSC_VER

CMsgScalePageToValueResponse::CMsgScalePageToValueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgScalePageToValueResponse::InitAsDefaultInstance() {
}

CMsgScalePageToValueResponse::CMsgScalePageToValueResponse(const CMsgScalePageToValueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgScalePageToValueResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  zoom_ = 0;
  width_delta_ = 0;
  height_delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgScalePageToValueResponse::~CMsgScalePageToValueResponse() {
  SharedDtor();
}

void CMsgScalePageToValueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgScalePageToValueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgScalePageToValueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgScalePageToValueResponse_descriptor_;
}

const CMsgScalePageToValueResponse& CMsgScalePageToValueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgScalePageToValueResponse* CMsgScalePageToValueResponse::default_instance_ = NULL;

CMsgScalePageToValueResponse* CMsgScalePageToValueResponse::New() const {
  return new CMsgScalePageToValueResponse;
}

void CMsgScalePageToValueResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    zoom_ = 0;
    width_delta_ = 0;
    height_delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgScalePageToValueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_zoom;
        break;
      }
      
      // optional float zoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width_delta;
        break;
      }
      
      // optional int32 width_delta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_delta_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height_delta;
        break;
      }
      
      // optional int32 height_delta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_delta_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgScalePageToValueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional float zoom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->zoom(), output);
  }
  
  // optional int32 width_delta = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width_delta(), output);
  }
  
  // optional int32 height_delta = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height_delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgScalePageToValueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional float zoom = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->zoom(), target);
  }
  
  // optional int32 width_delta = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width_delta(), target);
  }
  
  // optional int32 height_delta = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height_delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgScalePageToValueResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional float zoom = 2;
    if (has_zoom()) {
      total_size += 1 + 4;
    }
    
    // optional int32 width_delta = 3;
    if (has_width_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width_delta());
    }
    
    // optional int32 height_delta = 4;
    if (has_height_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height_delta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgScalePageToValueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgScalePageToValueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgScalePageToValueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgScalePageToValueResponse::MergeFrom(const CMsgScalePageToValueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_zoom(from.zoom());
    }
    if (from._has_bit(2)) {
      set_width_delta(from.width_delta());
    }
    if (from._has_bit(3)) {
      set_height_delta(from.height_delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgScalePageToValueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValueResponse::CopyFrom(const CMsgScalePageToValueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValueResponse::IsInitialized() const {
  
  return true;
}

void CMsgScalePageToValueResponse::Swap(CMsgScalePageToValueResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(zoom_, other->zoom_);
    std::swap(width_delta_, other->width_delta_);
    std::swap(height_delta_, other->height_delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgScalePageToValueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgScalePageToValueResponse_descriptor_;
  metadata.reflection = CMsgScalePageToValueResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgSavePageToJPEG::_default_url_;
const ::std::string CMsgSavePageToJPEG::_default_filename_;
#ifndef _MSC_VER
const int CMsgSavePageToJPEG::kBrowserHandleFieldNumber;
const int CMsgSavePageToJPEG::kUrlFieldNumber;
const int CMsgSavePageToJPEG::kFilenameFieldNumber;
const int CMsgSavePageToJPEG::kWidthFieldNumber;
const int CMsgSavePageToJPEG::kHeightFieldNumber;
#endif  // !_MSC_VER

CMsgSavePageToJPEG::CMsgSavePageToJPEG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSavePageToJPEG::InitAsDefaultInstance() {
}

CMsgSavePageToJPEG::CMsgSavePageToJPEG(const CMsgSavePageToJPEG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSavePageToJPEG::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  filename_ = const_cast< ::std::string*>(&_default_filename_);
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSavePageToJPEG::~CMsgSavePageToJPEG() {
  SharedDtor();
}

void CMsgSavePageToJPEG::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (filename_ != &_default_filename_) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSavePageToJPEG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSavePageToJPEG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSavePageToJPEG_descriptor_;
}

const CMsgSavePageToJPEG& CMsgSavePageToJPEG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSavePageToJPEG* CMsgSavePageToJPEG::default_instance_ = NULL;

CMsgSavePageToJPEG* CMsgSavePageToJPEG::New() const {
  return new CMsgSavePageToJPEG;
}

void CMsgSavePageToJPEG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (filename_ != &_default_filename_) {
        filename_->clear();
      }
    }
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSavePageToJPEG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }
      
      // optional string filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }
      
      // optional uint32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }
      
      // optional uint32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSavePageToJPEG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string filename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  // optional uint32 width = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }
  
  // optional uint32 height = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSavePageToJPEG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string filename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  // optional uint32 width = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }
  
  // optional uint32 height = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSavePageToJPEG::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }
    
    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSavePageToJPEG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSavePageToJPEG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSavePageToJPEG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEG::MergeFrom(const CMsgSavePageToJPEG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_filename(from.filename());
    }
    if (from._has_bit(3)) {
      set_width(from.width());
    }
    if (from._has_bit(4)) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSavePageToJPEG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEG::CopyFrom(const CMsgSavePageToJPEG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEG::IsInitialized() const {
  
  return true;
}

void CMsgSavePageToJPEG::Swap(CMsgSavePageToJPEG* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(filename_, other->filename_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSavePageToJPEG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSavePageToJPEG_descriptor_;
  metadata.reflection = CMsgSavePageToJPEG_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgSavePageToJPEGResponse::_default_url_;
const ::std::string CMsgSavePageToJPEGResponse::_default_filename_;
#ifndef _MSC_VER
const int CMsgSavePageToJPEGResponse::kBrowserHandleFieldNumber;
const int CMsgSavePageToJPEGResponse::kUrlFieldNumber;
const int CMsgSavePageToJPEGResponse::kFilenameFieldNumber;
#endif  // !_MSC_VER

CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSavePageToJPEGResponse::InitAsDefaultInstance() {
}

CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse(const CMsgSavePageToJPEGResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSavePageToJPEGResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  filename_ = const_cast< ::std::string*>(&_default_filename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSavePageToJPEGResponse::~CMsgSavePageToJPEGResponse() {
  SharedDtor();
}

void CMsgSavePageToJPEGResponse::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (filename_ != &_default_filename_) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSavePageToJPEGResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSavePageToJPEGResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSavePageToJPEGResponse_descriptor_;
}

const CMsgSavePageToJPEGResponse& CMsgSavePageToJPEGResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSavePageToJPEGResponse* CMsgSavePageToJPEGResponse::default_instance_ = NULL;

CMsgSavePageToJPEGResponse* CMsgSavePageToJPEGResponse::New() const {
  return new CMsgSavePageToJPEGResponse;
}

void CMsgSavePageToJPEGResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (filename_ != &_default_filename_) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSavePageToJPEGResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }
      
      // optional string filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSavePageToJPEGResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string filename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSavePageToJPEGResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string filename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSavePageToJPEGResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSavePageToJPEGResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSavePageToJPEGResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSavePageToJPEGResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEGResponse::MergeFrom(const CMsgSavePageToJPEGResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSavePageToJPEGResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEGResponse::CopyFrom(const CMsgSavePageToJPEGResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEGResponse::IsInitialized() const {
  
  return true;
}

void CMsgSavePageToJPEGResponse::Swap(CMsgSavePageToJPEGResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSavePageToJPEGResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSavePageToJPEGResponse_descriptor_;
  metadata.reflection = CMsgSavePageToJPEGResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgJSAlert::_default_message_;
#ifndef _MSC_VER
const int CMsgJSAlert::kBrowserHandleFieldNumber;
const int CMsgJSAlert::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgJSAlert::CMsgJSAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgJSAlert::InitAsDefaultInstance() {
}

CMsgJSAlert::CMsgJSAlert(const CMsgJSAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgJSAlert::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJSAlert::~CMsgJSAlert() {
  SharedDtor();
}

void CMsgJSAlert::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgJSAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJSAlert_descriptor_;
}

const CMsgJSAlert& CMsgJSAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgJSAlert* CMsgJSAlert::default_instance_ = NULL;

CMsgJSAlert* CMsgJSAlert::New() const {
  return new CMsgJSAlert;
}

void CMsgJSAlert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJSAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgJSAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgJSAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgJSAlert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJSAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJSAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJSAlert::MergeFrom(const CMsgJSAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJSAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSAlert::CopyFrom(const CMsgJSAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSAlert::IsInitialized() const {
  
  return true;
}

void CMsgJSAlert::Swap(CMsgJSAlert* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJSAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJSAlert_descriptor_;
  metadata.reflection = CMsgJSAlert_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgJSConfirm::_default_message_;
#ifndef _MSC_VER
const int CMsgJSConfirm::kBrowserHandleFieldNumber;
const int CMsgJSConfirm::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgJSConfirm::CMsgJSConfirm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgJSConfirm::InitAsDefaultInstance() {
}

CMsgJSConfirm::CMsgJSConfirm(const CMsgJSConfirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgJSConfirm::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJSConfirm::~CMsgJSConfirm() {
  SharedDtor();
}

void CMsgJSConfirm::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgJSConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJSConfirm_descriptor_;
}

const CMsgJSConfirm& CMsgJSConfirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgJSConfirm* CMsgJSConfirm::default_instance_ = NULL;

CMsgJSConfirm* CMsgJSConfirm::New() const {
  return new CMsgJSConfirm;
}

void CMsgJSConfirm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJSConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgJSConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgJSConfirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgJSConfirm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSConfirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJSConfirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJSConfirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJSConfirm::MergeFrom(const CMsgJSConfirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJSConfirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSConfirm::CopyFrom(const CMsgJSConfirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSConfirm::IsInitialized() const {
  
  return true;
}

void CMsgJSConfirm::Swap(CMsgJSConfirm* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJSConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJSConfirm_descriptor_;
  metadata.reflection = CMsgJSConfirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJSDialogResponse::kBrowserHandleFieldNumber;
const int CMsgJSDialogResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgJSDialogResponse::CMsgJSDialogResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgJSDialogResponse::InitAsDefaultInstance() {
}

CMsgJSDialogResponse::CMsgJSDialogResponse(const CMsgJSDialogResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgJSDialogResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJSDialogResponse::~CMsgJSDialogResponse() {
  SharedDtor();
}

void CMsgJSDialogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJSDialogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJSDialogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJSDialogResponse_descriptor_;
}

const CMsgJSDialogResponse& CMsgJSDialogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgJSDialogResponse* CMsgJSDialogResponse::default_instance_ = NULL;

CMsgJSDialogResponse* CMsgJSDialogResponse::New() const {
  return new CMsgJSDialogResponse;
}

void CMsgJSDialogResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJSDialogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgJSDialogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgJSDialogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgJSDialogResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJSDialogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJSDialogResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJSDialogResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJSDialogResponse::MergeFrom(const CMsgJSDialogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJSDialogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSDialogResponse::CopyFrom(const CMsgJSDialogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSDialogResponse::IsInitialized() const {
  
  return true;
}

void CMsgJSDialogResponse::Swap(CMsgJSDialogResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJSDialogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJSDialogResponse_descriptor_;
  metadata.reflection = CMsgJSDialogResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCanGoBackAndForward::kBrowserHandleFieldNumber;
const int CMsgCanGoBackAndForward::kBgobackFieldNumber;
const int CMsgCanGoBackAndForward::kBgoforwardFieldNumber;
#endif  // !_MSC_VER

CMsgCanGoBackAndForward::CMsgCanGoBackAndForward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCanGoBackAndForward::InitAsDefaultInstance() {
}

CMsgCanGoBackAndForward::CMsgCanGoBackAndForward(const CMsgCanGoBackAndForward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCanGoBackAndForward::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  bgoback_ = false;
  bgoforward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCanGoBackAndForward::~CMsgCanGoBackAndForward() {
  SharedDtor();
}

void CMsgCanGoBackAndForward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCanGoBackAndForward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCanGoBackAndForward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCanGoBackAndForward_descriptor_;
}

const CMsgCanGoBackAndForward& CMsgCanGoBackAndForward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgCanGoBackAndForward* CMsgCanGoBackAndForward::default_instance_ = NULL;

CMsgCanGoBackAndForward* CMsgCanGoBackAndForward::New() const {
  return new CMsgCanGoBackAndForward;
}

void CMsgCanGoBackAndForward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    bgoback_ = false;
    bgoforward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCanGoBackAndForward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bgoback;
        break;
      }
      
      // optional bool bgoback = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgoback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoback_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bgoforward;
        break;
      }
      
      // optional bool bgoforward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgoforward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoforward_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCanGoBackAndForward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool bgoback = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bgoback(), output);
  }
  
  // optional bool bgoforward = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bgoforward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCanGoBackAndForward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool bgoback = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bgoback(), target);
  }
  
  // optional bool bgoforward = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bgoforward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCanGoBackAndForward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool bgoback = 2;
    if (has_bgoback()) {
      total_size += 1 + 1;
    }
    
    // optional bool bgoforward = 3;
    if (has_bgoforward()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCanGoBackAndForward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCanGoBackAndForward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCanGoBackAndForward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCanGoBackAndForward::MergeFrom(const CMsgCanGoBackAndForward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_bgoback(from.bgoback());
    }
    if (from._has_bit(2)) {
      set_bgoforward(from.bgoforward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCanGoBackAndForward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCanGoBackAndForward::CopyFrom(const CMsgCanGoBackAndForward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCanGoBackAndForward::IsInitialized() const {
  
  return true;
}

void CMsgCanGoBackAndForward::Swap(CMsgCanGoBackAndForward* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(bgoback_, other->bgoback_);
    std::swap(bgoforward_, other->bgoforward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCanGoBackAndForward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCanGoBackAndForward_descriptor_;
  metadata.reflection = CMsgCanGoBackAndForward_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgOpenSteamURL::_default_url_;
#ifndef _MSC_VER
const int CMsgOpenSteamURL::kBrowserHandleFieldNumber;
const int CMsgOpenSteamURL::kUrlFieldNumber;
#endif  // !_MSC_VER

CMsgOpenSteamURL::CMsgOpenSteamURL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgOpenSteamURL::InitAsDefaultInstance() {
}

CMsgOpenSteamURL::CMsgOpenSteamURL(const CMsgOpenSteamURL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgOpenSteamURL::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpenSteamURL::~CMsgOpenSteamURL() {
  SharedDtor();
}

void CMsgOpenSteamURL::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgOpenSteamURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpenSteamURL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpenSteamURL_descriptor_;
}

const CMsgOpenSteamURL& CMsgOpenSteamURL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgOpenSteamURL* CMsgOpenSteamURL::default_instance_ = NULL;

CMsgOpenSteamURL* CMsgOpenSteamURL::New() const {
  return new CMsgOpenSteamURL;
}

void CMsgOpenSteamURL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpenSteamURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgOpenSteamURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgOpenSteamURL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgOpenSteamURL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpenSteamURL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpenSteamURL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpenSteamURL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpenSteamURL::MergeFrom(const CMsgOpenSteamURL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpenSteamURL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenSteamURL::CopyFrom(const CMsgOpenSteamURL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenSteamURL::IsInitialized() const {
  
  return true;
}

void CMsgOpenSteamURL::Swap(CMsgOpenSteamURL* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpenSteamURL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpenSteamURL_descriptor_;
  metadata.reflection = CMsgOpenSteamURL_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgSetCookie::_default_key_;
const ::std::string CMsgSetCookie::_default_value_;
const ::std::string CMsgSetCookie::_default_path_;
const ::std::string CMsgSetCookie::_default_host_;
#ifndef _MSC_VER
const int CMsgSetCookie::kKeyFieldNumber;
const int CMsgSetCookie::kValueFieldNumber;
const int CMsgSetCookie::kPathFieldNumber;
const int CMsgSetCookie::kHostFieldNumber;
const int CMsgSetCookie::kExpiresFieldNumber;
#endif  // !_MSC_VER

CMsgSetCookie::CMsgSetCookie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetCookie::InitAsDefaultInstance() {
}

CMsgSetCookie::CMsgSetCookie(const CMsgSetCookie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetCookie::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  host_ = const_cast< ::std::string*>(&_default_host_);
  expires_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetCookie::~CMsgSetCookie() {
  SharedDtor();
}

void CMsgSetCookie::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSetCookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetCookie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetCookie_descriptor_;
}

const CMsgSetCookie& CMsgSetCookie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetCookie* CMsgSetCookie::default_instance_ = NULL;

CMsgSetCookie* CMsgSetCookie::New() const {
  return new CMsgSetCookie;
}

void CMsgSetCookie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    if (_has_bit(2)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
    if (_has_bit(3)) {
      if (host_ != &_default_host_) {
        host_->clear();
      }
    }
    expires_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_host;
        break;
      }
      
      // optional string host = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expires;
        break;
      }
      
      // optional uint32 expires = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional string path = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }
  
  // optional string host = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->host(), output);
  }
  
  // optional uint32 expires = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expires(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetCookie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional string path = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }
  
  // optional string host = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }
  
  // optional uint32 expires = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expires(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetCookie::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional uint32 expires = 5;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetCookie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetCookie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetCookie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetCookie::MergeFrom(const CMsgSetCookie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_path(from.path());
    }
    if (from._has_bit(3)) {
      set_host(from.host());
    }
    if (from._has_bit(4)) {
      set_expires(from.expires());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetCookie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCookie::CopyFrom(const CMsgSetCookie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCookie::IsInitialized() const {
  
  return true;
}

void CMsgSetCookie::Swap(CMsgSetCookie* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(path_, other->path_);
    std::swap(host_, other->host_);
    std::swap(expires_, other->expires_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetCookie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetCookie_descriptor_;
  metadata.reflection = CMsgSetCookie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetTargetFrameRate::kNTargetFrameRateFieldNumber;
#endif  // !_MSC_VER

CMsgSetTargetFrameRate::CMsgSetTargetFrameRate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetTargetFrameRate::InitAsDefaultInstance() {
}

CMsgSetTargetFrameRate::CMsgSetTargetFrameRate(const CMsgSetTargetFrameRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetTargetFrameRate::SharedCtor() {
  _cached_size_ = 0;
  ntargetframerate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetTargetFrameRate::~CMsgSetTargetFrameRate() {
  SharedDtor();
}

void CMsgSetTargetFrameRate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetTargetFrameRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetTargetFrameRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetTargetFrameRate_descriptor_;
}

const CMsgSetTargetFrameRate& CMsgSetTargetFrameRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgSetTargetFrameRate* CMsgSetTargetFrameRate::default_instance_ = NULL;

CMsgSetTargetFrameRate* CMsgSetTargetFrameRate::New() const {
  return new CMsgSetTargetFrameRate;
}

void CMsgSetTargetFrameRate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntargetframerate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetTargetFrameRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nTargetFrameRate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntargetframerate_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetTargetFrameRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nTargetFrameRate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ntargetframerate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetTargetFrameRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nTargetFrameRate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ntargetframerate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetTargetFrameRate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nTargetFrameRate = 1;
    if (has_ntargetframerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntargetframerate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetTargetFrameRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetTargetFrameRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetTargetFrameRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetTargetFrameRate::MergeFrom(const CMsgSetTargetFrameRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ntargetframerate(from.ntargetframerate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetTargetFrameRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetTargetFrameRate::CopyFrom(const CMsgSetTargetFrameRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetTargetFrameRate::IsInitialized() const {
  
  return true;
}

void CMsgSetTargetFrameRate::Swap(CMsgSetTargetFrameRate* other) {
  if (other != this) {
    std::swap(ntargetframerate_, other->ntargetframerate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetTargetFrameRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetTargetFrameRate_descriptor_;
  metadata.reflection = CMsgSetTargetFrameRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFullRepaint::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgFullRepaint::CMsgFullRepaint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFullRepaint::InitAsDefaultInstance() {
}

CMsgFullRepaint::CMsgFullRepaint(const CMsgFullRepaint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFullRepaint::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFullRepaint::~CMsgFullRepaint() {
  SharedDtor();
}

void CMsgFullRepaint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFullRepaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFullRepaint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFullRepaint_descriptor_;
}

const CMsgFullRepaint& CMsgFullRepaint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFullRepaint* CMsgFullRepaint::default_instance_ = NULL;

CMsgFullRepaint* CMsgFullRepaint::New() const {
  return new CMsgFullRepaint;
}

void CMsgFullRepaint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFullRepaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFullRepaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFullRepaint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFullRepaint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFullRepaint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFullRepaint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFullRepaint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFullRepaint::MergeFrom(const CMsgFullRepaint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFullRepaint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFullRepaint::CopyFrom(const CMsgFullRepaint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFullRepaint::IsInitialized() const {
  
  return true;
}

void CMsgFullRepaint::Swap(CMsgFullRepaint* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFullRepaint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFullRepaint_descriptor_;
  metadata.reflection = CMsgFullRepaint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestFullScreen::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgRequestFullScreen::CMsgRequestFullScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestFullScreen::InitAsDefaultInstance() {
}

CMsgRequestFullScreen::CMsgRequestFullScreen(const CMsgRequestFullScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestFullScreen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestFullScreen::~CMsgRequestFullScreen() {
  SharedDtor();
}

void CMsgRequestFullScreen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestFullScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestFullScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestFullScreen_descriptor_;
}

const CMsgRequestFullScreen& CMsgRequestFullScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgRequestFullScreen* CMsgRequestFullScreen::default_instance_ = NULL;

CMsgRequestFullScreen* CMsgRequestFullScreen::New() const {
  return new CMsgRequestFullScreen;
}

void CMsgRequestFullScreen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestFullScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestFullScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestFullScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestFullScreen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestFullScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestFullScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestFullScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestFullScreen::MergeFrom(const CMsgRequestFullScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestFullScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestFullScreen::CopyFrom(const CMsgRequestFullScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestFullScreen::IsInitialized() const {
  
  return true;
}

void CMsgRequestFullScreen::Swap(CMsgRequestFullScreen* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestFullScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestFullScreen_descriptor_;
  metadata.reflection = CMsgRequestFullScreen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestFullScreenResponse::kBrowserHandleFieldNumber;
const int CMsgRequestFullScreenResponse::kBallowFieldNumber;
#endif  // !_MSC_VER

CMsgRequestFullScreenResponse::CMsgRequestFullScreenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestFullScreenResponse::InitAsDefaultInstance() {
}

CMsgRequestFullScreenResponse::CMsgRequestFullScreenResponse(const CMsgRequestFullScreenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestFullScreenResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ballow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestFullScreenResponse::~CMsgRequestFullScreenResponse() {
  SharedDtor();
}

void CMsgRequestFullScreenResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestFullScreenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestFullScreenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestFullScreenResponse_descriptor_;
}

const CMsgRequestFullScreenResponse& CMsgRequestFullScreenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgRequestFullScreenResponse* CMsgRequestFullScreenResponse::default_instance_ = NULL;

CMsgRequestFullScreenResponse* CMsgRequestFullScreenResponse::New() const {
  return new CMsgRequestFullScreenResponse;
}

void CMsgRequestFullScreenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    ballow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestFullScreenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballow;
        break;
      }
      
      // optional bool ballow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestFullScreenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool ballow = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestFullScreenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool ballow = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestFullScreenResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool ballow = 2;
    if (has_ballow()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestFullScreenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestFullScreenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestFullScreenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestFullScreenResponse::MergeFrom(const CMsgRequestFullScreenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_ballow(from.ballow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestFullScreenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestFullScreenResponse::CopyFrom(const CMsgRequestFullScreenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestFullScreenResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestFullScreenResponse::Swap(CMsgRequestFullScreenResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(ballow_, other->ballow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestFullScreenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestFullScreenResponse_descriptor_;
  metadata.reflection = CMsgRequestFullScreenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgExitFullScreen::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgExitFullScreen::CMsgExitFullScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgExitFullScreen::InitAsDefaultInstance() {
}

CMsgExitFullScreen::CMsgExitFullScreen(const CMsgExitFullScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgExitFullScreen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgExitFullScreen::~CMsgExitFullScreen() {
  SharedDtor();
}

void CMsgExitFullScreen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgExitFullScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgExitFullScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgExitFullScreen_descriptor_;
}

const CMsgExitFullScreen& CMsgExitFullScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgExitFullScreen* CMsgExitFullScreen::default_instance_ = NULL;

CMsgExitFullScreen* CMsgExitFullScreen::New() const {
  return new CMsgExitFullScreen;
}

void CMsgExitFullScreen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgExitFullScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgExitFullScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgExitFullScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgExitFullScreen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgExitFullScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgExitFullScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgExitFullScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgExitFullScreen::MergeFrom(const CMsgExitFullScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgExitFullScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitFullScreen::CopyFrom(const CMsgExitFullScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitFullScreen::IsInitialized() const {
  
  return true;
}

void CMsgExitFullScreen::Swap(CMsgExitFullScreen* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgExitFullScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgExitFullScreen_descriptor_;
  metadata.reflection = CMsgExitFullScreen_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGetCookiesForURL::_default_url_;
#ifndef _MSC_VER
const int CMsgGetCookiesForURL::kBrowserHandleFieldNumber;
const int CMsgGetCookiesForURL::kUrlFieldNumber;
#endif  // !_MSC_VER

CMsgGetCookiesForURL::CMsgGetCookiesForURL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGetCookiesForURL::InitAsDefaultInstance() {
}

CMsgGetCookiesForURL::CMsgGetCookiesForURL(const CMsgGetCookiesForURL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGetCookiesForURL::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGetCookiesForURL::~CMsgGetCookiesForURL() {
  SharedDtor();
}

void CMsgGetCookiesForURL::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGetCookiesForURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetCookiesForURL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGetCookiesForURL_descriptor_;
}

const CMsgGetCookiesForURL& CMsgGetCookiesForURL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgGetCookiesForURL* CMsgGetCookiesForURL::default_instance_ = NULL;

CMsgGetCookiesForURL* CMsgGetCookiesForURL::New() const {
  return new CMsgGetCookiesForURL;
}

void CMsgGetCookiesForURL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGetCookiesForURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGetCookiesForURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGetCookiesForURL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGetCookiesForURL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetCookiesForURL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGetCookiesForURL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGetCookiesForURL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURL::MergeFrom(const CMsgGetCookiesForURL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGetCookiesForURL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURL::CopyFrom(const CMsgGetCookiesForURL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURL::IsInitialized() const {
  
  return true;
}

void CMsgGetCookiesForURL::Swap(CMsgGetCookiesForURL* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGetCookiesForURL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGetCookiesForURL_descriptor_;
  metadata.reflection = CMsgGetCookiesForURL_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CCookie::_default_name_;
const ::std::string CCookie::_default_value_;
const ::std::string CCookie::_default_domain_;
const ::std::string CCookie::_default_path_;
#ifndef _MSC_VER
const int CCookie::kNameFieldNumber;
const int CCookie::kValueFieldNumber;
const int CCookie::kDomainFieldNumber;
const int CCookie::kPathFieldNumber;
#endif  // !_MSC_VER

CCookie::CCookie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCookie::InitAsDefaultInstance() {
}

CCookie::CCookie(const CCookie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCookie::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  domain_ = const_cast< ::std::string*>(&_default_domain_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCookie::~CCookie() {
  SharedDtor();
}

void CCookie::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (domain_ != &_default_domain_) {
    delete domain_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void CCookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCookie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCookie_descriptor_;
}

const CCookie& CCookie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CCookie* CCookie::default_instance_ = NULL;

CCookie* CCookie::New() const {
  return new CCookie;
}

void CCookie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    if (_has_bit(2)) {
      if (domain_ != &_default_domain_) {
        domain_->clear();
      }
    }
    if (_has_bit(3)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }
      
      // optional string domain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }
      
      // optional string path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional string domain = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->domain(), output);
  }
  
  // optional string path = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCookie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional string domain = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }
  
  // optional string path = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCookie::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCookie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCookie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCookie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCookie::MergeFrom(const CCookie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_domain(from.domain());
    }
    if (from._has_bit(3)) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCookie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCookie::CopyFrom(const CCookie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCookie::IsInitialized() const {
  
  return true;
}

void CCookie::Swap(CCookie* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(domain_, other->domain_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCookie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCookie_descriptor_;
  metadata.reflection = CCookie_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGetCookiesForURLResponse::_default_url_;
#ifndef _MSC_VER
const int CMsgGetCookiesForURLResponse::kBrowserHandleFieldNumber;
const int CMsgGetCookiesForURLResponse::kUrlFieldNumber;
const int CMsgGetCookiesForURLResponse::kCookiesFieldNumber;
#endif  // !_MSC_VER

CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGetCookiesForURLResponse::InitAsDefaultInstance() {
}

CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse(const CMsgGetCookiesForURLResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGetCookiesForURLResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  url_ = const_cast< ::std::string*>(&_default_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGetCookiesForURLResponse::~CMsgGetCookiesForURLResponse() {
  SharedDtor();
}

void CMsgGetCookiesForURLResponse::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGetCookiesForURLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGetCookiesForURLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGetCookiesForURLResponse_descriptor_;
}

const CMsgGetCookiesForURLResponse& CMsgGetCookiesForURLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgGetCookiesForURLResponse* CMsgGetCookiesForURLResponse::default_instance_ = NULL;

CMsgGetCookiesForURLResponse* CMsgGetCookiesForURLResponse::New() const {
  return new CMsgGetCookiesForURLResponse;
}

void CMsgGetCookiesForURLResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
  }
  cookies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGetCookiesForURLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cookies;
        break;
      }
      
      // repeated .CCookie cookies = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cookies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cookies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cookies;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGetCookiesForURLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // repeated .CCookie cookies = 3;
  for (int i = 0; i < this->cookies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cookies(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGetCookiesForURLResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string url = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // repeated .CCookie cookies = 3;
  for (int i = 0; i < this->cookies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cookies(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGetCookiesForURLResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  // repeated .CCookie cookies = 3;
  total_size += 1 * this->cookies_size();
  for (int i = 0; i < this->cookies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cookies(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGetCookiesForURLResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGetCookiesForURLResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGetCookiesForURLResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURLResponse::MergeFrom(const CMsgGetCookiesForURLResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cookies_.MergeFrom(from.cookies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGetCookiesForURLResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURLResponse::CopyFrom(const CMsgGetCookiesForURLResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURLResponse::IsInitialized() const {
  
  return true;
}

void CMsgGetCookiesForURLResponse::Swap(CMsgGetCookiesForURLResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(url_, other->url_);
    cookies_.Swap(&other->cookies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGetCookiesForURLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGetCookiesForURLResponse_descriptor_;
  metadata.reflection = CMsgGetCookiesForURLResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgNodeHasFocus::_default_name_;
const ::std::string CMsgNodeHasFocus::_default_elementtagname_;
const ::std::string CMsgNodeHasFocus::_default_searchbuttontext_;
const ::std::string CMsgNodeHasFocus::_default_input_type_;
#ifndef _MSC_VER
const int CMsgNodeHasFocus::kBrowserHandleFieldNumber;
const int CMsgNodeHasFocus::kBInputFieldNumber;
const int CMsgNodeHasFocus::kNameFieldNumber;
const int CMsgNodeHasFocus::kElementtagnameFieldNumber;
const int CMsgNodeHasFocus::kSearchbuttontextFieldNumber;
const int CMsgNodeHasFocus::kBHasMultipleInputsFieldNumber;
const int CMsgNodeHasFocus::kInputTypeFieldNumber;
#endif  // !_MSC_VER

CMsgNodeHasFocus::CMsgNodeHasFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgNodeHasFocus::InitAsDefaultInstance() {
}

CMsgNodeHasFocus::CMsgNodeHasFocus(const CMsgNodeHasFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgNodeHasFocus::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  binput_ = false;
  name_ = const_cast< ::std::string*>(&_default_name_);
  elementtagname_ = const_cast< ::std::string*>(&_default_elementtagname_);
  searchbuttontext_ = const_cast< ::std::string*>(&_default_searchbuttontext_);
  bhasmultipleinputs_ = false;
  input_type_ = const_cast< ::std::string*>(&_default_input_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgNodeHasFocus::~CMsgNodeHasFocus() {
  SharedDtor();
}

void CMsgNodeHasFocus::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (elementtagname_ != &_default_elementtagname_) {
    delete elementtagname_;
  }
  if (searchbuttontext_ != &_default_searchbuttontext_) {
    delete searchbuttontext_;
  }
  if (input_type_ != &_default_input_type_) {
    delete input_type_;
  }
  if (this != default_instance_) {
  }
}

void CMsgNodeHasFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNodeHasFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgNodeHasFocus_descriptor_;
}

const CMsgNodeHasFocus& CMsgNodeHasFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgNodeHasFocus* CMsgNodeHasFocus::default_instance_ = NULL;

CMsgNodeHasFocus* CMsgNodeHasFocus::New() const {
  return new CMsgNodeHasFocus;
}

void CMsgNodeHasFocus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    binput_ = false;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (elementtagname_ != &_default_elementtagname_) {
        elementtagname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (searchbuttontext_ != &_default_searchbuttontext_) {
        searchbuttontext_->clear();
      }
    }
    bhasmultipleinputs_ = false;
    if (_has_bit(6)) {
      if (input_type_ != &_default_input_type_) {
        input_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgNodeHasFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bInput;
        break;
      }
      
      // optional bool bInput = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bInput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binput_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_elementtagname;
        break;
      }
      
      // optional string elementtagname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elementtagname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elementtagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->elementtagname().data(), this->elementtagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_searchbuttontext;
        break;
      }
      
      // optional string searchbuttontext = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searchbuttontext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchbuttontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->searchbuttontext().data(), this->searchbuttontext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bHasMultipleInputs;
        break;
      }
      
      // optional bool bHasMultipleInputs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHasMultipleInputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhasmultipleinputs_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_input_type;
        break;
      }
      
      // optional string input_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_type().data(), this->input_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgNodeHasFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional bool bInput = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binput(), output);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string elementtagname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elementtagname().data(), this->elementtagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->elementtagname(), output);
  }
  
  // optional string searchbuttontext = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchbuttontext().data(), this->searchbuttontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->searchbuttontext(), output);
  }
  
  // optional bool bHasMultipleInputs = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bhasmultipleinputs(), output);
  }
  
  // optional string input_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_type().data(), this->input_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->input_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgNodeHasFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional bool bInput = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binput(), target);
  }
  
  // optional string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string elementtagname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elementtagname().data(), this->elementtagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->elementtagname(), target);
  }
  
  // optional string searchbuttontext = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchbuttontext().data(), this->searchbuttontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->searchbuttontext(), target);
  }
  
  // optional bool bHasMultipleInputs = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bhasmultipleinputs(), target);
  }
  
  // optional string input_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_type().data(), this->input_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->input_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgNodeHasFocus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional bool bInput = 2;
    if (has_binput()) {
      total_size += 1 + 1;
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string elementtagname = 4;
    if (has_elementtagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elementtagname());
    }
    
    // optional string searchbuttontext = 5;
    if (has_searchbuttontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchbuttontext());
    }
    
    // optional bool bHasMultipleInputs = 6;
    if (has_bhasmultipleinputs()) {
      total_size += 1 + 1;
    }
    
    // optional string input_type = 7;
    if (has_input_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNodeHasFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgNodeHasFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgNodeHasFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgNodeHasFocus::MergeFrom(const CMsgNodeHasFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_binput(from.binput());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_elementtagname(from.elementtagname());
    }
    if (from._has_bit(4)) {
      set_searchbuttontext(from.searchbuttontext());
    }
    if (from._has_bit(5)) {
      set_bhasmultipleinputs(from.bhasmultipleinputs());
    }
    if (from._has_bit(6)) {
      set_input_type(from.input_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgNodeHasFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNodeHasFocus::CopyFrom(const CMsgNodeHasFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNodeHasFocus::IsInitialized() const {
  
  return true;
}

void CMsgNodeHasFocus::Swap(CMsgNodeHasFocus* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(binput_, other->binput_);
    std::swap(name_, other->name_);
    std::swap(elementtagname_, other->elementtagname_);
    std::swap(searchbuttontext_, other->searchbuttontext_);
    std::swap(bhasmultipleinputs_, other->bhasmultipleinputs_);
    std::swap(input_type_, other->input_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgNodeHasFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgNodeHasFocus_descriptor_;
  metadata.reflection = CMsgNodeHasFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgZoomToFocusedElement::kBrowserHandleFieldNumber;
const int CMsgZoomToFocusedElement::kLeftoffsetFieldNumber;
const int CMsgZoomToFocusedElement::kTopoffsetFieldNumber;
#endif  // !_MSC_VER

CMsgZoomToFocusedElement::CMsgZoomToFocusedElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgZoomToFocusedElement::InitAsDefaultInstance() {
}

CMsgZoomToFocusedElement::CMsgZoomToFocusedElement(const CMsgZoomToFocusedElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgZoomToFocusedElement::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  leftoffset_ = 0u;
  topoffset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgZoomToFocusedElement::~CMsgZoomToFocusedElement() {
  SharedDtor();
}

void CMsgZoomToFocusedElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgZoomToFocusedElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgZoomToFocusedElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgZoomToFocusedElement_descriptor_;
}

const CMsgZoomToFocusedElement& CMsgZoomToFocusedElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgZoomToFocusedElement* CMsgZoomToFocusedElement::default_instance_ = NULL;

CMsgZoomToFocusedElement* CMsgZoomToFocusedElement::New() const {
  return new CMsgZoomToFocusedElement;
}

void CMsgZoomToFocusedElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    leftoffset_ = 0u;
    topoffset_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgZoomToFocusedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftoffset;
        break;
      }
      
      // optional uint32 leftoffset = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftoffset_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topoffset;
        break;
      }
      
      // optional uint32 topoffset = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &topoffset_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgZoomToFocusedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional uint32 leftoffset = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leftoffset(), output);
  }
  
  // optional uint32 topoffset = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->topoffset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgZoomToFocusedElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional uint32 leftoffset = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftoffset(), target);
  }
  
  // optional uint32 topoffset = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->topoffset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgZoomToFocusedElement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional uint32 leftoffset = 2 [default = 0];
    if (has_leftoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftoffset());
    }
    
    // optional uint32 topoffset = 3 [default = 0];
    if (has_topoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->topoffset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgZoomToFocusedElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgZoomToFocusedElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgZoomToFocusedElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgZoomToFocusedElement::MergeFrom(const CMsgZoomToFocusedElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_leftoffset(from.leftoffset());
    }
    if (from._has_bit(2)) {
      set_topoffset(from.topoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgZoomToFocusedElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToFocusedElement::CopyFrom(const CMsgZoomToFocusedElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToFocusedElement::IsInitialized() const {
  
  return true;
}

void CMsgZoomToFocusedElement::Swap(CMsgZoomToFocusedElement* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(leftoffset_, other->leftoffset_);
    std::swap(topoffset_, other->topoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgZoomToFocusedElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgZoomToFocusedElement_descriptor_;
  metadata.reflection = CMsgZoomToFocusedElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCloseFullScreenFlashIfOpen::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgCloseFullScreenFlashIfOpen::CMsgCloseFullScreenFlashIfOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCloseFullScreenFlashIfOpen::InitAsDefaultInstance() {
}

CMsgCloseFullScreenFlashIfOpen::CMsgCloseFullScreenFlashIfOpen(const CMsgCloseFullScreenFlashIfOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCloseFullScreenFlashIfOpen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCloseFullScreenFlashIfOpen::~CMsgCloseFullScreenFlashIfOpen() {
  SharedDtor();
}

void CMsgCloseFullScreenFlashIfOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCloseFullScreenFlashIfOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCloseFullScreenFlashIfOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCloseFullScreenFlashIfOpen_descriptor_;
}

const CMsgCloseFullScreenFlashIfOpen& CMsgCloseFullScreenFlashIfOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgCloseFullScreenFlashIfOpen* CMsgCloseFullScreenFlashIfOpen::default_instance_ = NULL;

CMsgCloseFullScreenFlashIfOpen* CMsgCloseFullScreenFlashIfOpen::New() const {
  return new CMsgCloseFullScreenFlashIfOpen;
}

void CMsgCloseFullScreenFlashIfOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCloseFullScreenFlashIfOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCloseFullScreenFlashIfOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCloseFullScreenFlashIfOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCloseFullScreenFlashIfOpen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCloseFullScreenFlashIfOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCloseFullScreenFlashIfOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCloseFullScreenFlashIfOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCloseFullScreenFlashIfOpen::MergeFrom(const CMsgCloseFullScreenFlashIfOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCloseFullScreenFlashIfOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCloseFullScreenFlashIfOpen::CopyFrom(const CMsgCloseFullScreenFlashIfOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCloseFullScreenFlashIfOpen::IsInitialized() const {
  
  return true;
}

void CMsgCloseFullScreenFlashIfOpen::Swap(CMsgCloseFullScreenFlashIfOpen* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCloseFullScreenFlashIfOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCloseFullScreenFlashIfOpen_descriptor_;
  metadata.reflection = CMsgCloseFullScreenFlashIfOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPauseFullScreenFlashMovieIfOpen::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgPauseFullScreenFlashMovieIfOpen::CMsgPauseFullScreenFlashMovieIfOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPauseFullScreenFlashMovieIfOpen::InitAsDefaultInstance() {
}

CMsgPauseFullScreenFlashMovieIfOpen::CMsgPauseFullScreenFlashMovieIfOpen(const CMsgPauseFullScreenFlashMovieIfOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPauseFullScreenFlashMovieIfOpen::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPauseFullScreenFlashMovieIfOpen::~CMsgPauseFullScreenFlashMovieIfOpen() {
  SharedDtor();
}

void CMsgPauseFullScreenFlashMovieIfOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPauseFullScreenFlashMovieIfOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPauseFullScreenFlashMovieIfOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPauseFullScreenFlashMovieIfOpen_descriptor_;
}

const CMsgPauseFullScreenFlashMovieIfOpen& CMsgPauseFullScreenFlashMovieIfOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgPauseFullScreenFlashMovieIfOpen* CMsgPauseFullScreenFlashMovieIfOpen::default_instance_ = NULL;

CMsgPauseFullScreenFlashMovieIfOpen* CMsgPauseFullScreenFlashMovieIfOpen::New() const {
  return new CMsgPauseFullScreenFlashMovieIfOpen;
}

void CMsgPauseFullScreenFlashMovieIfOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPauseFullScreenFlashMovieIfOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPauseFullScreenFlashMovieIfOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPauseFullScreenFlashMovieIfOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPauseFullScreenFlashMovieIfOpen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPauseFullScreenFlashMovieIfOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPauseFullScreenFlashMovieIfOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPauseFullScreenFlashMovieIfOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPauseFullScreenFlashMovieIfOpen::MergeFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPauseFullScreenFlashMovieIfOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPauseFullScreenFlashMovieIfOpen::CopyFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPauseFullScreenFlashMovieIfOpen::IsInitialized() const {
  
  return true;
}

void CMsgPauseFullScreenFlashMovieIfOpen::Swap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPauseFullScreenFlashMovieIfOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPauseFullScreenFlashMovieIfOpen_descriptor_;
  metadata.reflection = CMsgPauseFullScreenFlashMovieIfOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFocusedNodeText::kBrowserHandleFieldNumber;
#endif  // !_MSC_VER

CMsgFocusedNodeText::CMsgFocusedNodeText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFocusedNodeText::InitAsDefaultInstance() {
}

CMsgFocusedNodeText::CMsgFocusedNodeText(const CMsgFocusedNodeText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFocusedNodeText::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFocusedNodeText::~CMsgFocusedNodeText() {
  SharedDtor();
}

void CMsgFocusedNodeText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFocusedNodeText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFocusedNodeText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFocusedNodeText_descriptor_;
}

const CMsgFocusedNodeText& CMsgFocusedNodeText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFocusedNodeText* CMsgFocusedNodeText::default_instance_ = NULL;

CMsgFocusedNodeText* CMsgFocusedNodeText::New() const {
  return new CMsgFocusedNodeText;
}

void CMsgFocusedNodeText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFocusedNodeText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFocusedNodeText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFocusedNodeText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFocusedNodeText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFocusedNodeText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFocusedNodeText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFocusedNodeText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeText::MergeFrom(const CMsgFocusedNodeText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFocusedNodeText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeText::CopyFrom(const CMsgFocusedNodeText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeText::IsInitialized() const {
  
  return true;
}

void CMsgFocusedNodeText::Swap(CMsgFocusedNodeText* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFocusedNodeText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFocusedNodeText_descriptor_;
  metadata.reflection = CMsgFocusedNodeText_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgFocusedNodeTextResponse::_default_value_;
#ifndef _MSC_VER
const int CMsgFocusedNodeTextResponse::kBrowserHandleFieldNumber;
const int CMsgFocusedNodeTextResponse::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFocusedNodeTextResponse::InitAsDefaultInstance() {
}

CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse(const CMsgFocusedNodeTextResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFocusedNodeTextResponse::SharedCtor() {
  _cached_size_ = 0;
  browser_handle_ = 0u;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFocusedNodeTextResponse::~CMsgFocusedNodeTextResponse() {
  SharedDtor();
}

void CMsgFocusedNodeTextResponse::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgFocusedNodeTextResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFocusedNodeTextResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFocusedNodeTextResponse_descriptor_;
}

const CMsgFocusedNodeTextResponse& CMsgFocusedNodeTextResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_htmlmessages_2eproto();  return *default_instance_;
}

CMsgFocusedNodeTextResponse* CMsgFocusedNodeTextResponse::default_instance_ = NULL;

CMsgFocusedNodeTextResponse* CMsgFocusedNodeTextResponse::New() const {
  return new CMsgFocusedNodeTextResponse;
}

void CMsgFocusedNodeTextResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    browser_handle_ = 0u;
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFocusedNodeTextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFocusedNodeTextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFocusedNodeTextResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 browser_handle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFocusedNodeTextResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 browser_handle = 1;
    if (has_browser_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFocusedNodeTextResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFocusedNodeTextResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFocusedNodeTextResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeTextResponse::MergeFrom(const CMsgFocusedNodeTextResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_browser_handle(from.browser_handle());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFocusedNodeTextResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeTextResponse::CopyFrom(const CMsgFocusedNodeTextResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeTextResponse::IsInitialized() const {
  
  return true;
}

void CMsgFocusedNodeTextResponse::Swap(CMsgFocusedNodeTextResponse* other) {
  if (other != this) {
    std::swap(browser_handle_, other->browser_handle_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFocusedNodeTextResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFocusedNodeTextResponse_descriptor_;
  metadata.reflection = CMsgFocusedNodeTextResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
